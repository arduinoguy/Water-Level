
ps.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000005e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000007b  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000044  00000000  00000000  000001bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000004d  00000000  00000000  000001ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000155  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000003c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	12 c0       	rjmp	.+36     	; 0x5a <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>
#include <avr/sleep.h>

int main(void)
{
	DDRB=0;
  38:	17 ba       	out	0x17, r1	; 23
	DDRC=0;
  3a:	14 ba       	out	0x14, r1	; 20
	DDRD=0;
  3c:	11 ba       	out	0x11, r1	; 17
	PORTB=~(1<<4);
  3e:	8f ee       	ldi	r24, 0xEF	; 239
  40:	88 bb       	out	0x18, r24	; 24
	PORTC=0xff;
  42:	8f ef       	ldi	r24, 0xFF	; 255
  44:	85 bb       	out	0x15, r24	; 21
	PORTD=0xff;
  46:	82 bb       	out	0x12, r24	; 18
	ACSR|=(1<<ACD);
  48:	47 9a       	sbi	0x08, 7	; 8
	  sleep_mode();
	  #endif
    /* Replace with your application code */
	
	#ifdef SLEEP1
	MCUCR|=(1<<SE)|(1<<SM1);
  4a:	85 b7       	in	r24, 0x35	; 53
  4c:	80 6a       	ori	r24, 0xA0	; 160
  4e:	85 bf       	out	0x35, r24	; 53
	MCUCR&=~((1<<SM0)|(1<<SM2));
  50:	85 b7       	in	r24, 0x35	; 53
  52:	8f 7a       	andi	r24, 0xAF	; 175
  54:	85 bf       	out	0x35, r24	; 53
	asm("SLEEP");
  56:	88 95       	sleep
#define SLEEP1

#include <avr/io.h>
#include <avr/sleep.h>

int main(void)
  58:	ff cf       	rjmp	.-2      	; 0x58 <__SREG__+0x19>

0000005a <_exit>:
  5a:	f8 94       	cli

0000005c <__stop_program>:
  5c:	ff cf       	rjmp	.-2      	; 0x5c <__stop_program>
