
GccCppProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000094  00800060  000013b4  00001448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ed  008000f4  008000f4  000014dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000150c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000408  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000082ad  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001919  00000000  00000000  00009bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001637  00000000  00000000  0000b516  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c78  00000000  00000000  0000cb50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ebe  00000000  00000000  0000d7c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000043ea  00000000  00000000  0000f686  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b8  00000000  00000000  00013a70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	42 c0       	rjmp	.+132    	; 0x86 <__ctors_end>
       2:	b7 c6       	rjmp	.+3438   	; 0xd72 <__vector_1>
       4:	e3 c6       	rjmp	.+3526   	; 0xdcc <__vector_2>
       6:	37 c6       	rjmp	.+3182   	; 0xc76 <__vector_3>
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	62 c0       	rjmp	.+196    	; 0xd0 <__bad_interrupt>
       c:	a9 c2       	rjmp	.+1362   	; 0x560 <__vector_6>
       e:	60 c0       	rjmp	.+192    	; 0xd0 <__bad_interrupt>
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	09 c7       	rjmp	.+3602   	; 0xe26 <__vector_9>
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	61 c4       	rjmp	.+2242   	; 0x8da <__vector_11>
      18:	98 c4       	rjmp	.+2352   	; 0x94a <__vector_12>
      1a:	5a c0       	rjmp	.+180    	; 0xd0 <__bad_interrupt>
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	58 c0       	rjmp	.+176    	; 0xd0 <__bad_interrupt>
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	56 c0       	rjmp	.+172    	; 0xd0 <__bad_interrupt>
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>

00000026 <__trampolines_end>:
      26:	02 00       	.word	0x0002	; ????

00000027 <digital_pin_to_timer_PGM>:
	...
      2f:	00 03 04 06 00 00 00 00 00 00 00 00                 ............

0000003b <digital_pin_to_bit_mask_PGM>:
      3b:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      4b:	04 08 10 20                                         ... 

0000004f <digital_pin_to_port_PGM>:
      4f:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      5f:	03 03 03 03                                         ....

00000063 <port_to_input_PGM>:
      63:	00 00 00 00 36 00 33 00 30 00                       ....6.3.0.

0000006d <port_to_output_PGM>:
      6d:	00 00 00 00 38 00 35 00 32 00                       ....8.5.2.

00000077 <port_to_mode_PGM>:
      77:	00 00 00 00 37 00 34 00 31 00 00                    ....7.4.1..

00000082 <__ctors_start>:
      82:	d3 04       	cpc	r13, r3
      84:	3d 05       	cpc	r19, r13

00000086 <__ctors_end>:
      86:	11 24       	eor	r1, r1
      88:	1f be       	out	0x3f, r1	; 63
      8a:	cf e5       	ldi	r28, 0x5F	; 95
      8c:	d4 e0       	ldi	r29, 0x04	; 4
      8e:	de bf       	out	0x3e, r29	; 62
      90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
      92:	10 e0       	ldi	r17, 0x00	; 0
      94:	a0 e6       	ldi	r26, 0x60	; 96
      96:	b0 e0       	ldi	r27, 0x00	; 0
      98:	e4 eb       	ldi	r30, 0xB4	; 180
      9a:	f3 e1       	ldi	r31, 0x13	; 19
      9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
      9e:	05 90       	lpm	r0, Z+
      a0:	0d 92       	st	X+, r0
      a2:	a4 3f       	cpi	r26, 0xF4	; 244
      a4:	b1 07       	cpc	r27, r17
      a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
      a8:	21 e0       	ldi	r18, 0x01	; 1
      aa:	a4 ef       	ldi	r26, 0xF4	; 244
      ac:	b0 e0       	ldi	r27, 0x00	; 0
      ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
      b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
      b2:	a1 3e       	cpi	r26, 0xE1	; 225
      b4:	b2 07       	cpc	r27, r18
      b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>

000000b8 <__do_global_ctors>:
      b8:	10 e0       	ldi	r17, 0x00	; 0
      ba:	c3 e4       	ldi	r28, 0x43	; 67
      bc:	d0 e0       	ldi	r29, 0x00	; 0
      be:	03 c0       	rjmp	.+6      	; 0xc6 <__do_global_ctors+0xe>
      c0:	21 97       	sbiw	r28, 0x01	; 1
      c2:	fe 01       	movw	r30, r28
      c4:	6f d9       	rcall	.-3362   	; 0xfffff3a4 <__eeprom_end+0xff7ef3a4>
      c6:	c1 34       	cpi	r28, 0x41	; 65
      c8:	d1 07       	cpc	r29, r17
      ca:	d1 f7       	brne	.-12     	; 0xc0 <__do_global_ctors+0x8>
      cc:	e2 d4       	rcall	.+2500   	; 0xa92 <main>
      ce:	70 c9       	rjmp	.-3360   	; 0xfffff3b0 <__eeprom_end+0xff7ef3b0>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <vw_symbol_6to4>:
{
    uint8_t i;
    
    // Linear search :-( Could have a 64 byte reverse lookup table?
    for (i = 0; i < 16; i++)
	if (symbol == symbols[i]) return i;
      d2:	8d 30       	cpi	r24, 0x0D	; 13
      d4:	39 f0       	breq	.+14     	; 0xe4 <vw_symbol_6to4+0x12>
      d6:	e7 eb       	ldi	r30, 0xB7	; 183
      d8:	f0 e0       	ldi	r31, 0x00	; 0
uint8_t vw_symbol_6to4(uint8_t symbol)
{
    uint8_t i;
    
    // Linear search :-( Could have a 64 byte reverse lookup table?
    for (i = 0; i < 16; i++)
      da:	91 e0       	ldi	r25, 0x01	; 1
	if (symbol == symbols[i]) return i;
      dc:	21 91       	ld	r18, Z+
      de:	28 13       	cpse	r18, r24
      e0:	04 c0       	rjmp	.+8      	; 0xea <vw_symbol_6to4+0x18>
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <vw_symbol_6to4+0x14>
uint8_t vw_symbol_6to4(uint8_t symbol)
{
    uint8_t i;
    
    // Linear search :-( Could have a 64 byte reverse lookup table?
    for (i = 0; i < 16; i++)
      e4:	90 e0       	ldi	r25, 0x00	; 0
	if (symbol == symbols[i]) return i;
      e6:	89 2f       	mov	r24, r25
      e8:	08 95       	ret
uint8_t vw_symbol_6to4(uint8_t symbol)
{
    uint8_t i;
    
    // Linear search :-( Could have a 64 byte reverse lookup table?
    for (i = 0; i < 16; i++)
      ea:	9f 5f       	subi	r25, 0xFF	; 255
      ec:	90 31       	cpi	r25, 0x10	; 16
      ee:	b1 f7       	brne	.-20     	; 0xdc <vw_symbol_6to4+0xa>
	if (symbol == symbols[i]) return i;
    return 0; // Not found
      f0:	80 e0       	ldi	r24, 0x00	; 0
}
      f2:	08 95       	ret

000000f4 <vw_set_tx_pin>:

// Set the output pin number for transmitter data
void vw_set_tx_pin(uint8_t pin)
{
    vw_tx_pin = pin;
      f4:	80 93 60 00 	sts	0x0060, r24
      f8:	08 95       	ret

000000fa <vw_pll>:
// Called 8 times per bit period
// Phase locked loop tries to synchronise with the transmitter so that bit 
// transitions occur at about the time vw_rx_pll_ramp is 0;
// Then the average is computed over each bit period to deduce the bit value
void vw_pll()
{
      fa:	0f 93       	push	r16
      fc:	1f 93       	push	r17
      fe:	cf 93       	push	r28
    // Integrate each sample
    if (vw_rx_sample)
     100:	80 91 1f 01 	lds	r24, 0x011F
     104:	88 23       	and	r24, r24
     106:	29 f0       	breq	.+10     	; 0x112 <vw_pll+0x18>
	vw_rx_integrator++;
     108:	90 91 1c 01 	lds	r25, 0x011C
     10c:	9f 5f       	subi	r25, 0xFF	; 255
     10e:	90 93 1c 01 	sts	0x011C, r25

    if (vw_rx_sample != vw_rx_last_sample)
     112:	90 91 1e 01 	lds	r25, 0x011E
     116:	89 17       	cp	r24, r25
     118:	69 f0       	breq	.+26     	; 0x134 <vw_pll+0x3a>
    {
	// Transition, advance if ramp > 80, retard if < 80
	vw_rx_pll_ramp += ((vw_rx_pll_ramp < VW_RAMP_TRANSITION) 
     11a:	90 91 1d 01 	lds	r25, 0x011D
			   ? VW_RAMP_INC_RETARD 
			   : VW_RAMP_INC_ADVANCE);
     11e:	90 35       	cpi	r25, 0x50	; 80
     120:	10 f0       	brcs	.+4      	; 0x126 <vw_pll+0x2c>
     122:	2d e1       	ldi	r18, 0x1D	; 29
     124:	01 c0       	rjmp	.+2      	; 0x128 <vw_pll+0x2e>
     126:	2b e0       	ldi	r18, 0x0B	; 11
     128:	92 0f       	add	r25, r18
     12a:	90 93 1d 01 	sts	0x011D, r25
	vw_rx_last_sample = vw_rx_sample;
     12e:	80 93 1e 01 	sts	0x011E, r24
     132:	05 c0       	rjmp	.+10     	; 0x13e <vw_pll+0x44>
    }
    else
    {
	// No transition
	// Advance ramp by standard 20 (== 160/8 samples)
	vw_rx_pll_ramp += VW_RAMP_INC;
     134:	80 91 1d 01 	lds	r24, 0x011D
     138:	8c 5e       	subi	r24, 0xEC	; 236
     13a:	80 93 1d 01 	sts	0x011D, r24
    }
    if (vw_rx_pll_ramp >= VW_RX_RAMP_LEN)
     13e:	80 91 1d 01 	lds	r24, 0x011D
     142:	80 3a       	cpi	r24, 0xA0	; 160
     144:	08 f4       	brcc	.+2      	; 0x148 <vw_pll+0x4e>
     146:	7c c0       	rjmp	.+248    	; 0x240 <vw_pll+0x146>
    {
	// Add this to the 12th bit of vw_rx_bits, LSB first
	// The last 12 bits are kept
	vw_rx_bits >>= 1;
     148:	20 91 17 01 	lds	r18, 0x0117
     14c:	30 91 18 01 	lds	r19, 0x0118
     150:	36 95       	lsr	r19
     152:	27 95       	ror	r18
     154:	30 93 18 01 	sts	0x0118, r19
     158:	20 93 17 01 	sts	0x0117, r18

	// Check the integrator to see how many samples in this cycle were high.
	// If < 5 out of 8, then its declared a 0 bit, else a 1;
	if (vw_rx_integrator >= 5)
     15c:	90 91 1c 01 	lds	r25, 0x011C
     160:	95 30       	cpi	r25, 0x05	; 5
     162:	28 f0       	brcs	.+10     	; 0x16e <vw_pll+0x74>
	    vw_rx_bits |= 0x800;
     164:	38 60       	ori	r19, 0x08	; 8
     166:	30 93 18 01 	sts	0x0118, r19
     16a:	20 93 17 01 	sts	0x0117, r18

	vw_rx_pll_ramp -= VW_RX_RAMP_LEN;
     16e:	80 5a       	subi	r24, 0xA0	; 160
     170:	80 93 1d 01 	sts	0x011D, r24
	vw_rx_integrator = 0; // Clear the integral for the next cycle
     174:	10 92 1c 01 	sts	0x011C, r1

	if (vw_rx_active)
     178:	80 91 1b 01 	lds	r24, 0x011B
     17c:	88 23       	and	r24, r24
     17e:	09 f4       	brne	.+2      	; 0x182 <vw_pll+0x88>
     180:	4f c0       	rjmp	.+158    	; 0x220 <vw_pll+0x126>
	{
	    // We have the start symbol and now we are collecting message bits,
	    // 6 per symbol, each which has to be decoded to 4 bits
	    if (++vw_rx_bit_count >= 12)
     182:	80 91 16 01 	lds	r24, 0x0116
     186:	8f 5f       	subi	r24, 0xFF	; 255
     188:	80 93 16 01 	sts	0x0116, r24
     18c:	8c 30       	cpi	r24, 0x0C	; 12
     18e:	08 f4       	brcc	.+2      	; 0x192 <vw_pll+0x98>
     190:	57 c0       	rjmp	.+174    	; 0x240 <vw_pll+0x146>
	    {
		// Have 12 bits of encoded message == 1 byte encoded
		// Decode as 2 lots of 6 bits into 2 lots of 4 bits
		// The 6 lsbits are the high nybble
		uint8_t this_byte = 
		    (vw_symbol_6to4(vw_rx_bits & 0x3f)) << 4 
     192:	00 91 17 01 	lds	r16, 0x0117
     196:	10 91 18 01 	lds	r17, 0x0118
     19a:	80 2f       	mov	r24, r16
     19c:	8f 73       	andi	r24, 0x3F	; 63
     19e:	99 df       	rcall	.-206    	; 0xd2 <vw_symbol_6to4>
     1a0:	c8 2f       	mov	r28, r24
		    | vw_symbol_6to4(vw_rx_bits >> 6);
     1a2:	c8 01       	movw	r24, r16
     1a4:	00 24       	eor	r0, r0
     1a6:	88 0f       	add	r24, r24
     1a8:	99 1f       	adc	r25, r25
     1aa:	00 1c       	adc	r0, r0
     1ac:	88 0f       	add	r24, r24
     1ae:	99 1f       	adc	r25, r25
     1b0:	00 1c       	adc	r0, r0
     1b2:	89 2f       	mov	r24, r25
     1b4:	90 2d       	mov	r25, r0
     1b6:	8d df       	rcall	.-230    	; 0xd2 <vw_symbol_6to4>
	    {
		// Have 12 bits of encoded message == 1 byte encoded
		// Decode as 2 lots of 6 bits into 2 lots of 4 bits
		// The 6 lsbits are the high nybble
		uint8_t this_byte = 
		    (vw_symbol_6to4(vw_rx_bits & 0x3f)) << 4 
     1b8:	90 e1       	ldi	r25, 0x10	; 16
     1ba:	c9 9f       	mul	r28, r25
     1bc:	90 01       	movw	r18, r0
     1be:	11 24       	eor	r1, r1
		    | vw_symbol_6to4(vw_rx_bits >> 6);
     1c0:	82 2b       	or	r24, r18

		// The first decoded byte is the byte count of the following message
		// the count includes the byte count and the 2 trailing FCS bytes
		// REVISIT: may also include the ACK flag at 0x40
		if (vw_rx_len == 0)
     1c2:	90 91 f6 00 	lds	r25, 0x00F6
     1c6:	91 11       	cpse	r25, r1
     1c8:	0e c0       	rjmp	.+28     	; 0x1e6 <vw_pll+0xec>
		{
		    // The first byte is the byte count
		    // Check it for sensibility. It cant be less than 4, since it
		    // includes the bytes count itself and the 2 byte FCS
		    vw_rx_count = this_byte;
     1ca:	80 93 f7 00 	sts	0x00F7, r24
		    if (vw_rx_count < 4 || vw_rx_count > VW_MAX_MESSAGE_LEN)
     1ce:	9c ef       	ldi	r25, 0xFC	; 252
     1d0:	98 0f       	add	r25, r24
     1d2:	9b 31       	cpi	r25, 0x1B	; 27
     1d4:	40 f0       	brcs	.+16     	; 0x1e6 <vw_pll+0xec>
		    {
			// Stupid message length, drop the whole thing
			vw_rx_active = false;
     1d6:	10 92 1b 01 	sts	0x011B, r1
			vw_rx_bad++;
     1da:	80 91 f5 00 	lds	r24, 0x00F5
     1de:	8f 5f       	subi	r24, 0xFF	; 255
     1e0:	80 93 f5 00 	sts	0x00F5, r24
                        return;
     1e4:	2d c0       	rjmp	.+90     	; 0x240 <vw_pll+0x146>
		    }
		}
		vw_rx_buf[vw_rx_len++] = this_byte;
     1e6:	e0 91 f6 00 	lds	r30, 0x00F6
     1ea:	91 e0       	ldi	r25, 0x01	; 1
     1ec:	9e 0f       	add	r25, r30
     1ee:	90 93 f6 00 	sts	0x00F6, r25
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	e8 50       	subi	r30, 0x08	; 8
     1f6:	ff 4f       	sbci	r31, 0xFF	; 255
     1f8:	80 83       	st	Z, r24

		if (vw_rx_len >= vw_rx_count)
     1fa:	90 91 f6 00 	lds	r25, 0x00F6
     1fe:	80 91 f7 00 	lds	r24, 0x00F7
     202:	98 17       	cp	r25, r24
     204:	50 f0       	brcs	.+20     	; 0x21a <vw_pll+0x120>
		{
		    // Got all the bytes now
		    vw_rx_active = false;
     206:	10 92 1b 01 	sts	0x011B, r1
		    vw_rx_good++;
     20a:	80 91 f4 00 	lds	r24, 0x00F4
     20e:	8f 5f       	subi	r24, 0xFF	; 255
     210:	80 93 f4 00 	sts	0x00F4, r24
		    vw_rx_done = true; // Better come get it before the next one starts
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	80 93 1a 01 	sts	0x011A, r24
		}
		vw_rx_bit_count = 0;
     21a:	10 92 16 01 	sts	0x0116, r1
     21e:	10 c0       	rjmp	.+32     	; 0x240 <vw_pll+0x146>
	    }
	}
	// Not in a message, see if we have a start symbol
	else if (vw_rx_bits == 0xb38)
     220:	80 91 17 01 	lds	r24, 0x0117
     224:	90 91 18 01 	lds	r25, 0x0118
     228:	88 33       	cpi	r24, 0x38	; 56
     22a:	9b 40       	sbci	r25, 0x0B	; 11
     22c:	49 f4       	brne	.+18     	; 0x240 <vw_pll+0x146>
	{
	    // Have start symbol, start collecting message
	    vw_rx_active = true;
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	80 93 1b 01 	sts	0x011B, r24
	    vw_rx_bit_count = 0;
     234:	10 92 16 01 	sts	0x0116, r1
	    vw_rx_len = 0;
     238:	10 92 f6 00 	sts	0x00F6, r1
	    vw_rx_done = false; // Too bad if you missed the last message
     23c:	10 92 1a 01 	sts	0x011A, r1
	}
    }
}
     240:	cf 91       	pop	r28
     242:	1f 91       	pop	r17
     244:	0f 91       	pop	r16
     246:	08 95       	ret

00000248 <vw_setup>:
	digitalWrite(vw_ptt_pin, vw_ptt_inverted);
}	

#elif defined (ARDUINO) // Arduino specific
void vw_setup(uint16_t speed)
{
     248:	4f 92       	push	r4
     24a:	5f 92       	push	r5
     24c:	6f 92       	push	r6
     24e:	7f 92       	push	r7
     250:	8f 92       	push	r8
     252:	9f 92       	push	r9
     254:	af 92       	push	r10
     256:	bf 92       	push	r11
     258:	ef 92       	push	r14
     25a:	ff 92       	push	r15
     25c:	1f 93       	push	r17
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	cd b7       	in	r28, 0x3d	; 61
     264:	de b7       	in	r29, 0x3e	; 62
     266:	2e 97       	sbiw	r28, 0x0e	; 14
     268:	0f b6       	in	r0, 0x3f	; 63
     26a:	f8 94       	cli
     26c:	de bf       	out	0x3e, r29	; 62
     26e:	0f be       	out	0x3f, r0	; 63
     270:	cd bf       	out	0x3d, r28	; 61
// and sets nticks to compare-match value if lower than max_ticks
// returns 0 & nticks = 0 on fault
static uint8_t _timer_calc(uint16_t speed, uint16_t max_ticks, uint16_t *nticks)
{
    // Clock divider (prescaler) values - 0/3333: error flag
    uint16_t prescalers[] = {0, 1, 8, 64, 256, 1024, 3333};
     272:	2e e0       	ldi	r18, 0x0E	; 14
     274:	e8 ea       	ldi	r30, 0xA8	; 168
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	de 01       	movw	r26, r28
     27a:	11 96       	adiw	r26, 0x01	; 1
     27c:	01 90       	ld	r0, Z+
     27e:	0d 92       	st	X+, r0
     280:	2a 95       	dec	r18
     282:	e1 f7       	brne	.-8      	; 0x27c <vw_setup+0x34>
    uint8_t prescaler=0; // index into array & return bit value
    unsigned long ulticks; // calculate by ntick overflow

    // Div-by-zero protection
    if (speed == 0)
     284:	00 97       	sbiw	r24, 0x00	; 0
     286:	09 f4       	brne	.+2      	; 0x28a <vw_setup+0x42>
     288:	70 c0       	rjmp	.+224    	; 0x36a <vw_setup+0x122>
    for (prescaler=1; prescaler < 7; prescaler += 1)
    {
        // Amount of time per CPU clock tick (in seconds)
        float clock_time = (1.0 / (float(F_CPU) / float(prescalers[prescaler])));
        // Fraction of second needed to xmit one bit
        float bit_time = ((1.0 / float(speed)) / 8.0);
     28a:	bc 01       	movw	r22, r24
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	76 d7       	rcall	.+3820   	; 0x117e <__floatunsisf>
     292:	9b 01       	movw	r18, r22
     294:	ac 01       	movw	r20, r24
     296:	60 e0       	ldi	r22, 0x00	; 0
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	80 e8       	ldi	r24, 0x80	; 128
     29c:	9f e3       	ldi	r25, 0x3F	; 63
     29e:	d6 d6       	rcall	.+3500   	; 0x104c <__divsf3>
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	40 e0       	ldi	r20, 0x00	; 0
     2a6:	5e e3       	ldi	r21, 0x3E	; 62
     2a8:	f8 d7       	rcall	.+4080   	; 0x129a <__mulsf3>
     2aa:	4b 01       	movw	r8, r22
     2ac:	5c 01       	movw	r10, r24
     2ae:	7e 01       	movw	r14, r28
     2b0:	23 e0       	ldi	r18, 0x03	; 3
     2b2:	e2 0e       	add	r14, r18
     2b4:	f1 1c       	adc	r15, r1
     2b6:	11 e0       	ldi	r17, 0x01	; 1

    // test increasing prescaler (divisor), decreasing ulticks until no overflow
    for (prescaler=1; prescaler < 7; prescaler += 1)
    {
        // Amount of time per CPU clock tick (in seconds)
        float clock_time = (1.0 / (float(F_CPU) / float(prescalers[prescaler])));
     2b8:	f7 01       	movw	r30, r14
     2ba:	81 91       	ld	r24, Z+
     2bc:	91 91       	ld	r25, Z+
     2be:	7f 01       	movw	r14, r30
     2c0:	bc 01       	movw	r22, r24
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	5b d7       	rcall	.+3766   	; 0x117e <__floatunsisf>
     2c8:	9b 01       	movw	r18, r22
     2ca:	ac 01       	movw	r20, r24
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	74 e2       	ldi	r23, 0x24	; 36
     2d0:	84 e7       	ldi	r24, 0x74	; 116
     2d2:	9b e4       	ldi	r25, 0x4B	; 75
     2d4:	bb d6       	rcall	.+3446   	; 0x104c <__divsf3>
     2d6:	9b 01       	movw	r18, r22
     2d8:	ac 01       	movw	r20, r24
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	80 e8       	ldi	r24, 0x80	; 128
     2e0:	9f e3       	ldi	r25, 0x3F	; 63
     2e2:	b4 d6       	rcall	.+3432   	; 0x104c <__divsf3>
     2e4:	9b 01       	movw	r18, r22
     2e6:	ac 01       	movw	r20, r24
        // Fraction of second needed to xmit one bit
        float bit_time = ((1.0 / float(speed)) / 8.0);
        // number of prescaled ticks needed to handle bit time @ speed
        ulticks = long(bit_time / clock_time);
     2e8:	c5 01       	movw	r24, r10
     2ea:	b4 01       	movw	r22, r8
     2ec:	af d6       	rcall	.+3422   	; 0x104c <__divsf3>
     2ee:	16 d7       	rcall	.+3628   	; 0x111c <__fixsfsi>
        // Test if ulticks fits in nticks bitwidth (with 1-tick safety margin)
        if ((ulticks > 1) && (ulticks < max_ticks))
     2f0:	2b 01       	movw	r4, r22
     2f2:	3c 01       	movw	r6, r24
     2f4:	f2 e0       	ldi	r31, 0x02	; 2
     2f6:	4f 1a       	sub	r4, r31
     2f8:	51 08       	sbc	r5, r1
     2fa:	61 08       	sbc	r6, r1
     2fc:	71 08       	sbc	r7, r1
     2fe:	2d ef       	ldi	r18, 0xFD	; 253
     300:	42 16       	cp	r4, r18
     302:	2f ef       	ldi	r18, 0xFF	; 255
     304:	52 06       	cpc	r5, r18
     306:	61 04       	cpc	r6, r1
     308:	71 04       	cpc	r7, r1
     30a:	68 f1       	brcs	.+90     	; 0x366 <vw_setup+0x11e>
        *nticks = 0;
        return 0;
    }

    // test increasing prescaler (divisor), decreasing ulticks until no overflow
    for (prescaler=1; prescaler < 7; prescaler += 1)
     30c:	1f 5f       	subi	r17, 0xFF	; 255
     30e:	17 30       	cpi	r17, 0x07	; 7
     310:	99 f6       	brne	.-90     	; 0x2b8 <vw_setup+0x70>
        }
        // Won't fit, check with next prescaler value
    }

    // Check for error
    if ((prescaler == 6) || (ulticks < 2) || (ulticks > max_ticks))
     312:	62 30       	cpi	r22, 0x02	; 2
     314:	71 05       	cpc	r23, r1
     316:	81 05       	cpc	r24, r1
     318:	91 05       	cpc	r25, r1
     31a:	38 f1       	brcs	.+78     	; 0x36a <vw_setup+0x122>
     31c:	61 15       	cp	r22, r1
     31e:	71 05       	cpc	r23, r1
     320:	e1 e0       	ldi	r30, 0x01	; 1
     322:	8e 07       	cpc	r24, r30
     324:	91 05       	cpc	r25, r1
     326:	08 f5       	brcc	.+66     	; 0x36a <vw_setup+0x122>

#else // ARDUINO
    // This is the path for most Arduinos
    // figure out prescaler value and counter match value
    prescaler = _timer_calc(speed, (uint16_t)-1, &nticks);
    if (!prescaler)
     328:	11 23       	and	r17, r17
     32a:	f9 f0       	breq	.+62     	; 0x36a <vw_setup+0x122>
    {
        return; // fault
    }

    TCCR1A = 0; // Output Compare pins disconnected
     32c:	1f bc       	out	0x2f, r1	; 47
    TCCR1B = _BV(WGM12); // Turn on CTC mode
     32e:	28 e0       	ldi	r18, 0x08	; 8
     330:	2e bd       	out	0x2e, r18	; 46

    // convert prescaler index to TCCRnB prescaler bits CS10, CS11, CS12
    TCCR1B |= prescaler;
     332:	2e b5       	in	r18, 0x2e	; 46
     334:	12 2b       	or	r17, r18
     336:	1e bd       	out	0x2e, r17	; 46

    // Caution: special procedures for setting 16 bit regs
    // is handled by the compiler
    OCR1A = nticks;
     338:	7b bd       	out	0x2b, r23	; 43
     33a:	6a bd       	out	0x2a, r22	; 42
#ifdef TIMSK1
    // atmega168
    TIMSK1 |= _BV(OCIE1A);
#else
    // others
    TIMSK |= _BV(OCIE1A);
     33c:	89 b7       	in	r24, 0x39	; 57
     33e:	80 61       	ori	r24, 0x10	; 16
     340:	89 bf       	out	0x39, r24	; 57
#endif // TIMSK1

#endif // __AVR_ATtiny85__

    // Set up digital IO pins
    pinMode(vw_tx_pin, OUTPUT);
     342:	61 e0       	ldi	r22, 0x01	; 1
     344:	80 91 60 00 	lds	r24, 0x0060
     348:	ea d5       	rcall	.+3028   	; 0xf1e <pinMode>
    pinMode(vw_rx_pin, INPUT);
     34a:	60 e0       	ldi	r22, 0x00	; 0
     34c:	80 91 61 00 	lds	r24, 0x0061
     350:	e6 d5       	rcall	.+3020   	; 0xf1e <pinMode>
    pinMode(vw_ptt_pin, OUTPUT);
     352:	61 e0       	ldi	r22, 0x01	; 1
     354:	80 91 62 00 	lds	r24, 0x0062
     358:	e2 d5       	rcall	.+3012   	; 0xf1e <pinMode>
    digitalWrite(vw_ptt_pin, vw_ptt_inverted);
     35a:	60 91 20 01 	lds	r22, 0x0120
     35e:	80 91 62 00 	lds	r24, 0x0062
     362:	1c d6       	rcall	.+3128   	; 0xf9c <digitalWrite>
     364:	02 c0       	rjmp	.+4      	; 0x36a <vw_setup+0x122>
        }
        // Won't fit, check with next prescaler value
    }

    // Check for error
    if ((prescaler == 6) || (ulticks < 2) || (ulticks > max_ticks))
     366:	16 30       	cpi	r17, 0x06	; 6
     368:	c9 f6       	brne	.-78     	; 0x31c <vw_setup+0xd4>
    // Set up digital IO pins
    pinMode(vw_tx_pin, OUTPUT);
    pinMode(vw_rx_pin, INPUT);
    pinMode(vw_ptt_pin, OUTPUT);
    digitalWrite(vw_ptt_pin, vw_ptt_inverted);
}
     36a:	2e 96       	adiw	r28, 0x0e	; 14
     36c:	0f b6       	in	r0, 0x3f	; 63
     36e:	f8 94       	cli
     370:	de bf       	out	0x3e, r29	; 62
     372:	0f be       	out	0x3f, r0	; 63
     374:	cd bf       	out	0x3d, r28	; 61
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	1f 91       	pop	r17
     37c:	ff 90       	pop	r15
     37e:	ef 90       	pop	r14
     380:	bf 90       	pop	r11
     382:	af 90       	pop	r10
     384:	9f 90       	pop	r9
     386:	8f 90       	pop	r8
     388:	7f 90       	pop	r7
     38a:	6f 90       	pop	r6
     38c:	5f 90       	pop	r5
     38e:	4f 90       	pop	r4
     390:	08 95       	ret

00000392 <vw_tx_start>:
#endif // ARDUINO

// Start the transmitter, call when the tx buffer is ready to go and vw_tx_len is
// set to the total number of symbols to send
void vw_tx_start()
{
     392:	cf 93       	push	r28
    vw_tx_index = 0;
     394:	10 92 26 01 	sts	0x0126, r1
    vw_tx_bit = 0;
     398:	10 92 25 01 	sts	0x0125, r1
    vw_tx_sample = 0;
     39c:	10 92 24 01 	sts	0x0124, r1

    // Enable the transmitter hardware
    digitalWrite(vw_ptt_pin, true ^ vw_ptt_inverted);
     3a0:	60 91 20 01 	lds	r22, 0x0120
     3a4:	c1 e0       	ldi	r28, 0x01	; 1
     3a6:	6c 27       	eor	r22, r28
     3a8:	80 91 62 00 	lds	r24, 0x0062
     3ac:	f7 d5       	rcall	.+3054   	; 0xf9c <digitalWrite>

    // Next tick interrupt will send the first bit
    vw_tx_enabled = true;
     3ae:	c0 93 23 01 	sts	0x0123, r28
}
     3b2:	cf 91       	pop	r28
     3b4:	08 95       	ret

000003b6 <vw_tx_stop>:

// Stop the transmitter, call when all bits are sent
void vw_tx_stop()
{
    // Disable the transmitter hardware
    digitalWrite(vw_ptt_pin, false ^ vw_ptt_inverted);
     3b6:	60 91 20 01 	lds	r22, 0x0120
     3ba:	80 91 62 00 	lds	r24, 0x0062
     3be:	ee d5       	rcall	.+3036   	; 0xf9c <digitalWrite>
    digitalWrite(vw_tx_pin, false);
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	80 91 60 00 	lds	r24, 0x0060
     3c6:	ea d5       	rcall	.+3028   	; 0xf9c <digitalWrite>

    // No more ticks for the transmitter
    vw_tx_enabled = false;
     3c8:	10 92 23 01 	sts	0x0123, r1
     3cc:	08 95       	ret

000003ce <vw_wait_tx>:

// Wait for the transmitter to become available
// Busy-wait loop until the ISR says the message has been sent
void vw_wait_tx()
{
    while (vw_tx_enabled)
     3ce:	80 91 23 01 	lds	r24, 0x0123
     3d2:	81 11       	cpse	r24, r1
     3d4:	fc cf       	rjmp	.-8      	; 0x3ce <vw_wait_tx>
	;
}
     3d6:	08 95       	ret

000003d8 <vw_send>:
// Wait until transmitter is available and encode and queue the message
// into vw_tx_buf
// The message is raw bytes, with no packet structure imposed
// It is transmitted preceded a byte count and followed by 2 FCS bytes
uint8_t vw_send(uint8_t* buf, uint8_t len)
{
     3d8:	ef 92       	push	r14
     3da:	ff 92       	push	r15
     3dc:	1f 93       	push	r17
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
    uint8_t index = 0;
    uint16_t crc = 0xffff;
    uint8_t *p = vw_tx_buf + VW_HEADER_LEN; // start of the message area
    uint8_t count = len + 3; // Added byte count and FCS to get total number of bytes

    if (len > VW_MAX_PAYLOAD)
     3e2:	6c 31       	cpi	r22, 0x1C	; 28
     3e4:	08 f0       	brcs	.+2      	; 0x3e8 <vw_send+0x10>
     3e6:	b5 c0       	rjmp	.+362    	; 0x552 <__stack+0xf3>
     3e8:	16 2f       	mov	r17, r22
     3ea:	7c 01       	movw	r14, r24
{
    uint8_t i;
    uint8_t index = 0;
    uint16_t crc = 0xffff;
    uint8_t *p = vw_tx_buf + VW_HEADER_LEN; // start of the message area
    uint8_t count = len + 3; // Added byte count and FCS to get total number of bytes
     3ec:	c3 e0       	ldi	r28, 0x03	; 3
     3ee:	c6 0f       	add	r28, r22

    if (len > VW_MAX_PAYLOAD)
	return false;

    // Wait for transmitter to become available
    vw_wait_tx();
     3f0:	ee df       	rcall	.-36     	; 0x3ce <vw_wait_tx>
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
     3f2:	2f ef       	ldi	r18, 0xFF	; 255
     3f4:	3f ef       	ldi	r19, 0xFF	; 255
     3f6:	2c 27       	eor	r18, r28
     3f8:	02 2e       	mov	r0, r18
     3fa:	22 95       	swap	r18
     3fc:	20 7f       	andi	r18, 0xF0	; 240
     3fe:	20 25       	eor	r18, r0
     400:	03 2e       	mov	r0, r19
     402:	32 2f       	mov	r19, r18
     404:	22 95       	swap	r18
     406:	2f 70       	andi	r18, 0x0F	; 15
     408:	02 26       	eor	r0, r18
     40a:	26 95       	lsr	r18
     40c:	32 27       	eor	r19, r18
     40e:	23 27       	eor	r18, r19
     410:	22 0f       	add	r18, r18
     412:	22 0f       	add	r18, r18
     414:	22 0f       	add	r18, r18
     416:	20 25       	eor	r18, r0

    // Encode the message length
    crc = _crc_ccitt_update(crc, count);
    p[index++] = symbols[count >> 4];
     418:	a3 e6       	ldi	r26, 0x63	; 99
     41a:	b0 e0       	ldi	r27, 0x00	; 0
     41c:	ec 2f       	mov	r30, r28
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	f5 95       	asr	r31
     422:	e7 95       	ror	r30
     424:	f5 95       	asr	r31
     426:	e7 95       	ror	r30
     428:	f5 95       	asr	r31
     42a:	e7 95       	ror	r30
     42c:	f5 95       	asr	r31
     42e:	e7 95       	ror	r30
     430:	ea 54       	subi	r30, 0x4A	; 74
     432:	ff 4f       	sbci	r31, 0xFF	; 255
     434:	80 81       	ld	r24, Z
     436:	18 96       	adiw	r26, 0x08	; 8
     438:	8c 93       	st	X, r24
     43a:	18 97       	sbiw	r26, 0x08	; 8
    p[index++] = symbols[count & 0xf];
     43c:	cf 70       	andi	r28, 0x0F	; 15
     43e:	ec 2f       	mov	r30, r28
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	ea 54       	subi	r30, 0x4A	; 74
     444:	ff 4f       	sbci	r31, 0xFF	; 255
     446:	80 81       	ld	r24, Z
     448:	19 96       	adiw	r26, 0x09	; 9
     44a:	8c 93       	st	X, r24

    // Encode the message into 6 bit symbols. Each byte is converted into 
    // 2 6-bit symbols, high nybble first, low nybble second
    for (i = 0; i < len; i++)
     44c:	11 23       	and	r17, r17
     44e:	09 f4       	brne	.+2      	; 0x452 <vw_send+0x7a>
     450:	3e c0       	rjmp	.+124    	; 0x4ce <__stack+0x6f>
     452:	e7 01       	movw	r28, r14
     454:	ae e6       	ldi	r26, 0x6E	; 110
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	8f ef       	ldi	r24, 0xFF	; 255
     45a:	81 0f       	add	r24, r17
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	01 96       	adiw	r24, 0x01	; 1
     460:	8e 0d       	add	r24, r14
     462:	9f 1d       	adc	r25, r15
     464:	ae 01       	movw	r20, r28
    {
	crc = _crc_ccitt_update(crc, buf[i]);
     466:	e9 91       	ld	r30, Y+
     468:	2e 27       	eor	r18, r30
     46a:	02 2e       	mov	r0, r18
     46c:	22 95       	swap	r18
     46e:	20 7f       	andi	r18, 0xF0	; 240
     470:	20 25       	eor	r18, r0
     472:	03 2e       	mov	r0, r19
     474:	32 2f       	mov	r19, r18
     476:	22 95       	swap	r18
     478:	2f 70       	andi	r18, 0x0F	; 15
     47a:	02 26       	eor	r0, r18
     47c:	26 95       	lsr	r18
     47e:	32 27       	eor	r19, r18
     480:	23 27       	eor	r18, r19
     482:	22 0f       	add	r18, r18
     484:	22 0f       	add	r18, r18
     486:	22 0f       	add	r18, r18
     488:	20 25       	eor	r18, r0
     48a:	bd 01       	movw	r22, r26
     48c:	61 50       	subi	r22, 0x01	; 1
     48e:	71 09       	sbc	r23, r1
	p[index++] = symbols[buf[i] >> 4];
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	f5 95       	asr	r31
     494:	e7 95       	ror	r30
     496:	f5 95       	asr	r31
     498:	e7 95       	ror	r30
     49a:	f5 95       	asr	r31
     49c:	e7 95       	ror	r30
     49e:	f5 95       	asr	r31
     4a0:	e7 95       	ror	r30
     4a2:	ea 54       	subi	r30, 0x4A	; 74
     4a4:	ff 4f       	sbci	r31, 0xFF	; 255
     4a6:	f0 80       	ld	r15, Z
     4a8:	fb 01       	movw	r30, r22
     4aa:	f0 82       	st	Z, r15
	p[index++] = symbols[buf[i] & 0xf];
     4ac:	fa 01       	movw	r30, r20
     4ae:	40 81       	ld	r20, Z
     4b0:	e4 2f       	mov	r30, r20
     4b2:	ef 70       	andi	r30, 0x0F	; 15
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	ea 54       	subi	r30, 0x4A	; 74
     4b8:	ff 4f       	sbci	r31, 0xFF	; 255
     4ba:	40 81       	ld	r20, Z
     4bc:	4c 93       	st	X, r20
     4be:	12 96       	adiw	r26, 0x02	; 2
    p[index++] = symbols[count >> 4];
    p[index++] = symbols[count & 0xf];

    // Encode the message into 6 bit symbols. Each byte is converted into 
    // 2 6-bit symbols, high nybble first, low nybble second
    for (i = 0; i < len; i++)
     4c0:	c8 17       	cp	r28, r24
     4c2:	d9 07       	cpc	r29, r25
     4c4:	09 f0       	breq	.+2      	; 0x4c8 <__stack+0x69>
     4c6:	ce cf       	rjmp	.-100    	; 0x464 <__stack+0x5>
     4c8:	1f 5f       	subi	r17, 0xFF	; 255
     4ca:	11 0f       	add	r17, r17
     4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <__stack+0x71>
    vw_wait_tx();

    // Encode the message length
    crc = _crc_ccitt_update(crc, count);
    p[index++] = symbols[count >> 4];
    p[index++] = symbols[count & 0xf];
     4ce:	12 e0       	ldi	r17, 0x02	; 2
    }

    // Append the fcs, 16 bits before encoding (4 6-bit symbols after encoding)
    // Caution: VW expects the _ones_complement_ of the CCITT CRC-16 as the FCS
    // VW sends FCS as low byte then hi byte
    crc = ~crc;
     4d0:	f9 01       	movw	r30, r18
     4d2:	e0 95       	com	r30
     4d4:	f0 95       	com	r31
    p[index++] = symbols[(crc >> 4)  & 0xf];
     4d6:	c1 2f       	mov	r28, r17
     4d8:	d0 e0       	ldi	r29, 0x00	; 0
     4da:	c5 59       	subi	r28, 0x95	; 149
     4dc:	df 4f       	sbci	r29, 0xFF	; 255
     4de:	df 01       	movw	r26, r30
     4e0:	b2 95       	swap	r27
     4e2:	a2 95       	swap	r26
     4e4:	af 70       	andi	r26, 0x0F	; 15
     4e6:	ab 27       	eor	r26, r27
     4e8:	bf 70       	andi	r27, 0x0F	; 15
     4ea:	ab 27       	eor	r26, r27
     4ec:	af 70       	andi	r26, 0x0F	; 15
     4ee:	bb 27       	eor	r27, r27
     4f0:	aa 54       	subi	r26, 0x4A	; 74
     4f2:	bf 4f       	sbci	r27, 0xFF	; 255
     4f4:	8c 91       	ld	r24, X
     4f6:	88 83       	st	Y, r24
     4f8:	a1 e0       	ldi	r26, 0x01	; 1
     4fa:	a1 0f       	add	r26, r17
    p[index++] = symbols[crc & 0xf];
     4fc:	b0 e0       	ldi	r27, 0x00	; 0
     4fe:	a5 59       	subi	r26, 0x95	; 149
     500:	bf 4f       	sbci	r27, 0xFF	; 255
     502:	ef 01       	movw	r28, r30
     504:	cf 70       	andi	r28, 0x0F	; 15
     506:	dd 27       	eor	r29, r29
     508:	ca 54       	subi	r28, 0x4A	; 74
     50a:	df 4f       	sbci	r29, 0xFF	; 255
     50c:	88 81       	ld	r24, Y
     50e:	8c 93       	st	X, r24
     510:	a2 e0       	ldi	r26, 0x02	; 2
     512:	a1 0f       	add	r26, r17
    p[index++] = symbols[(crc >> 12) & 0xf];
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	a5 59       	subi	r26, 0x95	; 149
     518:	bf 4f       	sbci	r27, 0xFF	; 255
     51a:	ef 01       	movw	r28, r30
     51c:	cd 2f       	mov	r28, r29
     51e:	dd 27       	eor	r29, r29
     520:	c2 95       	swap	r28
     522:	cf 70       	andi	r28, 0x0F	; 15
     524:	ca 54       	subi	r28, 0x4A	; 74
     526:	df 4f       	sbci	r29, 0xFF	; 255
     528:	88 81       	ld	r24, Y
     52a:	8c 93       	st	X, r24
     52c:	a3 e0       	ldi	r26, 0x03	; 3
     52e:	a1 0f       	add	r26, r17
    p[index++] = symbols[(crc >> 8)  & 0xf];
     530:	b0 e0       	ldi	r27, 0x00	; 0
     532:	a5 59       	subi	r26, 0x95	; 149
     534:	bf 4f       	sbci	r27, 0xFF	; 255
     536:	ef 2f       	mov	r30, r31
     538:	ff 27       	eor	r31, r31
     53a:	ef 70       	andi	r30, 0x0F	; 15
     53c:	ff 27       	eor	r31, r31
     53e:	ea 54       	subi	r30, 0x4A	; 74
     540:	ff 4f       	sbci	r31, 0xFF	; 255
     542:	80 81       	ld	r24, Z
     544:	8c 93       	st	X, r24

    // Total number of 6-bit symbols to send
    vw_tx_len = index + VW_HEADER_LEN;
     546:	14 5f       	subi	r17, 0xF4	; 244
     548:	10 93 27 01 	sts	0x0127, r17

    // Start the low level interrupt handler sending symbols
    vw_tx_start();
     54c:	22 df       	rcall	.-444    	; 0x392 <vw_tx_start>

    return true;
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	01 c0       	rjmp	.+2      	; 0x554 <__stack+0xf5>
    uint16_t crc = 0xffff;
    uint8_t *p = vw_tx_buf + VW_HEADER_LEN; // start of the message area
    uint8_t count = len + 3; // Added byte count and FCS to get total number of bytes

    if (len > VW_MAX_PAYLOAD)
	return false;
     552:	80 e0       	ldi	r24, 0x00	; 0

    // Start the low level interrupt handler sending symbols
    vw_tx_start();

    return true;
}
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	1f 91       	pop	r17
     55a:	ff 90       	pop	r15
     55c:	ef 90       	pop	r14
     55e:	08 95       	ret

00000560 <__vector_6>:
#else // Assume Arduino Uno (328p or similar)

SIGNAL(TIMER1_COMPA_vect)
#endif // __AVR_ATtiny85__

{
     560:	1f 92       	push	r1
     562:	0f 92       	push	r0
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	0f 92       	push	r0
     568:	11 24       	eor	r1, r1
     56a:	2f 93       	push	r18
     56c:	3f 93       	push	r19
     56e:	4f 93       	push	r20
     570:	5f 93       	push	r21
     572:	6f 93       	push	r22
     574:	7f 93       	push	r23
     576:	8f 93       	push	r24
     578:	9f 93       	push	r25
     57a:	af 93       	push	r26
     57c:	bf 93       	push	r27
     57e:	ef 93       	push	r30
     580:	ff 93       	push	r31
    if (vw_rx_enabled && !vw_tx_enabled)
     582:	80 91 19 01 	lds	r24, 0x0119
     586:	88 23       	and	r24, r24
     588:	29 f0       	breq	.+10     	; 0x594 <__vector_6+0x34>
     58a:	80 91 23 01 	lds	r24, 0x0123
     58e:	88 23       	and	r24, r24
     590:	09 f4       	brne	.+2      	; 0x594 <__vector_6+0x34>
     592:	4c c0       	rjmp	.+152    	; 0x62c <__vector_6+0xcc>
	vw_rx_sample = digitalRead(vw_rx_pin);
    
    // Do transmitter stuff first to reduce transmitter bit jitter due 
    // to variable receiver processing
    if (vw_tx_enabled && vw_tx_sample++ == 0)
     594:	80 91 23 01 	lds	r24, 0x0123
     598:	88 23       	and	r24, r24
     59a:	c9 f1       	breq	.+114    	; 0x60e <__vector_6+0xae>
     59c:	80 91 24 01 	lds	r24, 0x0124
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	98 0f       	add	r25, r24
     5a4:	90 93 24 01 	sts	0x0124, r25
     5a8:	81 11       	cpse	r24, r1
     5aa:	31 c0       	rjmp	.+98     	; 0x60e <__vector_6+0xae>
    {
	// Send next bit
	// Symbols are sent LSB first
	// Finished sending the whole message? (after waiting one bit period 
	// since the last bit)
	if (vw_tx_index >= vw_tx_len)
     5ac:	e0 91 26 01 	lds	r30, 0x0126
     5b0:	80 91 27 01 	lds	r24, 0x0127
     5b4:	e8 17       	cp	r30, r24
     5b6:	58 f0       	brcs	.+22     	; 0x5ce <__vector_6+0x6e>
	{
	    vw_tx_stop();
     5b8:	fe de       	rcall	.-516    	; 0x3b6 <vw_tx_stop>
	    vw_tx_msg_count++;
     5ba:	80 91 21 01 	lds	r24, 0x0121
     5be:	90 91 22 01 	lds	r25, 0x0122
     5c2:	01 96       	adiw	r24, 0x01	; 1
     5c4:	90 93 22 01 	sts	0x0122, r25
     5c8:	80 93 21 01 	sts	0x0121, r24
     5cc:	20 c0       	rjmp	.+64     	; 0x60e <__vector_6+0xae>
	}
	else
	{
	    digitalWrite(vw_tx_pin, vw_tx_buf[vw_tx_index] & (1 << vw_tx_bit++));
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	ed 59       	subi	r30, 0x9D	; 157
     5d2:	ff 4f       	sbci	r31, 0xFF	; 255
     5d4:	90 81       	ld	r25, Z
     5d6:	80 91 25 01 	lds	r24, 0x0125
     5da:	21 e0       	ldi	r18, 0x01	; 1
     5dc:	28 0f       	add	r18, r24
     5de:	20 93 25 01 	sts	0x0125, r18
     5e2:	61 e0       	ldi	r22, 0x01	; 1
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <__vector_6+0x8c>
     5e8:	66 0f       	add	r22, r22
     5ea:	77 1f       	adc	r23, r23
     5ec:	8a 95       	dec	r24
     5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <__vector_6+0x88>
     5f0:	69 23       	and	r22, r25
     5f2:	80 91 60 00 	lds	r24, 0x0060
     5f6:	d2 d4       	rcall	.+2468   	; 0xf9c <digitalWrite>
	    if (vw_tx_bit >= 6)
     5f8:	80 91 25 01 	lds	r24, 0x0125
     5fc:	86 30       	cpi	r24, 0x06	; 6
     5fe:	38 f0       	brcs	.+14     	; 0x60e <__vector_6+0xae>
	    {
		vw_tx_bit = 0;
     600:	10 92 25 01 	sts	0x0125, r1
		vw_tx_index++;
     604:	80 91 26 01 	lds	r24, 0x0126
     608:	8f 5f       	subi	r24, 0xFF	; 255
     60a:	80 93 26 01 	sts	0x0126, r24
	    }
	}
    }
    if (vw_tx_sample > 7)
     60e:	80 91 24 01 	lds	r24, 0x0124
     612:	88 30       	cpi	r24, 0x08	; 8
     614:	10 f0       	brcs	.+4      	; 0x61a <__vector_6+0xba>
	vw_tx_sample = 0;
     616:	10 92 24 01 	sts	0x0124, r1
    
    if (vw_rx_enabled && !vw_tx_enabled)
     61a:	80 91 19 01 	lds	r24, 0x0119
     61e:	88 23       	and	r24, r24
     620:	61 f0       	breq	.+24     	; 0x63a <__vector_6+0xda>
     622:	80 91 23 01 	lds	r24, 0x0123
     626:	88 23       	and	r24, r24
     628:	39 f0       	breq	.+14     	; 0x638 <__vector_6+0xd8>
     62a:	07 c0       	rjmp	.+14     	; 0x63a <__vector_6+0xda>
SIGNAL(TIMER1_COMPA_vect)
#endif // __AVR_ATtiny85__

{
    if (vw_rx_enabled && !vw_tx_enabled)
	vw_rx_sample = digitalRead(vw_rx_pin);
     62c:	80 91 61 00 	lds	r24, 0x0061
     630:	e5 d4       	rcall	.+2506   	; 0xffc <digitalRead>
     632:	80 93 1f 01 	sts	0x011F, r24
     636:	ae cf       	rjmp	.-164    	; 0x594 <__vector_6+0x34>
    }
    if (vw_tx_sample > 7)
	vw_tx_sample = 0;
    
    if (vw_rx_enabled && !vw_tx_enabled)
	vw_pll();
     638:	60 dd       	rcall	.-1344   	; 0xfa <vw_pll>
}
     63a:	ff 91       	pop	r31
     63c:	ef 91       	pop	r30
     63e:	bf 91       	pop	r27
     640:	af 91       	pop	r26
     642:	9f 91       	pop	r25
     644:	8f 91       	pop	r24
     646:	7f 91       	pop	r23
     648:	6f 91       	pop	r22
     64a:	5f 91       	pop	r21
     64c:	4f 91       	pop	r20
     64e:	3f 91       	pop	r19
     650:	2f 91       	pop	r18
     652:	0f 90       	pop	r0
     654:	0f be       	out	0x3f, r0	; 63
     656:	0f 90       	pop	r0
     658:	1f 90       	pop	r1
     65a:	18 95       	reti

0000065c <_Z5startv>:
}


void start()
{
	 digitalWrite(13,!digitalRead(13));
     65c:	8d e0       	ldi	r24, 0x0D	; 13
     65e:	ce d4       	rcall	.+2460   	; 0xffc <digitalRead>
     660:	61 e0       	ldi	r22, 0x01	; 1
     662:	89 2b       	or	r24, r25
     664:	09 f0       	breq	.+2      	; 0x668 <_Z5startv+0xc>
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	8d e0       	ldi	r24, 0x0D	; 13
     66a:	98 d4       	rcall	.+2352   	; 0xf9c <digitalWrite>
	 
	 if(digitalRead(TOP_SENSOR))
     66c:	83 e0       	ldi	r24, 0x03	; 3
     66e:	c6 d4       	rcall	.+2444   	; 0xffc <digitalRead>
     670:	89 2b       	or	r24, r25
     672:	19 f0       	breq	.+6      	; 0x67a <_Z5startv+0x1e>
	 start_flag=true;
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	80 93 29 01 	sts	0x0129, r24
     67a:	08 95       	ret

0000067c <_Z4stopv>:
	
}

void stop()
{digitalWrite(13,!digitalRead(13));
     67c:	8d e0       	ldi	r24, 0x0D	; 13
     67e:	be d4       	rcall	.+2428   	; 0xffc <digitalRead>
     680:	61 e0       	ldi	r22, 0x01	; 1
     682:	89 2b       	or	r24, r25
     684:	09 f0       	breq	.+2      	; 0x688 <_Z4stopv+0xc>
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	8d e0       	ldi	r24, 0x0D	; 13
     68a:	88 d4       	rcall	.+2320   	; 0xf9c <digitalWrite>
//	if(!digitalRead(BOTTOM_SENSOR))
	stop_flag=true;
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	80 93 28 01 	sts	0x0128, r24
     692:	08 95       	ret

00000694 <_Z10real_startv>:
	
}

void real_start()
{
	start_flag=false;
     694:	10 92 29 01 	sts	0x0129, r1
	vw_send((uint8_t*)ADDRESS,strlen(ADDRESS));
     698:	67 e0       	ldi	r22, 0x07	; 7
     69a:	86 ec       	ldi	r24, 0xC6	; 198
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	9c de       	rcall	.-712    	; 0x3d8 <vw_send>
	vw_wait_tx();
     6a0:	96 de       	rcall	.-724    	; 0x3ce <vw_wait_tx>
	vw_send((uint8_t*)ON,strlen(ON));
     6a2:	67 e0       	ldi	r22, 0x07	; 7
     6a4:	8e ec       	ldi	r24, 0xCE	; 206
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	97 de       	rcall	.-722    	; 0x3d8 <vw_send>
	vw_wait_tx();
     6aa:	91 de       	rcall	.-734    	; 0x3ce <vw_wait_tx>
     6ac:	08 95       	ret

000006ae <_Z9real_stopv>:
}

void real_stop()
{
	stop_flag=false;
     6ae:	10 92 28 01 	sts	0x0128, r1
	vw_send((uint8_t*)ADDRESS,strlen(ADDRESS));
     6b2:	67 e0       	ldi	r22, 0x07	; 7
     6b4:	86 ec       	ldi	r24, 0xC6	; 198
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	8f de       	rcall	.-738    	; 0x3d8 <vw_send>
	vw_wait_tx();
     6ba:	89 de       	rcall	.-750    	; 0x3ce <vw_wait_tx>
	vw_send((uint8_t*)OFF,strlen(OFF));
     6bc:	67 e0       	ldi	r22, 0x07	; 7
     6be:	86 ed       	ldi	r24, 0xD6	; 214
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	8a de       	rcall	.-748    	; 0x3d8 <vw_send>
	vw_wait_tx();
     6c4:	84 de       	rcall	.-760    	; 0x3ce <vw_wait_tx>
     6c6:	08 95       	ret

000006c8 <setup>:



void setup() 
{
  pinMode(13,1);
     6c8:	61 e0       	ldi	r22, 0x01	; 1
     6ca:	8d e0       	ldi	r24, 0x0D	; 13
     6cc:	28 d4       	rcall	.+2128   	; 0xf1e <pinMode>
  DDRD&=~((1<<PORTD2)|(1<<PORTD3));
     6ce:	81 b3       	in	r24, 0x11	; 17
     6d0:	83 7f       	andi	r24, 0xF3	; 243
     6d2:	81 bb       	out	0x11, r24	; 17
  PORTD|=(1<<PORTD2)|(1<<PORTD3);
     6d4:	82 b3       	in	r24, 0x12	; 18
     6d6:	8c 60       	ori	r24, 0x0C	; 12
     6d8:	82 bb       	out	0x12, r24	; 18
  
  pinMode(BOTTOM_SENSOR,INPUT_PULLUP);
     6da:	62 e0       	ldi	r22, 0x02	; 2
     6dc:	82 e0       	ldi	r24, 0x02	; 2
     6de:	1f d4       	rcall	.+2110   	; 0xf1e <pinMode>
  pinMode(TOP_SENSOR,INPUT_PULLUP);
     6e0:	62 e0       	ldi	r22, 0x02	; 2
     6e2:	83 e0       	ldi	r24, 0x03	; 3
     6e4:	1c d4       	rcall	.+2104   	; 0xf1e <pinMode>
  
  attachInterrupt(0,start,RISING);
     6e6:	43 e0       	ldi	r20, 0x03	; 3
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	6e e2       	ldi	r22, 0x2E	; 46
     6ec:	73 e0       	ldi	r23, 0x03	; 3
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	1d d3       	rcall	.+1594   	; 0xd2c <attachInterrupt>
  attachInterrupt(1,stop,FALLING);
     6f2:	42 e0       	ldi	r20, 0x02	; 2
     6f4:	50 e0       	ldi	r21, 0x00	; 0
     6f6:	6e e3       	ldi	r22, 0x3E	; 62
     6f8:	73 e0       	ldi	r23, 0x03	; 3
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	17 d3       	rcall	.+1582   	; 0xd2c <attachInterrupt>
  
  vw_set_tx_pin(TX_PIN);
     6fe:	8c e0       	ldi	r24, 0x0C	; 12
     700:	f9 dc       	rcall	.-1550   	; 0xf4 <vw_set_tx_pin>
  vw_setup(2000);
     702:	80 ed       	ldi	r24, 0xD0	; 208
     704:	97 e0       	ldi	r25, 0x07	; 7
     706:	a0 dd       	rcall	.-1216   	; 0x248 <vw_setup>
  real_stop();
     708:	d2 df       	rcall	.-92     	; 0x6ae <_Z9real_stopv>
  
  if(digitalRead(BOTTOM_SENSOR)&&digitalRead(TOP_SENSOR))
     70a:	82 e0       	ldi	r24, 0x02	; 2
     70c:	77 d4       	rcall	.+2286   	; 0xffc <digitalRead>
     70e:	89 2b       	or	r24, r25
     710:	29 f0       	breq	.+10     	; 0x71c <setup+0x54>
     712:	83 e0       	ldi	r24, 0x03	; 3
     714:	73 d4       	rcall	.+2278   	; 0xffc <digitalRead>
     716:	89 2b       	or	r24, r25
     718:	09 f0       	breq	.+2      	; 0x71c <setup+0x54>
  real_start();
     71a:	bc df       	rcall	.-136    	; 0x694 <_Z10real_startv>
     71c:	08 95       	ret

0000071e <loop>:
  
}

void loop() 
{
   if(start_flag)
     71e:	80 91 29 01 	lds	r24, 0x0129
     722:	88 23       	and	r24, r24
     724:	11 f0       	breq	.+4      	; 0x72a <loop+0xc>
   real_start();
     726:	b6 df       	rcall	.-148    	; 0x694 <_Z10real_startv>
     728:	08 95       	ret
   
   else if(stop_flag)
     72a:	80 91 28 01 	lds	r24, 0x0128
     72e:	81 11       	cpse	r24, r1
   real_stop();
     730:	be df       	rcall	.-132    	; 0x6ae <_Z9real_stopv>
     732:	08 95       	ret

00000734 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     734:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     736:	91 8d       	ldd	r25, Z+25	; 0x19
     738:	22 8d       	ldd	r18, Z+26	; 0x1a
     73a:	89 2f       	mov	r24, r25
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	80 5c       	subi	r24, 0xC0	; 192
     740:	9f 4f       	sbci	r25, 0xFF	; 255
     742:	82 1b       	sub	r24, r18
     744:	91 09       	sbc	r25, r1
}
     746:	8f 73       	andi	r24, 0x3F	; 63
     748:	99 27       	eor	r25, r25
     74a:	08 95       	ret

0000074c <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     74c:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     74e:	91 8d       	ldd	r25, Z+25	; 0x19
     750:	82 8d       	ldd	r24, Z+26	; 0x1a
     752:	98 17       	cp	r25, r24
     754:	31 f0       	breq	.+12     	; 0x762 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     756:	82 8d       	ldd	r24, Z+26	; 0x1a
     758:	e8 0f       	add	r30, r24
     75a:	f1 1d       	adc	r31, r1
     75c:	85 8d       	ldd	r24, Z+29	; 0x1d
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     762:	8f ef       	ldi	r24, 0xFF	; 255
     764:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     766:	08 95       	ret

00000768 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     768:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     76a:	91 8d       	ldd	r25, Z+25	; 0x19
     76c:	82 8d       	ldd	r24, Z+26	; 0x1a
     76e:	98 17       	cp	r25, r24
     770:	61 f0       	breq	.+24     	; 0x78a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     772:	82 8d       	ldd	r24, Z+26	; 0x1a
     774:	df 01       	movw	r26, r30
     776:	a8 0f       	add	r26, r24
     778:	b1 1d       	adc	r27, r1
     77a:	5d 96       	adiw	r26, 0x1d	; 29
     77c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     77e:	92 8d       	ldd	r25, Z+26	; 0x1a
     780:	9f 5f       	subi	r25, 0xFF	; 255
     782:	9f 73       	andi	r25, 0x3F	; 63
     784:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     78a:	8f ef       	ldi	r24, 0xFF	; 255
     78c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     78e:	08 95       	ret

00000790 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     790:	8a ec       	ldi	r24, 0xCA	; 202
     792:	94 e0       	ldi	r25, 0x04	; 4
     794:	89 2b       	or	r24, r25
     796:	39 f0       	breq	.+14     	; 0x7a6 <_Z14serialEventRunv+0x16>
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	89 2b       	or	r24, r25
     79e:	19 f0       	breq	.+6      	; 0x7a6 <_Z14serialEventRunv+0x16>
     7a0:	f9 d0       	rcall	.+498    	; 0x994 <_Z17Serial0_availablev>
     7a2:	81 11       	cpse	r24, r1
     7a4:	2d dc       	rcall	.-1958   	; 0x0 <__vectors>
     7a6:	08 95       	ret

000007a8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     7a8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     7aa:	84 8d       	ldd	r24, Z+28	; 0x1c
     7ac:	df 01       	movw	r26, r30
     7ae:	a8 0f       	add	r26, r24
     7b0:	b1 1d       	adc	r27, r1
     7b2:	a3 5a       	subi	r26, 0xA3	; 163
     7b4:	bf 4f       	sbci	r27, 0xFF	; 255
     7b6:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     7b8:	24 8d       	ldd	r18, Z+28	; 0x1c
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	2f 5f       	subi	r18, 0xFF	; 255
     7be:	3f 4f       	sbci	r19, 0xFF	; 255
     7c0:	2f 73       	andi	r18, 0x3F	; 63
     7c2:	30 78       	andi	r19, 0x80	; 128
     7c4:	33 23       	and	r19, r19
     7c6:	34 f4       	brge	.+12     	; 0x7d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
     7c8:	21 50       	subi	r18, 0x01	; 1
     7ca:	31 09       	sbc	r19, r1
     7cc:	20 6c       	ori	r18, 0xC0	; 192
     7ce:	3f 6f       	ori	r19, 0xFF	; 255
     7d0:	2f 5f       	subi	r18, 0xFF	; 255
     7d2:	3f 4f       	sbci	r19, 0xFF	; 255
     7d4:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
     7d6:	a6 89       	ldd	r26, Z+22	; 0x16
     7d8:	b7 89       	ldd	r27, Z+23	; 0x17
     7da:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     7dc:	a0 89       	ldd	r26, Z+16	; 0x10
     7de:	b1 89       	ldd	r27, Z+17	; 0x11
     7e0:	8c 91       	ld	r24, X
     7e2:	80 64       	ori	r24, 0x40	; 64
     7e4:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     7e6:	93 8d       	ldd	r25, Z+27	; 0x1b
     7e8:	84 8d       	ldd	r24, Z+28	; 0x1c
     7ea:	98 13       	cpse	r25, r24
     7ec:	06 c0       	rjmp	.+12     	; 0x7fa <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     7ee:	02 88       	ldd	r0, Z+18	; 0x12
     7f0:	f3 89       	ldd	r31, Z+19	; 0x13
     7f2:	e0 2d       	mov	r30, r0
     7f4:	80 81       	ld	r24, Z
     7f6:	8f 7d       	andi	r24, 0xDF	; 223
     7f8:	80 83       	st	Z, r24
     7fa:	08 95       	ret

000007fc <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     802:	88 8d       	ldd	r24, Y+24	; 0x18
     804:	81 11       	cpse	r24, r1
     806:	0e c0       	rjmp	.+28     	; 0x824 <_ZN14HardwareSerial5flushEv+0x28>
     808:	17 c0       	rjmp	.+46     	; 0x838 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	07 fc       	sbrc	r0, 7
     80e:	0c c0       	rjmp	.+24     	; 0x828 <_ZN14HardwareSerial5flushEv+0x2c>
     810:	90 81       	ld	r25, Z
     812:	95 ff       	sbrs	r25, 5
     814:	09 c0       	rjmp	.+18     	; 0x828 <_ZN14HardwareSerial5flushEv+0x2c>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     816:	a8 89       	ldd	r26, Y+16	; 0x10
     818:	b9 89       	ldd	r27, Y+17	; 0x11
     81a:	8c 91       	ld	r24, X
     81c:	85 ff       	sbrs	r24, 5
     81e:	04 c0       	rjmp	.+8      	; 0x828 <_ZN14HardwareSerial5flushEv+0x2c>
	  _tx_udr_empty_irq();
     820:	ce 01       	movw	r24, r28
     822:	c2 df       	rcall	.-124    	; 0x7a8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     824:	ea 89       	ldd	r30, Y+18	; 0x12
     826:	fb 89       	ldd	r31, Y+19	; 0x13
     828:	90 81       	ld	r25, Z
     82a:	95 fd       	sbrc	r25, 5
     82c:	ee cf       	rjmp	.-36     	; 0x80a <_ZN14HardwareSerial5flushEv+0xe>
     82e:	a8 89       	ldd	r26, Y+16	; 0x10
     830:	b9 89       	ldd	r27, Y+17	; 0x11
     832:	8c 91       	ld	r24, X
     834:	86 ff       	sbrs	r24, 6
     836:	e9 cf       	rjmp	.-46     	; 0x80a <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	08 95       	ret

0000083e <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     83e:	0f 93       	push	r16
     840:	1f 93       	push	r17
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	fc 01       	movw	r30, r24
  _written = true;
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     84c:	93 8d       	ldd	r25, Z+27	; 0x1b
     84e:	84 8d       	ldd	r24, Z+28	; 0x1c
     850:	98 13       	cpse	r25, r24
     852:	21 c0       	rjmp	.+66     	; 0x896 <_ZN14HardwareSerial5writeEh+0x58>
     854:	a0 89       	ldd	r26, Z+16	; 0x10
     856:	b1 89       	ldd	r27, Z+17	; 0x11
     858:	8c 91       	ld	r24, X
     85a:	85 fd       	sbrc	r24, 5
     85c:	2e c0       	rjmp	.+92     	; 0x8ba <_ZN14HardwareSerial5writeEh+0x7c>
     85e:	1b c0       	rjmp	.+54     	; 0x896 <_ZN14HardwareSerial5writeEh+0x58>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	07 fc       	sbrc	r0, 7
     864:	07 c0       	rjmp	.+14     	; 0x874 <_ZN14HardwareSerial5writeEh+0x36>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     866:	e8 89       	ldd	r30, Y+16	; 0x10
     868:	f9 89       	ldd	r31, Y+17	; 0x11
     86a:	80 81       	ld	r24, Z
     86c:	85 ff       	sbrs	r24, 5
     86e:	02 c0       	rjmp	.+4      	; 0x874 <_ZN14HardwareSerial5writeEh+0x36>
	_tx_udr_empty_irq();
     870:	ce 01       	movw	r24, r28
     872:	9a df       	rcall	.-204    	; 0x7a8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     874:	9c 8d       	ldd	r25, Y+28	; 0x1c
     876:	09 17       	cp	r16, r25
     878:	99 f3       	breq	.-26     	; 0x860 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     87a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     87c:	fe 01       	movw	r30, r28
     87e:	e8 0f       	add	r30, r24
     880:	f1 1d       	adc	r31, r1
     882:	e3 5a       	subi	r30, 0xA3	; 163
     884:	ff 4f       	sbci	r31, 0xFF	; 255
     886:	10 83       	st	Z, r17
  _tx_buffer_head = i;
     888:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     88a:	ea 89       	ldd	r30, Y+18	; 0x12
     88c:	fb 89       	ldd	r31, Y+19	; 0x13
     88e:	80 81       	ld	r24, Z
     890:	80 62       	ori	r24, 0x20	; 32
     892:	80 83       	st	Z, r24
  
  return 1;
     894:	1b c0       	rjmp	.+54     	; 0x8cc <_ZN14HardwareSerial5writeEh+0x8e>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     896:	23 8d       	ldd	r18, Z+27	; 0x1b
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	2f 5f       	subi	r18, 0xFF	; 255
     89c:	3f 4f       	sbci	r19, 0xFF	; 255
     89e:	2f 73       	andi	r18, 0x3F	; 63
     8a0:	30 78       	andi	r19, 0x80	; 128
     8a2:	33 23       	and	r19, r19
     8a4:	34 f4       	brge	.+12     	; 0x8b2 <_ZN14HardwareSerial5writeEh+0x74>
     8a6:	21 50       	subi	r18, 0x01	; 1
     8a8:	31 09       	sbc	r19, r1
     8aa:	20 6c       	ori	r18, 0xC0	; 192
     8ac:	3f 6f       	ori	r19, 0xFF	; 255
     8ae:	2f 5f       	subi	r18, 0xFF	; 255
     8b0:	3f 4f       	sbci	r19, 0xFF	; 255
     8b2:	16 2f       	mov	r17, r22
     8b4:	ef 01       	movw	r28, r30
     8b6:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     8b8:	dd cf       	rjmp	.-70     	; 0x874 <_ZN14HardwareSerial5writeEh+0x36>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     8ba:	a6 89       	ldd	r26, Z+22	; 0x16
     8bc:	b7 89       	ldd	r27, Z+23	; 0x17
     8be:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
     8c0:	00 88       	ldd	r0, Z+16	; 0x10
     8c2:	f1 89       	ldd	r31, Z+17	; 0x11
     8c4:	e0 2d       	mov	r30, r0
     8c6:	80 81       	ld	r24, Z
     8c8:	80 64       	ori	r24, 0x40	; 64
     8ca:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	08 95       	ret

000008da <__vector_11>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     8da:	1f 92       	push	r1
     8dc:	0f 92       	push	r0
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	0f 92       	push	r0
     8e2:	11 24       	eor	r1, r1
     8e4:	2f 93       	push	r18
     8e6:	8f 93       	push	r24
     8e8:	9f 93       	push	r25
     8ea:	af 93       	push	r26
     8ec:	bf 93       	push	r27
     8ee:	ef 93       	push	r30
     8f0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     8f2:	e0 91 3a 01 	lds	r30, 0x013A
     8f6:	f0 91 3b 01 	lds	r31, 0x013B
     8fa:	80 81       	ld	r24, Z
     8fc:	82 fd       	sbrc	r24, 2
     8fe:	14 c0       	rjmp	.+40     	; 0x928 <__vector_11+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     900:	ea e2       	ldi	r30, 0x2A	; 42
     902:	f1 e0       	ldi	r31, 0x01	; 1
     904:	a6 89       	ldd	r26, Z+22	; 0x16
     906:	b7 89       	ldd	r27, Z+23	; 0x17
     908:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     90a:	81 8d       	ldd	r24, Z+25	; 0x19
     90c:	8f 5f       	subi	r24, 0xFF	; 255
     90e:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     910:	92 8d       	ldd	r25, Z+26	; 0x1a
     912:	89 17       	cp	r24, r25
     914:	71 f0       	breq	.+28     	; 0x932 <__vector_11+0x58>
      _rx_buffer[_rx_buffer_head] = c;
     916:	df 01       	movw	r26, r30
     918:	e1 8d       	ldd	r30, Z+25	; 0x19
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	e6 5d       	subi	r30, 0xD6	; 214
     91e:	fe 4f       	sbci	r31, 0xFE	; 254
     920:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
     922:	59 96       	adiw	r26, 0x19	; 25
     924:	8c 93       	st	X, r24
     926:	05 c0       	rjmp	.+10     	; 0x932 <__vector_11+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     928:	e0 91 40 01 	lds	r30, 0x0140
     92c:	f0 91 41 01 	lds	r31, 0x0141
     930:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     932:	ff 91       	pop	r31
     934:	ef 91       	pop	r30
     936:	bf 91       	pop	r27
     938:	af 91       	pop	r26
     93a:	9f 91       	pop	r25
     93c:	8f 91       	pop	r24
     93e:	2f 91       	pop	r18
     940:	0f 90       	pop	r0
     942:	0f be       	out	0x3f, r0	; 63
     944:	0f 90       	pop	r0
     946:	1f 90       	pop	r1
     948:	18 95       	reti

0000094a <__vector_12>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     94a:	1f 92       	push	r1
     94c:	0f 92       	push	r0
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	0f 92       	push	r0
     952:	11 24       	eor	r1, r1
     954:	2f 93       	push	r18
     956:	3f 93       	push	r19
     958:	4f 93       	push	r20
     95a:	5f 93       	push	r21
     95c:	6f 93       	push	r22
     95e:	7f 93       	push	r23
     960:	8f 93       	push	r24
     962:	9f 93       	push	r25
     964:	af 93       	push	r26
     966:	bf 93       	push	r27
     968:	ef 93       	push	r30
     96a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     96c:	8a e2       	ldi	r24, 0x2A	; 42
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	1b df       	rcall	.-458    	; 0x7a8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     972:	ff 91       	pop	r31
     974:	ef 91       	pop	r30
     976:	bf 91       	pop	r27
     978:	af 91       	pop	r26
     97a:	9f 91       	pop	r25
     97c:	8f 91       	pop	r24
     97e:	7f 91       	pop	r23
     980:	6f 91       	pop	r22
     982:	5f 91       	pop	r21
     984:	4f 91       	pop	r20
     986:	3f 91       	pop	r19
     988:	2f 91       	pop	r18
     98a:	0f 90       	pop	r0
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	0f 90       	pop	r0
     990:	1f 90       	pop	r1
     992:	18 95       	reti

00000994 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     994:	8a e2       	ldi	r24, 0x2A	; 42
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	cd de       	rcall	.-614    	; 0x734 <_ZN14HardwareSerial9availableEv>
     99a:	21 e0       	ldi	r18, 0x01	; 1
     99c:	89 2b       	or	r24, r25
     99e:	09 f4       	brne	.+2      	; 0x9a2 <_Z17Serial0_availablev+0xe>
     9a0:	20 e0       	ldi	r18, 0x00	; 0
}
     9a2:	82 2f       	mov	r24, r18
     9a4:	08 95       	ret

000009a6 <_GLOBAL__sub_I___vector_11>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     9a6:	ea e2       	ldi	r30, 0x2A	; 42
     9a8:	f1 e0       	ldi	r31, 0x01	; 1
     9aa:	13 82       	std	Z+3, r1	; 0x03
     9ac:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     9ae:	88 ee       	ldi	r24, 0xE8	; 232
     9b0:	93 e0       	ldi	r25, 0x03	; 3
     9b2:	a0 e0       	ldi	r26, 0x00	; 0
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	84 83       	std	Z+4, r24	; 0x04
     9b8:	95 83       	std	Z+5, r25	; 0x05
     9ba:	a6 83       	std	Z+6, r26	; 0x06
     9bc:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     9be:	82 ee       	ldi	r24, 0xE2	; 226
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	91 83       	std	Z+1, r25	; 0x01
     9c4:	80 83       	st	Z, r24
     9c6:	80 e4       	ldi	r24, 0x40	; 64
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	95 87       	std	Z+13, r25	; 0x0d
     9cc:	84 87       	std	Z+12, r24	; 0x0c
     9ce:	29 e2       	ldi	r18, 0x29	; 41
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	37 87       	std	Z+15, r19	; 0x0f
     9d4:	26 87       	std	Z+14, r18	; 0x0e
     9d6:	2b e2       	ldi	r18, 0x2B	; 43
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	31 8b       	std	Z+17, r19	; 0x11
     9dc:	20 8b       	std	Z+16, r18	; 0x10
     9de:	2a e2       	ldi	r18, 0x2A	; 42
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	33 8b       	std	Z+19, r19	; 0x13
     9e4:	22 8b       	std	Z+18, r18	; 0x12
     9e6:	95 8b       	std	Z+21, r25	; 0x15
     9e8:	84 8b       	std	Z+20, r24	; 0x14
     9ea:	8c e2       	ldi	r24, 0x2C	; 44
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	97 8b       	std	Z+23, r25	; 0x17
     9f0:	86 8b       	std	Z+22, r24	; 0x16
     9f2:	11 8e       	std	Z+25, r1	; 0x19
     9f4:	12 8e       	std	Z+26, r1	; 0x1a
     9f6:	13 8e       	std	Z+27, r1	; 0x1b
     9f8:	14 8e       	std	Z+28, r1	; 0x1c
     9fa:	08 95       	ret

000009fc <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
     9fc:	8f 92       	push	r8
     9fe:	9f 92       	push	r9
     a00:	af 92       	push	r10
     a02:	bf 92       	push	r11
     a04:	cf 92       	push	r12
     a06:	df 92       	push	r13
     a08:	ef 92       	push	r14
     a0a:	ff 92       	push	r15
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	5c 01       	movw	r10, r24
     a16:	7b 01       	movw	r14, r22
     a18:	4c 01       	movw	r8, r24
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	88 0e       	add	r8, r24
     a1e:	91 1c       	adc	r9, r1
     a20:	65 01       	movw	r12, r10
     a22:	e5 e0       	ldi	r30, 0x05	; 5
     a24:	ce 0e       	add	r12, r30
     a26:	d1 1c       	adc	r13, r1
    size_t n = 0;
     a28:	00 e0       	ldi	r16, 0x00	; 0
     a2a:	10 e0       	ldi	r17, 0x00	; 0
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
     a2c:	f4 01       	movw	r30, r8
     a2e:	61 91       	ld	r22, Z+
     a30:	4f 01       	movw	r8, r30
     a32:	4a e0       	ldi	r20, 0x0A	; 10
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	c7 01       	movw	r24, r14
     a38:	eb d0       	rcall	.+470    	; 0xc10 <_ZN5Print5printEhi>
     a3a:	ec 01       	movw	r28, r24
        n += p.print('.');
     a3c:	6e e2       	ldi	r22, 0x2E	; 46
     a3e:	c7 01       	movw	r24, r14
     a40:	5f d0       	rcall	.+190    	; 0xb00 <_ZN5Print5printEc>
     a42:	8c 0f       	add	r24, r28
     a44:	9d 1f       	adc	r25, r29
     a46:	08 0f       	add	r16, r24
     a48:	19 1f       	adc	r17, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     a4a:	8c 14       	cp	r8, r12
     a4c:	9d 04       	cpc	r9, r13
     a4e:	71 f7       	brne	.-36     	; 0xa2c <_ZNK9IPAddress7printToER5Print+0x30>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
     a50:	4a e0       	ldi	r20, 0x0A	; 10
     a52:	50 e0       	ldi	r21, 0x00	; 0
     a54:	f5 01       	movw	r30, r10
     a56:	65 81       	ldd	r22, Z+5	; 0x05
     a58:	c7 01       	movw	r24, r14
     a5a:	da d0       	rcall	.+436    	; 0xc10 <_ZN5Print5printEhi>
    return n;
}
     a5c:	80 0f       	add	r24, r16
     a5e:	91 1f       	adc	r25, r17
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	cf 90       	pop	r12
     a70:	bf 90       	pop	r11
     a72:	af 90       	pop	r10
     a74:	9f 90       	pop	r9
     a76:	8f 90       	pop	r8
     a78:	08 95       	ret

00000a7a <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     a7a:	e7 ec       	ldi	r30, 0xC7	; 199
     a7c:	f1 e0       	ldi	r31, 0x01	; 1
     a7e:	82 ef       	ldi	r24, 0xF2	; 242
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	91 83       	std	Z+1, r25	; 0x01
     a84:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
     a86:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
     a88:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
     a8a:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
     a8c:	15 82       	std	Z+5, r1	; 0x05
     a8e:	08 95       	ret

00000a90 <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     a90:	08 95       	ret

00000a92 <main>:

int main(void)
{
	init();
     a92:	13 d2       	rcall	.+1062   	; 0xeba <init>

	initVariant();
     a94:	fd df       	rcall	.-6      	; 0xa90 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     a96:	18 de       	rcall	.-976    	; 0x6c8 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     a98:	c8 ec       	ldi	r28, 0xC8	; 200
     a9a:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	setup();
    
	for (;;) {
		loop();
     a9c:	40 de       	rcall	.-896    	; 0x71e <loop>
		if (serialEventRun) serialEventRun();
     a9e:	20 97       	sbiw	r28, 0x00	; 0
     aa0:	e9 f3       	breq	.-6      	; 0xa9c <main+0xa>
     aa2:	76 de       	rcall	.-788    	; 0x790 <_Z14serialEventRunv>
     aa4:	fb cf       	rjmp	.-10     	; 0xa9c <main+0xa>

00000aa6 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     aa6:	cf 92       	push	r12
     aa8:	df 92       	push	r13
     aaa:	ef 92       	push	r14
     aac:	ff 92       	push	r15
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
  size_t n = 0;
  while (size--) {
     ab6:	41 15       	cp	r20, r1
     ab8:	51 05       	cpc	r21, r1
     aba:	b1 f0       	breq	.+44     	; 0xae8 <_ZN5Print5writeEPKhj+0x42>
     abc:	8c 01       	movw	r16, r24
     abe:	e6 2e       	mov	r14, r22
     ac0:	f7 2e       	mov	r15, r23
     ac2:	ea 01       	movw	r28, r20
     ac4:	c1 2c       	mov	r12, r1
     ac6:	d1 2c       	mov	r13, r1
    n += write(*buffer++);
     ac8:	d7 01       	movw	r26, r14
     aca:	6d 91       	ld	r22, X+
     acc:	7d 01       	movw	r14, r26
     ace:	d8 01       	movw	r26, r16
     ad0:	ed 91       	ld	r30, X+
     ad2:	fc 91       	ld	r31, X
     ad4:	01 90       	ld	r0, Z+
     ad6:	f0 81       	ld	r31, Z
     ad8:	e0 2d       	mov	r30, r0
     ada:	c8 01       	movw	r24, r16
     adc:	09 95       	icall
     ade:	c8 0e       	add	r12, r24
     ae0:	d9 1e       	adc	r13, r25
     ae2:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     ae4:	89 f7       	brne	.-30     	; 0xac8 <_ZN5Print5writeEPKhj+0x22>
     ae6:	02 c0       	rjmp	.+4      	; 0xaec <_ZN5Print5writeEPKhj+0x46>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
     ae8:	c1 2c       	mov	r12, r1
     aea:	d1 2c       	mov	r13, r1
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
     aec:	c6 01       	movw	r24, r12
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	cf 90       	pop	r12
     afe:	08 95       	ret

00000b00 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     b00:	dc 01       	movw	r26, r24
     b02:	ed 91       	ld	r30, X+
     b04:	fc 91       	ld	r31, X
     b06:	01 90       	ld	r0, Z+
     b08:	f0 81       	ld	r31, Z
     b0a:	e0 2d       	mov	r30, r0
     b0c:	09 95       	icall
}
     b0e:	08 95       	ret

00000b10 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     b10:	4f 92       	push	r4
     b12:	5f 92       	push	r5
     b14:	6f 92       	push	r6
     b16:	7f 92       	push	r7
     b18:	9f 92       	push	r9
     b1a:	af 92       	push	r10
     b1c:	bf 92       	push	r11
     b1e:	cf 92       	push	r12
     b20:	df 92       	push	r13
     b22:	ef 92       	push	r14
     b24:	ff 92       	push	r15
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	cd b7       	in	r28, 0x3d	; 61
     b30:	de b7       	in	r29, 0x3e	; 62
     b32:	a1 97       	sbiw	r28, 0x21	; 33
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	f8 94       	cli
     b38:	de bf       	out	0x3e, r29	; 62
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	cd bf       	out	0x3d, r28	; 61
     b3e:	5c 01       	movw	r10, r24
     b40:	6a 01       	movw	r12, r20
     b42:	7b 01       	movw	r14, r22
     b44:	92 2e       	mov	r9, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     b46:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	82 17       	cp	r24, r18
     b4c:	20 f0       	brcs	.+8      	; 0xb56 <_ZN5Print11printNumberEmh+0x46>
     b4e:	0f 2e       	mov	r0, r31
     b50:	fa e0       	ldi	r31, 0x0A	; 10
     b52:	9f 2e       	mov	r9, r31
     b54:	f0 2d       	mov	r31, r0
     b56:	8e 01       	movw	r16, r28
     b58:	0f 5d       	subi	r16, 0xDF	; 223
     b5a:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
     b5c:	49 2c       	mov	r4, r9
     b5e:	51 2c       	mov	r5, r1
     b60:	61 2c       	mov	r6, r1
     b62:	71 2c       	mov	r7, r1
     b64:	c7 01       	movw	r24, r14
     b66:	b6 01       	movw	r22, r12
     b68:	a3 01       	movw	r20, r6
     b6a:	92 01       	movw	r18, r4
     b6c:	f9 d3       	rcall	.+2034   	; 0x1360 <__udivmodsi4>
    char c = m - base * n;
     b6e:	8c 2d       	mov	r24, r12
     b70:	92 9e       	mul	r9, r18
     b72:	80 19       	sub	r24, r0
     b74:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     b76:	01 50       	subi	r16, 0x01	; 1
     b78:	11 09       	sbc	r17, r1
     b7a:	8a 30       	cpi	r24, 0x0A	; 10
     b7c:	10 f4       	brcc	.+4      	; 0xb82 <_ZN5Print11printNumberEmh+0x72>
     b7e:	80 5d       	subi	r24, 0xD0	; 208
     b80:	01 c0       	rjmp	.+2      	; 0xb84 <_ZN5Print11printNumberEmh+0x74>
     b82:	89 5c       	subi	r24, 0xC9	; 201
     b84:	d8 01       	movw	r26, r16
     b86:	8c 93       	st	X, r24
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
     b88:	c2 2e       	mov	r12, r18
     b8a:	d3 2e       	mov	r13, r19
     b8c:	e4 2e       	mov	r14, r20
     b8e:	f5 2e       	mov	r15, r21
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     b90:	c1 14       	cp	r12, r1
     b92:	d1 04       	cpc	r13, r1
     b94:	e1 04       	cpc	r14, r1
     b96:	f1 04       	cpc	r15, r1
     b98:	29 f7       	brne	.-54     	; 0xb64 <_ZN5Print11printNumberEmh+0x54>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     b9a:	01 15       	cp	r16, r1
     b9c:	11 05       	cpc	r17, r1
     b9e:	91 f0       	breq	.+36     	; 0xbc4 <_ZN5Print11printNumberEmh+0xb4>
      return write((const uint8_t *)str, strlen(str));
     ba0:	f8 01       	movw	r30, r16
     ba2:	01 90       	ld	r0, Z+
     ba4:	00 20       	and	r0, r0
     ba6:	e9 f7       	brne	.-6      	; 0xba2 <_ZN5Print11printNumberEmh+0x92>
     ba8:	31 97       	sbiw	r30, 0x01	; 1
     baa:	af 01       	movw	r20, r30
     bac:	40 1b       	sub	r20, r16
     bae:	51 0b       	sbc	r21, r17
     bb0:	d5 01       	movw	r26, r10
     bb2:	ed 91       	ld	r30, X+
     bb4:	fc 91       	ld	r31, X
     bb6:	02 80       	ldd	r0, Z+2	; 0x02
     bb8:	f3 81       	ldd	r31, Z+3	; 0x03
     bba:	e0 2d       	mov	r30, r0
     bbc:	b8 01       	movw	r22, r16
     bbe:	c5 01       	movw	r24, r10
     bc0:	09 95       	icall
     bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <_ZN5Print11printNumberEmh+0xb8>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
     bc8:	a1 96       	adiw	r28, 0x21	; 33
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	de bf       	out	0x3e, r29	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	cd bf       	out	0x3d, r28	; 61
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	ff 90       	pop	r15
     bde:	ef 90       	pop	r14
     be0:	df 90       	pop	r13
     be2:	cf 90       	pop	r12
     be4:	bf 90       	pop	r11
     be6:	af 90       	pop	r10
     be8:	9f 90       	pop	r9
     bea:	7f 90       	pop	r7
     bec:	6f 90       	pop	r6
     bee:	5f 90       	pop	r5
     bf0:	4f 90       	pop	r4
     bf2:	08 95       	ret

00000bf4 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     bf4:	21 15       	cp	r18, r1
     bf6:	31 05       	cpc	r19, r1
     bf8:	49 f4       	brne	.+18     	; 0xc0c <_ZN5Print5printEmi+0x18>
     bfa:	dc 01       	movw	r26, r24
     bfc:	ed 91       	ld	r30, X+
     bfe:	fc 91       	ld	r31, X
     c00:	01 90       	ld	r0, Z+
     c02:	f0 81       	ld	r31, Z
     c04:	e0 2d       	mov	r30, r0
     c06:	64 2f       	mov	r22, r20
     c08:	09 95       	icall
     c0a:	08 95       	ret
  else return printNumber(n, base);
     c0c:	81 df       	rcall	.-254    	; 0xb10 <_ZN5Print11printNumberEmh>
}
     c0e:	08 95       	ret

00000c10 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     c10:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     c12:	46 2f       	mov	r20, r22
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	ec df       	rcall	.-40     	; 0xbf4 <_ZN5Print5printEmi>
}
     c1c:	08 95       	ret

00000c1e <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
     c1e:	81 30       	cpi	r24, 0x01	; 1
     c20:	31 f0       	breq	.+12     	; 0xc2e <_Z12disableTimerh+0x10>
     c22:	18 f0       	brcs	.+6      	; 0xc2a <_Z12disableTimerh+0xc>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	39 f0       	breq	.+14     	; 0xc36 <_Z12disableTimerh+0x18>
     c28:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
     c2a:	19 be       	out	0x39, r1	; 57
      #endif
      break;
     c2c:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     c2e:	89 b7       	in	r24, 0x39	; 57
     c30:	8f 7e       	andi	r24, 0xEF	; 239
     c32:	89 bf       	out	0x39, r24	; 57
      break;
     c34:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     c36:	89 b7       	in	r24, 0x39	; 57
     c38:	8f 77       	andi	r24, 0x7F	; 127
     c3a:	89 bf       	out	0x39, r24	; 57
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     c3c:	80 e4       	ldi	r24, 0x40	; 64
     c3e:	85 bd       	out	0x25, r24	; 37
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
     c40:	85 b5       	in	r24, 0x25	; 37
     c42:	88 7f       	andi	r24, 0xF8	; 248
     c44:	84 60       	ori	r24, 0x04	; 4
     c46:	85 bd       	out	0x25, r24	; 37
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     c48:	13 bc       	out	0x23, r1	; 35
     c4a:	08 95       	ret

00000c4c <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
     c4c:	cf 93       	push	r28
     c4e:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     c50:	80 91 a7 00 	lds	r24, 0x00A7
     c54:	8c 13       	cpse	r24, r28
     c56:	08 c0       	rjmp	.+16     	; 0xc68 <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     c58:	e6 e2       	ldi	r30, 0x26	; 38
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	e4 91       	lpm	r30, Z
     c5e:	8e 2f       	mov	r24, r30
      tone_pins[i] = 255;
     c60:	9f ef       	ldi	r25, 0xFF	; 255
     c62:	90 93 a7 00 	sts	0x00A7, r25
     c66:	01 c0       	rjmp	.+2      	; 0xc6a <_Z6noToneh+0x1e>
     c68:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
     c6a:	d9 df       	rcall	.-78     	; 0xc1e <_Z12disableTimerh>

  digitalWrite(_pin, 0);
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	8c 2f       	mov	r24, r28
     c70:	95 d1       	rcall	.+810    	; 0xf9c <digitalWrite>
}
     c72:	cf 91       	pop	r28
     c74:	08 95       	ret

00000c76 <__vector_3>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
     c76:	1f 92       	push	r1
     c78:	0f 92       	push	r0
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	0f 92       	push	r0
     c7e:	11 24       	eor	r1, r1
     c80:	2f 93       	push	r18
     c82:	3f 93       	push	r19
     c84:	4f 93       	push	r20
     c86:	5f 93       	push	r21
     c88:	6f 93       	push	r22
     c8a:	7f 93       	push	r23
     c8c:	8f 93       	push	r24
     c8e:	9f 93       	push	r25
     c90:	af 93       	push	r26
     c92:	bf 93       	push	r27
     c94:	ef 93       	push	r30
     c96:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
     c98:	80 91 d0 01 	lds	r24, 0x01D0
     c9c:	90 91 d1 01 	lds	r25, 0x01D1
     ca0:	a0 91 d2 01 	lds	r26, 0x01D2
     ca4:	b0 91 d3 01 	lds	r27, 0x01D3
     ca8:	89 2b       	or	r24, r25
     caa:	8a 2b       	or	r24, r26
     cac:	8b 2b       	or	r24, r27
     cae:	51 f1       	breq	.+84     	; 0xd04 <__vector_3+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
     cb0:	80 91 cd 01 	lds	r24, 0x01CD
     cb4:	e0 91 ce 01 	lds	r30, 0x01CE
     cb8:	f0 91 cf 01 	lds	r31, 0x01CF
     cbc:	90 81       	ld	r25, Z
     cbe:	89 27       	eor	r24, r25
     cc0:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
     cc2:	80 91 d0 01 	lds	r24, 0x01D0
     cc6:	90 91 d1 01 	lds	r25, 0x01D1
     cca:	a0 91 d2 01 	lds	r26, 0x01D2
     cce:	b0 91 d3 01 	lds	r27, 0x01D3
     cd2:	18 16       	cp	r1, r24
     cd4:	19 06       	cpc	r1, r25
     cd6:	1a 06       	cpc	r1, r26
     cd8:	1b 06       	cpc	r1, r27
     cda:	bc f4       	brge	.+46     	; 0xd0a <__vector_3+0x94>
      timer2_toggle_count--;
     cdc:	80 91 d0 01 	lds	r24, 0x01D0
     ce0:	90 91 d1 01 	lds	r25, 0x01D1
     ce4:	a0 91 d2 01 	lds	r26, 0x01D2
     ce8:	b0 91 d3 01 	lds	r27, 0x01D3
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	a1 09       	sbc	r26, r1
     cf0:	b1 09       	sbc	r27, r1
     cf2:	80 93 d0 01 	sts	0x01D0, r24
     cf6:	90 93 d1 01 	sts	0x01D1, r25
     cfa:	a0 93 d2 01 	sts	0x01D2, r26
     cfe:	b0 93 d3 01 	sts	0x01D3, r27
     d02:	03 c0       	rjmp	.+6      	; 0xd0a <__vector_3+0x94>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
     d04:	80 91 a7 00 	lds	r24, 0x00A7
     d08:	a1 df       	rcall	.-190    	; 0xc4c <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
     d0a:	ff 91       	pop	r31
     d0c:	ef 91       	pop	r30
     d0e:	bf 91       	pop	r27
     d10:	af 91       	pop	r26
     d12:	9f 91       	pop	r25
     d14:	8f 91       	pop	r24
     d16:	7f 91       	pop	r23
     d18:	6f 91       	pop	r22
     d1a:	5f 91       	pop	r21
     d1c:	4f 91       	pop	r20
     d1e:	3f 91       	pop	r19
     d20:	2f 91       	pop	r18
     d22:	0f 90       	pop	r0
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	0f 90       	pop	r0
     d28:	1f 90       	pop	r1
     d2a:	18 95       	reti

00000d2c <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	00 f5       	brcc	.+64     	; 0xd70 <attachInterrupt+0x44>
    intFunc[interruptNum] = userFunc;
     d30:	e8 2f       	mov	r30, r24
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	ee 0f       	add	r30, r30
     d36:	ff 1f       	adc	r31, r31
     d38:	ec 52       	subi	r30, 0x2C	; 44
     d3a:	fe 4f       	sbci	r31, 0xFE	; 254
     d3c:	71 83       	std	Z+1, r23	; 0x01
     d3e:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
     d40:	88 23       	and	r24, r24
     d42:	19 f0       	breq	.+6      	; 0xd4a <attachInterrupt+0x1e>
     d44:	81 30       	cpi	r24, 0x01	; 1
     d46:	49 f0       	breq	.+18     	; 0xd5a <attachInterrupt+0x2e>
     d48:	08 95       	ret
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      EIMSK |= (1 << INT0);
    #elif defined(MCUCR) && defined(ISC00) && defined(GICR)
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
     d4a:	85 b7       	in	r24, 0x35	; 53
     d4c:	8c 7f       	andi	r24, 0xFC	; 252
     d4e:	48 2b       	or	r20, r24
     d50:	45 bf       	out	0x35, r20	; 53
      GICR |= (1 << INT0);
     d52:	8b b7       	in	r24, 0x3b	; 59
     d54:	80 64       	ori	r24, 0x40	; 64
     d56:	8b bf       	out	0x3b, r24	; 59
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
     d58:	08 95       	ret
    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
      EIMSK |= (1 << INT1);
    #elif defined(MCUCR) && defined(ISC10) && defined(ISC11) && defined(GICR)
      MCUCR = (MCUCR & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
     d5a:	85 b7       	in	r24, 0x35	; 53
     d5c:	44 0f       	add	r20, r20
     d5e:	55 1f       	adc	r21, r21
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	83 7f       	andi	r24, 0xF3	; 243
     d66:	48 2b       	or	r20, r24
     d68:	45 bf       	out	0x35, r20	; 53
      GICR |= (1 << INT1);
     d6a:	8b b7       	in	r24, 0x3b	; 59
     d6c:	80 68       	ori	r24, 0x80	; 128
     d6e:	8b bf       	out	0x3b, r24	; 59
     d70:	08 95       	ret

00000d72 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
     d72:	1f 92       	push	r1
     d74:	0f 92       	push	r0
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	0f 92       	push	r0
     d7a:	11 24       	eor	r1, r1
     d7c:	2f 93       	push	r18
     d7e:	3f 93       	push	r19
     d80:	4f 93       	push	r20
     d82:	5f 93       	push	r21
     d84:	6f 93       	push	r22
     d86:	7f 93       	push	r23
     d88:	8f 93       	push	r24
     d8a:	9f 93       	push	r25
     d8c:	af 93       	push	r26
     d8e:	bf 93       	push	r27
     d90:	ef 93       	push	r30
     d92:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
     d94:	80 91 d4 01 	lds	r24, 0x01D4
     d98:	90 91 d5 01 	lds	r25, 0x01D5
     d9c:	89 2b       	or	r24, r25
     d9e:	29 f0       	breq	.+10     	; 0xdaa <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
     da0:	e0 91 d4 01 	lds	r30, 0x01D4
     da4:	f0 91 d5 01 	lds	r31, 0x01D5
     da8:	09 95       	icall
}
     daa:	ff 91       	pop	r31
     dac:	ef 91       	pop	r30
     dae:	bf 91       	pop	r27
     db0:	af 91       	pop	r26
     db2:	9f 91       	pop	r25
     db4:	8f 91       	pop	r24
     db6:	7f 91       	pop	r23
     db8:	6f 91       	pop	r22
     dba:	5f 91       	pop	r21
     dbc:	4f 91       	pop	r20
     dbe:	3f 91       	pop	r19
     dc0:	2f 91       	pop	r18
     dc2:	0f 90       	pop	r0
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	0f 90       	pop	r0
     dc8:	1f 90       	pop	r1
     dca:	18 95       	reti

00000dcc <__vector_2>:

ISR(INT1_vect) {
     dcc:	1f 92       	push	r1
     dce:	0f 92       	push	r0
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	0f 92       	push	r0
     dd4:	11 24       	eor	r1, r1
     dd6:	2f 93       	push	r18
     dd8:	3f 93       	push	r19
     dda:	4f 93       	push	r20
     ddc:	5f 93       	push	r21
     dde:	6f 93       	push	r22
     de0:	7f 93       	push	r23
     de2:	8f 93       	push	r24
     de4:	9f 93       	push	r25
     de6:	af 93       	push	r26
     de8:	bf 93       	push	r27
     dea:	ef 93       	push	r30
     dec:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
     dee:	80 91 d6 01 	lds	r24, 0x01D6
     df2:	90 91 d7 01 	lds	r25, 0x01D7
     df6:	89 2b       	or	r24, r25
     df8:	29 f0       	breq	.+10     	; 0xe04 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
     dfa:	e0 91 d6 01 	lds	r30, 0x01D6
     dfe:	f0 91 d7 01 	lds	r31, 0x01D7
     e02:	09 95       	icall
}
     e04:	ff 91       	pop	r31
     e06:	ef 91       	pop	r30
     e08:	bf 91       	pop	r27
     e0a:	af 91       	pop	r26
     e0c:	9f 91       	pop	r25
     e0e:	8f 91       	pop	r24
     e10:	7f 91       	pop	r23
     e12:	6f 91       	pop	r22
     e14:	5f 91       	pop	r21
     e16:	4f 91       	pop	r20
     e18:	3f 91       	pop	r19
     e1a:	2f 91       	pop	r18
     e1c:	0f 90       	pop	r0
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	0f 90       	pop	r0
     e22:	1f 90       	pop	r1
     e24:	18 95       	reti

00000e26 <__vector_9>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)|| defined(__AVR_ATtiny13__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     e26:	1f 92       	push	r1
     e28:	0f 92       	push	r0
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	0f 92       	push	r0
     e2e:	11 24       	eor	r1, r1
     e30:	2f 93       	push	r18
     e32:	3f 93       	push	r19
     e34:	8f 93       	push	r24
     e36:	9f 93       	push	r25
     e38:	af 93       	push	r26
     e3a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     e3c:	80 91 d9 01 	lds	r24, 0x01D9
     e40:	90 91 da 01 	lds	r25, 0x01DA
     e44:	a0 91 db 01 	lds	r26, 0x01DB
     e48:	b0 91 dc 01 	lds	r27, 0x01DC
	unsigned char f = timer0_fract;
     e4c:	30 91 d8 01 	lds	r19, 0x01D8

	m += MILLIS_INC;
	f += FRACT_INC;
     e50:	23 e0       	ldi	r18, 0x03	; 3
     e52:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     e54:	2d 37       	cpi	r18, 0x7D	; 125
     e56:	20 f4       	brcc	.+8      	; 0xe60 <__vector_9+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     e58:	01 96       	adiw	r24, 0x01	; 1
     e5a:	a1 1d       	adc	r26, r1
     e5c:	b1 1d       	adc	r27, r1
     e5e:	05 c0       	rjmp	.+10     	; 0xe6a <__vector_9+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     e60:	26 e8       	ldi	r18, 0x86	; 134
     e62:	23 0f       	add	r18, r19
		m += 1;
     e64:	02 96       	adiw	r24, 0x02	; 2
     e66:	a1 1d       	adc	r26, r1
     e68:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     e6a:	20 93 d8 01 	sts	0x01D8, r18
	timer0_millis = m;
     e6e:	80 93 d9 01 	sts	0x01D9, r24
     e72:	90 93 da 01 	sts	0x01DA, r25
     e76:	a0 93 db 01 	sts	0x01DB, r26
     e7a:	b0 93 dc 01 	sts	0x01DC, r27
	timer0_overflow_count++;
     e7e:	80 91 dd 01 	lds	r24, 0x01DD
     e82:	90 91 de 01 	lds	r25, 0x01DE
     e86:	a0 91 df 01 	lds	r26, 0x01DF
     e8a:	b0 91 e0 01 	lds	r27, 0x01E0
     e8e:	01 96       	adiw	r24, 0x01	; 1
     e90:	a1 1d       	adc	r26, r1
     e92:	b1 1d       	adc	r27, r1
     e94:	80 93 dd 01 	sts	0x01DD, r24
     e98:	90 93 de 01 	sts	0x01DE, r25
     e9c:	a0 93 df 01 	sts	0x01DF, r26
     ea0:	b0 93 e0 01 	sts	0x01E0, r27
}
     ea4:	bf 91       	pop	r27
     ea6:	af 91       	pop	r26
     ea8:	9f 91       	pop	r25
     eaa:	8f 91       	pop	r24
     eac:	3f 91       	pop	r19
     eae:	2f 91       	pop	r18
     eb0:	0f 90       	pop	r0
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	0f 90       	pop	r0
     eb6:	1f 90       	pop	r1
     eb8:	18 95       	reti

00000eba <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     eba:	78 94       	sei
#if defined(__AVR_ATmega128__)
	// CPU specific: different values for the ATmega128
	sbi(TCCR0, CS02);
#elif defined(TCCR0) && defined(CS01) && defined(CS00)
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
     ebc:	83 b7       	in	r24, 0x33	; 51
     ebe:	82 60       	ori	r24, 0x02	; 2
     ec0:	83 bf       	out	0x33, r24	; 51
	sbi(TCCR0, CS00);
     ec2:	83 b7       	in	r24, 0x33	; 51
     ec4:	81 60       	ori	r24, 0x01	; 1
     ec6:	83 bf       	out	0x33, r24	; 51
	#error Timer 0 prescale factor 64 not set correctly
#endif

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
     ec8:	89 b7       	in	r24, 0x39	; 57
     eca:	81 60       	ori	r24, 0x01	; 1
     ecc:	89 bf       	out	0x39, r24	; 57
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     ece:	1e bc       	out	0x2e, r1	; 46

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     ed0:	8e b5       	in	r24, 0x2e	; 46
     ed2:	82 60       	ori	r24, 0x02	; 2
     ed4:	8e bd       	out	0x2e, r24	; 46
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     ed6:	8e b5       	in	r24, 0x2e	; 46
     ed8:	81 60       	ori	r24, 0x01	; 1
     eda:	8e bd       	out	0x2e, r24	; 46
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     edc:	8f b5       	in	r24, 0x2f	; 47
     ede:	81 60       	ori	r24, 0x01	; 1
     ee0:	8f bd       	out	0x2f, r24	; 47
	#warning this needs to be finished
#endif

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
     ee2:	85 b5       	in	r24, 0x25	; 37
     ee4:	84 60       	ori	r24, 0x04	; 4
     ee6:	85 bd       	out	0x25, r24	; 37
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
     ee8:	85 b5       	in	r24, 0x25	; 37
     eea:	80 64       	ori	r24, 0x40	; 64
     eec:	85 bd       	out	0x25, r24	; 37
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     eee:	32 9a       	sbi	0x06, 2	; 6
		sbi(ADCSRA, ADPS1);
     ef0:	31 9a       	sbi	0x06, 1	; 6
		sbi(ADCSRA, ADPS0);
     ef2:	30 9a       	sbi	0x06, 0	; 6
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     ef4:	37 9a       	sbi	0x06, 7	; 6

	// the bootloader connects pins 0 and 1 to the USART; disconnect them
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
     ef6:	1a b8       	out	0x0a, r1	; 10
     ef8:	08 95       	ret

00000efa <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     efa:	84 30       	cpi	r24, 0x04	; 4
     efc:	41 f0       	breq	.+16     	; 0xf0e <turnOffPWM+0x14>
     efe:	86 30       	cpi	r24, 0x06	; 6
     f00:	51 f0       	breq	.+20     	; 0xf16 <turnOffPWM+0x1c>
     f02:	83 30       	cpi	r24, 0x03	; 3
     f04:	59 f4       	brne	.+22     	; 0xf1c <turnOffPWM+0x22>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     f06:	8f b5       	in	r24, 0x2f	; 47
     f08:	8f 77       	andi	r24, 0x7F	; 127
     f0a:	8f bd       	out	0x2f, r24	; 47
     f0c:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f0e:	8f b5       	in	r24, 0x2f	; 47
     f10:	8f 7d       	andi	r24, 0xDF	; 223
     f12:	8f bd       	out	0x2f, r24	; 47
     f14:	08 95       	ret
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
		#endif
		
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
     f16:	85 b5       	in	r24, 0x25	; 37
     f18:	8f 7d       	andi	r24, 0xDF	; 223
     f1a:	85 bd       	out	0x25, r24	; 37
     f1c:	08 95       	ret

00000f1e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	fc 01       	movw	r30, r24
     f26:	e5 5c       	subi	r30, 0xC5	; 197
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     f2c:	fc 01       	movw	r30, r24
     f2e:	e1 5b       	subi	r30, 0xB1	; 177
     f30:	ff 4f       	sbci	r31, 0xFF	; 255
     f32:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     f34:	88 23       	and	r24, r24
     f36:	79 f1       	breq	.+94     	; 0xf96 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	fc 01       	movw	r30, r24
     f40:	e9 58       	subi	r30, 0x89	; 137
     f42:	ff 4f       	sbci	r31, 0xFF	; 255
     f44:	a5 91       	lpm	r26, Z+
     f46:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     f48:	fc 01       	movw	r30, r24
     f4a:	e3 59       	subi	r30, 0x93	; 147
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	c5 91       	lpm	r28, Z+
     f50:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     f52:	61 11       	cpse	r22, r1
     f54:	0c c0       	rjmp	.+24     	; 0xf6e <pinMode+0x50>
		uint8_t oldSREG = SREG;
     f56:	9f b7       	in	r25, 0x3f	; 63
                cli();
     f58:	f8 94       	cli
		*reg &= ~bit;
     f5a:	8c 91       	ld	r24, X
     f5c:	e2 2f       	mov	r30, r18
     f5e:	e0 95       	com	r30
     f60:	8e 23       	and	r24, r30
     f62:	8c 93       	st	X, r24
		*out &= ~bit;
     f64:	28 81       	ld	r18, Y
     f66:	e2 23       	and	r30, r18
     f68:	e8 83       	st	Y, r30
		SREG = oldSREG;
     f6a:	9f bf       	out	0x3f, r25	; 63
     f6c:	14 c0       	rjmp	.+40     	; 0xf96 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
     f6e:	62 30       	cpi	r22, 0x02	; 2
     f70:	61 f4       	brne	.+24     	; 0xf8a <pinMode+0x6c>
		uint8_t oldSREG = SREG;
     f72:	9f b7       	in	r25, 0x3f	; 63
                cli();
     f74:	f8 94       	cli
		*reg &= ~bit;
     f76:	3c 91       	ld	r19, X
     f78:	82 2f       	mov	r24, r18
     f7a:	80 95       	com	r24
     f7c:	83 23       	and	r24, r19
     f7e:	8c 93       	st	X, r24
		*out |= bit;
     f80:	e8 81       	ld	r30, Y
     f82:	e2 2b       	or	r30, r18
     f84:	e8 83       	st	Y, r30
		SREG = oldSREG;
     f86:	9f bf       	out	0x3f, r25	; 63
     f88:	06 c0       	rjmp	.+12     	; 0xf96 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
     f8a:	8f b7       	in	r24, 0x3f	; 63
                cli();
     f8c:	f8 94       	cli
		*reg |= bit;
     f8e:	ec 91       	ld	r30, X
     f90:	e2 2b       	or	r30, r18
     f92:	ec 93       	st	X, r30
		SREG = oldSREG;
     f94:	8f bf       	out	0x3f, r24	; 63
	}
}
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	08 95       	ret

00000f9c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     f9c:	1f 93       	push	r17
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	f9 01       	movw	r30, r18
     fa8:	e9 5d       	subi	r30, 0xD9	; 217
     faa:	ff 4f       	sbci	r31, 0xFF	; 255
     fac:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     fae:	f9 01       	movw	r30, r18
     fb0:	e5 5c       	subi	r30, 0xC5	; 197
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     fb6:	f9 01       	movw	r30, r18
     fb8:	e1 5b       	subi	r30, 0xB1	; 177
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     fbe:	cc 23       	and	r28, r28
     fc0:	c9 f0       	breq	.+50     	; 0xff4 <digitalWrite+0x58>
     fc2:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     fc4:	81 11       	cpse	r24, r1
     fc6:	99 df       	rcall	.-206    	; 0xefa <turnOffPWM>

	out = portOutputRegister(port);
     fc8:	ec 2f       	mov	r30, r28
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	ee 0f       	add	r30, r30
     fce:	ff 1f       	adc	r31, r31
     fd0:	e3 59       	subi	r30, 0x93	; 147
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	a5 91       	lpm	r26, Z+
     fd6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     fd8:	8f b7       	in	r24, 0x3f	; 63
	cli();
     fda:	f8 94       	cli

	if (val == LOW) {
     fdc:	d1 11       	cpse	r29, r1
     fde:	06 c0       	rjmp	.+12     	; 0xfec <digitalWrite+0x50>
		*out &= ~bit;
     fe0:	9c 91       	ld	r25, X
     fe2:	e1 2f       	mov	r30, r17
     fe4:	e0 95       	com	r30
     fe6:	e9 23       	and	r30, r25
     fe8:	ec 93       	st	X, r30
     fea:	03 c0       	rjmp	.+6      	; 0xff2 <digitalWrite+0x56>
	} else {
		*out |= bit;
     fec:	ec 91       	ld	r30, X
     fee:	e1 2b       	or	r30, r17
     ff0:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
     ff2:	8f bf       	out	0x3f, r24	; 63
}
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	08 95       	ret

00000ffc <digitalRead>:

int digitalRead(uint8_t pin)
{
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	f9 01       	movw	r30, r18
    1006:	e9 5d       	subi	r30, 0xD9	; 217
    1008:	ff 4f       	sbci	r31, 0xFF	; 255
    100a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    100c:	f9 01       	movw	r30, r18
    100e:	e5 5c       	subi	r30, 0xC5	; 197
    1010:	ff 4f       	sbci	r31, 0xFF	; 255
    1012:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1014:	f9 01       	movw	r30, r18
    1016:	e1 5b       	subi	r30, 0xB1	; 177
    1018:	ff 4f       	sbci	r31, 0xFF	; 255
    101a:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    101c:	cc 23       	and	r28, r28
    101e:	89 f0       	breq	.+34     	; 0x1042 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1020:	81 11       	cpse	r24, r1
    1022:	6b df       	rcall	.-298    	; 0xefa <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1024:	ec 2f       	mov	r30, r28
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	ee 0f       	add	r30, r30
    102a:	ff 1f       	adc	r31, r31
    102c:	ed 59       	subi	r30, 0x9D	; 157
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	a5 91       	lpm	r26, Z+
    1032:	b4 91       	lpm	r27, Z
    1034:	ec 91       	ld	r30, X
    1036:	ed 23       	and	r30, r29
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	21 f4       	brne	.+8      	; 0x1046 <digitalRead+0x4a>
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <digitalRead+0x4a>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	08 95       	ret

0000104c <__divsf3>:
    104c:	0c d0       	rcall	.+24     	; 0x1066 <__divsf3x>
    104e:	eb c0       	rjmp	.+470    	; 0x1226 <__fp_round>
    1050:	e3 d0       	rcall	.+454    	; 0x1218 <__fp_pscB>
    1052:	40 f0       	brcs	.+16     	; 0x1064 <__divsf3+0x18>
    1054:	da d0       	rcall	.+436    	; 0x120a <__fp_pscA>
    1056:	30 f0       	brcs	.+12     	; 0x1064 <__divsf3+0x18>
    1058:	21 f4       	brne	.+8      	; 0x1062 <__divsf3+0x16>
    105a:	5f 3f       	cpi	r21, 0xFF	; 255
    105c:	19 f0       	breq	.+6      	; 0x1064 <__divsf3+0x18>
    105e:	cc c0       	rjmp	.+408    	; 0x11f8 <__fp_inf>
    1060:	51 11       	cpse	r21, r1
    1062:	15 c1       	rjmp	.+554    	; 0x128e <__fp_szero>
    1064:	cf c0       	rjmp	.+414    	; 0x1204 <__fp_nan>

00001066 <__divsf3x>:
    1066:	f0 d0       	rcall	.+480    	; 0x1248 <__fp_split3>
    1068:	98 f3       	brcs	.-26     	; 0x1050 <__divsf3+0x4>

0000106a <__divsf3_pse>:
    106a:	99 23       	and	r25, r25
    106c:	c9 f3       	breq	.-14     	; 0x1060 <__divsf3+0x14>
    106e:	55 23       	and	r21, r21
    1070:	b1 f3       	breq	.-20     	; 0x105e <__divsf3+0x12>
    1072:	95 1b       	sub	r25, r21
    1074:	55 0b       	sbc	r21, r21
    1076:	bb 27       	eor	r27, r27
    1078:	aa 27       	eor	r26, r26
    107a:	62 17       	cp	r22, r18
    107c:	73 07       	cpc	r23, r19
    107e:	84 07       	cpc	r24, r20
    1080:	38 f0       	brcs	.+14     	; 0x1090 <__divsf3_pse+0x26>
    1082:	9f 5f       	subi	r25, 0xFF	; 255
    1084:	5f 4f       	sbci	r21, 0xFF	; 255
    1086:	22 0f       	add	r18, r18
    1088:	33 1f       	adc	r19, r19
    108a:	44 1f       	adc	r20, r20
    108c:	aa 1f       	adc	r26, r26
    108e:	a9 f3       	breq	.-22     	; 0x107a <__divsf3_pse+0x10>
    1090:	33 d0       	rcall	.+102    	; 0x10f8 <__divsf3_pse+0x8e>
    1092:	0e 2e       	mov	r0, r30
    1094:	3a f0       	brmi	.+14     	; 0x10a4 <__divsf3_pse+0x3a>
    1096:	e0 e8       	ldi	r30, 0x80	; 128
    1098:	30 d0       	rcall	.+96     	; 0x10fa <__divsf3_pse+0x90>
    109a:	91 50       	subi	r25, 0x01	; 1
    109c:	50 40       	sbci	r21, 0x00	; 0
    109e:	e6 95       	lsr	r30
    10a0:	00 1c       	adc	r0, r0
    10a2:	ca f7       	brpl	.-14     	; 0x1096 <__divsf3_pse+0x2c>
    10a4:	29 d0       	rcall	.+82     	; 0x10f8 <__divsf3_pse+0x8e>
    10a6:	fe 2f       	mov	r31, r30
    10a8:	27 d0       	rcall	.+78     	; 0x10f8 <__divsf3_pse+0x8e>
    10aa:	66 0f       	add	r22, r22
    10ac:	77 1f       	adc	r23, r23
    10ae:	88 1f       	adc	r24, r24
    10b0:	bb 1f       	adc	r27, r27
    10b2:	26 17       	cp	r18, r22
    10b4:	37 07       	cpc	r19, r23
    10b6:	48 07       	cpc	r20, r24
    10b8:	ab 07       	cpc	r26, r27
    10ba:	b0 e8       	ldi	r27, 0x80	; 128
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <__divsf3_pse+0x56>
    10be:	bb 0b       	sbc	r27, r27
    10c0:	80 2d       	mov	r24, r0
    10c2:	bf 01       	movw	r22, r30
    10c4:	ff 27       	eor	r31, r31
    10c6:	93 58       	subi	r25, 0x83	; 131
    10c8:	5f 4f       	sbci	r21, 0xFF	; 255
    10ca:	2a f0       	brmi	.+10     	; 0x10d6 <__divsf3_pse+0x6c>
    10cc:	9e 3f       	cpi	r25, 0xFE	; 254
    10ce:	51 05       	cpc	r21, r1
    10d0:	68 f0       	brcs	.+26     	; 0x10ec <__divsf3_pse+0x82>
    10d2:	92 c0       	rjmp	.+292    	; 0x11f8 <__fp_inf>
    10d4:	dc c0       	rjmp	.+440    	; 0x128e <__fp_szero>
    10d6:	5f 3f       	cpi	r21, 0xFF	; 255
    10d8:	ec f3       	brlt	.-6      	; 0x10d4 <__divsf3_pse+0x6a>
    10da:	98 3e       	cpi	r25, 0xE8	; 232
    10dc:	dc f3       	brlt	.-10     	; 0x10d4 <__divsf3_pse+0x6a>
    10de:	86 95       	lsr	r24
    10e0:	77 95       	ror	r23
    10e2:	67 95       	ror	r22
    10e4:	b7 95       	ror	r27
    10e6:	f7 95       	ror	r31
    10e8:	9f 5f       	subi	r25, 0xFF	; 255
    10ea:	c9 f7       	brne	.-14     	; 0x10de <__divsf3_pse+0x74>
    10ec:	88 0f       	add	r24, r24
    10ee:	91 1d       	adc	r25, r1
    10f0:	96 95       	lsr	r25
    10f2:	87 95       	ror	r24
    10f4:	97 f9       	bld	r25, 7
    10f6:	08 95       	ret
    10f8:	e1 e0       	ldi	r30, 0x01	; 1
    10fa:	66 0f       	add	r22, r22
    10fc:	77 1f       	adc	r23, r23
    10fe:	88 1f       	adc	r24, r24
    1100:	bb 1f       	adc	r27, r27
    1102:	62 17       	cp	r22, r18
    1104:	73 07       	cpc	r23, r19
    1106:	84 07       	cpc	r24, r20
    1108:	ba 07       	cpc	r27, r26
    110a:	20 f0       	brcs	.+8      	; 0x1114 <__divsf3_pse+0xaa>
    110c:	62 1b       	sub	r22, r18
    110e:	73 0b       	sbc	r23, r19
    1110:	84 0b       	sbc	r24, r20
    1112:	ba 0b       	sbc	r27, r26
    1114:	ee 1f       	adc	r30, r30
    1116:	88 f7       	brcc	.-30     	; 0x10fa <__divsf3_pse+0x90>
    1118:	e0 95       	com	r30
    111a:	08 95       	ret

0000111c <__fixsfsi>:
    111c:	04 d0       	rcall	.+8      	; 0x1126 <__fixunssfsi>
    111e:	68 94       	set
    1120:	b1 11       	cpse	r27, r1
    1122:	b5 c0       	rjmp	.+362    	; 0x128e <__fp_szero>
    1124:	08 95       	ret

00001126 <__fixunssfsi>:
    1126:	98 d0       	rcall	.+304    	; 0x1258 <__fp_splitA>
    1128:	88 f0       	brcs	.+34     	; 0x114c <__fixunssfsi+0x26>
    112a:	9f 57       	subi	r25, 0x7F	; 127
    112c:	90 f0       	brcs	.+36     	; 0x1152 <__fixunssfsi+0x2c>
    112e:	b9 2f       	mov	r27, r25
    1130:	99 27       	eor	r25, r25
    1132:	b7 51       	subi	r27, 0x17	; 23
    1134:	a0 f0       	brcs	.+40     	; 0x115e <__fixunssfsi+0x38>
    1136:	d1 f0       	breq	.+52     	; 0x116c <__fixunssfsi+0x46>
    1138:	66 0f       	add	r22, r22
    113a:	77 1f       	adc	r23, r23
    113c:	88 1f       	adc	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	1a f0       	brmi	.+6      	; 0x1148 <__fixunssfsi+0x22>
    1142:	ba 95       	dec	r27
    1144:	c9 f7       	brne	.-14     	; 0x1138 <__fixunssfsi+0x12>
    1146:	12 c0       	rjmp	.+36     	; 0x116c <__fixunssfsi+0x46>
    1148:	b1 30       	cpi	r27, 0x01	; 1
    114a:	81 f0       	breq	.+32     	; 0x116c <__fixunssfsi+0x46>
    114c:	9f d0       	rcall	.+318    	; 0x128c <__fp_zero>
    114e:	b1 e0       	ldi	r27, 0x01	; 1
    1150:	08 95       	ret
    1152:	9c c0       	rjmp	.+312    	; 0x128c <__fp_zero>
    1154:	67 2f       	mov	r22, r23
    1156:	78 2f       	mov	r23, r24
    1158:	88 27       	eor	r24, r24
    115a:	b8 5f       	subi	r27, 0xF8	; 248
    115c:	39 f0       	breq	.+14     	; 0x116c <__fixunssfsi+0x46>
    115e:	b9 3f       	cpi	r27, 0xF9	; 249
    1160:	cc f3       	brlt	.-14     	; 0x1154 <__fixunssfsi+0x2e>
    1162:	86 95       	lsr	r24
    1164:	77 95       	ror	r23
    1166:	67 95       	ror	r22
    1168:	b3 95       	inc	r27
    116a:	d9 f7       	brne	.-10     	; 0x1162 <__fixunssfsi+0x3c>
    116c:	3e f4       	brtc	.+14     	; 0x117c <__fixunssfsi+0x56>
    116e:	90 95       	com	r25
    1170:	80 95       	com	r24
    1172:	70 95       	com	r23
    1174:	61 95       	neg	r22
    1176:	7f 4f       	sbci	r23, 0xFF	; 255
    1178:	8f 4f       	sbci	r24, 0xFF	; 255
    117a:	9f 4f       	sbci	r25, 0xFF	; 255
    117c:	08 95       	ret

0000117e <__floatunsisf>:
    117e:	e8 94       	clt
    1180:	09 c0       	rjmp	.+18     	; 0x1194 <__floatsisf+0x12>

00001182 <__floatsisf>:
    1182:	97 fb       	bst	r25, 7
    1184:	3e f4       	brtc	.+14     	; 0x1194 <__floatsisf+0x12>
    1186:	90 95       	com	r25
    1188:	80 95       	com	r24
    118a:	70 95       	com	r23
    118c:	61 95       	neg	r22
    118e:	7f 4f       	sbci	r23, 0xFF	; 255
    1190:	8f 4f       	sbci	r24, 0xFF	; 255
    1192:	9f 4f       	sbci	r25, 0xFF	; 255
    1194:	99 23       	and	r25, r25
    1196:	a9 f0       	breq	.+42     	; 0x11c2 <__floatsisf+0x40>
    1198:	f9 2f       	mov	r31, r25
    119a:	96 e9       	ldi	r25, 0x96	; 150
    119c:	bb 27       	eor	r27, r27
    119e:	93 95       	inc	r25
    11a0:	f6 95       	lsr	r31
    11a2:	87 95       	ror	r24
    11a4:	77 95       	ror	r23
    11a6:	67 95       	ror	r22
    11a8:	b7 95       	ror	r27
    11aa:	f1 11       	cpse	r31, r1
    11ac:	f8 cf       	rjmp	.-16     	; 0x119e <__floatsisf+0x1c>
    11ae:	fa f4       	brpl	.+62     	; 0x11ee <__floatsisf+0x6c>
    11b0:	bb 0f       	add	r27, r27
    11b2:	11 f4       	brne	.+4      	; 0x11b8 <__floatsisf+0x36>
    11b4:	60 ff       	sbrs	r22, 0
    11b6:	1b c0       	rjmp	.+54     	; 0x11ee <__floatsisf+0x6c>
    11b8:	6f 5f       	subi	r22, 0xFF	; 255
    11ba:	7f 4f       	sbci	r23, 0xFF	; 255
    11bc:	8f 4f       	sbci	r24, 0xFF	; 255
    11be:	9f 4f       	sbci	r25, 0xFF	; 255
    11c0:	16 c0       	rjmp	.+44     	; 0x11ee <__floatsisf+0x6c>
    11c2:	88 23       	and	r24, r24
    11c4:	11 f0       	breq	.+4      	; 0x11ca <__floatsisf+0x48>
    11c6:	96 e9       	ldi	r25, 0x96	; 150
    11c8:	11 c0       	rjmp	.+34     	; 0x11ec <__floatsisf+0x6a>
    11ca:	77 23       	and	r23, r23
    11cc:	21 f0       	breq	.+8      	; 0x11d6 <__floatsisf+0x54>
    11ce:	9e e8       	ldi	r25, 0x8E	; 142
    11d0:	87 2f       	mov	r24, r23
    11d2:	76 2f       	mov	r23, r22
    11d4:	05 c0       	rjmp	.+10     	; 0x11e0 <__floatsisf+0x5e>
    11d6:	66 23       	and	r22, r22
    11d8:	71 f0       	breq	.+28     	; 0x11f6 <__floatsisf+0x74>
    11da:	96 e8       	ldi	r25, 0x86	; 134
    11dc:	86 2f       	mov	r24, r22
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	2a f0       	brmi	.+10     	; 0x11ee <__floatsisf+0x6c>
    11e4:	9a 95       	dec	r25
    11e6:	66 0f       	add	r22, r22
    11e8:	77 1f       	adc	r23, r23
    11ea:	88 1f       	adc	r24, r24
    11ec:	da f7       	brpl	.-10     	; 0x11e4 <__floatsisf+0x62>
    11ee:	88 0f       	add	r24, r24
    11f0:	96 95       	lsr	r25
    11f2:	87 95       	ror	r24
    11f4:	97 f9       	bld	r25, 7
    11f6:	08 95       	ret

000011f8 <__fp_inf>:
    11f8:	97 f9       	bld	r25, 7
    11fa:	9f 67       	ori	r25, 0x7F	; 127
    11fc:	80 e8       	ldi	r24, 0x80	; 128
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	08 95       	ret

00001204 <__fp_nan>:
    1204:	9f ef       	ldi	r25, 0xFF	; 255
    1206:	80 ec       	ldi	r24, 0xC0	; 192
    1208:	08 95       	ret

0000120a <__fp_pscA>:
    120a:	00 24       	eor	r0, r0
    120c:	0a 94       	dec	r0
    120e:	16 16       	cp	r1, r22
    1210:	17 06       	cpc	r1, r23
    1212:	18 06       	cpc	r1, r24
    1214:	09 06       	cpc	r0, r25
    1216:	08 95       	ret

00001218 <__fp_pscB>:
    1218:	00 24       	eor	r0, r0
    121a:	0a 94       	dec	r0
    121c:	12 16       	cp	r1, r18
    121e:	13 06       	cpc	r1, r19
    1220:	14 06       	cpc	r1, r20
    1222:	05 06       	cpc	r0, r21
    1224:	08 95       	ret

00001226 <__fp_round>:
    1226:	09 2e       	mov	r0, r25
    1228:	03 94       	inc	r0
    122a:	00 0c       	add	r0, r0
    122c:	11 f4       	brne	.+4      	; 0x1232 <__fp_round+0xc>
    122e:	88 23       	and	r24, r24
    1230:	52 f0       	brmi	.+20     	; 0x1246 <__fp_round+0x20>
    1232:	bb 0f       	add	r27, r27
    1234:	40 f4       	brcc	.+16     	; 0x1246 <__fp_round+0x20>
    1236:	bf 2b       	or	r27, r31
    1238:	11 f4       	brne	.+4      	; 0x123e <__fp_round+0x18>
    123a:	60 ff       	sbrs	r22, 0
    123c:	04 c0       	rjmp	.+8      	; 0x1246 <__fp_round+0x20>
    123e:	6f 5f       	subi	r22, 0xFF	; 255
    1240:	7f 4f       	sbci	r23, 0xFF	; 255
    1242:	8f 4f       	sbci	r24, 0xFF	; 255
    1244:	9f 4f       	sbci	r25, 0xFF	; 255
    1246:	08 95       	ret

00001248 <__fp_split3>:
    1248:	57 fd       	sbrc	r21, 7
    124a:	90 58       	subi	r25, 0x80	; 128
    124c:	44 0f       	add	r20, r20
    124e:	55 1f       	adc	r21, r21
    1250:	59 f0       	breq	.+22     	; 0x1268 <__fp_splitA+0x10>
    1252:	5f 3f       	cpi	r21, 0xFF	; 255
    1254:	71 f0       	breq	.+28     	; 0x1272 <__fp_splitA+0x1a>
    1256:	47 95       	ror	r20

00001258 <__fp_splitA>:
    1258:	88 0f       	add	r24, r24
    125a:	97 fb       	bst	r25, 7
    125c:	99 1f       	adc	r25, r25
    125e:	61 f0       	breq	.+24     	; 0x1278 <__fp_splitA+0x20>
    1260:	9f 3f       	cpi	r25, 0xFF	; 255
    1262:	79 f0       	breq	.+30     	; 0x1282 <__fp_splitA+0x2a>
    1264:	87 95       	ror	r24
    1266:	08 95       	ret
    1268:	12 16       	cp	r1, r18
    126a:	13 06       	cpc	r1, r19
    126c:	14 06       	cpc	r1, r20
    126e:	55 1f       	adc	r21, r21
    1270:	f2 cf       	rjmp	.-28     	; 0x1256 <__fp_split3+0xe>
    1272:	46 95       	lsr	r20
    1274:	f1 df       	rcall	.-30     	; 0x1258 <__fp_splitA>
    1276:	08 c0       	rjmp	.+16     	; 0x1288 <__fp_splitA+0x30>
    1278:	16 16       	cp	r1, r22
    127a:	17 06       	cpc	r1, r23
    127c:	18 06       	cpc	r1, r24
    127e:	99 1f       	adc	r25, r25
    1280:	f1 cf       	rjmp	.-30     	; 0x1264 <__fp_splitA+0xc>
    1282:	86 95       	lsr	r24
    1284:	71 05       	cpc	r23, r1
    1286:	61 05       	cpc	r22, r1
    1288:	08 94       	sec
    128a:	08 95       	ret

0000128c <__fp_zero>:
    128c:	e8 94       	clt

0000128e <__fp_szero>:
    128e:	bb 27       	eor	r27, r27
    1290:	66 27       	eor	r22, r22
    1292:	77 27       	eor	r23, r23
    1294:	cb 01       	movw	r24, r22
    1296:	97 f9       	bld	r25, 7
    1298:	08 95       	ret

0000129a <__mulsf3>:
    129a:	0b d0       	rcall	.+22     	; 0x12b2 <__mulsf3x>
    129c:	c4 cf       	rjmp	.-120    	; 0x1226 <__fp_round>
    129e:	b5 df       	rcall	.-150    	; 0x120a <__fp_pscA>
    12a0:	28 f0       	brcs	.+10     	; 0x12ac <__mulsf3+0x12>
    12a2:	ba df       	rcall	.-140    	; 0x1218 <__fp_pscB>
    12a4:	18 f0       	brcs	.+6      	; 0x12ac <__mulsf3+0x12>
    12a6:	95 23       	and	r25, r21
    12a8:	09 f0       	breq	.+2      	; 0x12ac <__mulsf3+0x12>
    12aa:	a6 cf       	rjmp	.-180    	; 0x11f8 <__fp_inf>
    12ac:	ab cf       	rjmp	.-170    	; 0x1204 <__fp_nan>
    12ae:	11 24       	eor	r1, r1
    12b0:	ee cf       	rjmp	.-36     	; 0x128e <__fp_szero>

000012b2 <__mulsf3x>:
    12b2:	ca df       	rcall	.-108    	; 0x1248 <__fp_split3>
    12b4:	a0 f3       	brcs	.-24     	; 0x129e <__mulsf3+0x4>

000012b6 <__mulsf3_pse>:
    12b6:	95 9f       	mul	r25, r21
    12b8:	d1 f3       	breq	.-12     	; 0x12ae <__mulsf3+0x14>
    12ba:	95 0f       	add	r25, r21
    12bc:	50 e0       	ldi	r21, 0x00	; 0
    12be:	55 1f       	adc	r21, r21
    12c0:	62 9f       	mul	r22, r18
    12c2:	f0 01       	movw	r30, r0
    12c4:	72 9f       	mul	r23, r18
    12c6:	bb 27       	eor	r27, r27
    12c8:	f0 0d       	add	r31, r0
    12ca:	b1 1d       	adc	r27, r1
    12cc:	63 9f       	mul	r22, r19
    12ce:	aa 27       	eor	r26, r26
    12d0:	f0 0d       	add	r31, r0
    12d2:	b1 1d       	adc	r27, r1
    12d4:	aa 1f       	adc	r26, r26
    12d6:	64 9f       	mul	r22, r20
    12d8:	66 27       	eor	r22, r22
    12da:	b0 0d       	add	r27, r0
    12dc:	a1 1d       	adc	r26, r1
    12de:	66 1f       	adc	r22, r22
    12e0:	82 9f       	mul	r24, r18
    12e2:	22 27       	eor	r18, r18
    12e4:	b0 0d       	add	r27, r0
    12e6:	a1 1d       	adc	r26, r1
    12e8:	62 1f       	adc	r22, r18
    12ea:	73 9f       	mul	r23, r19
    12ec:	b0 0d       	add	r27, r0
    12ee:	a1 1d       	adc	r26, r1
    12f0:	62 1f       	adc	r22, r18
    12f2:	83 9f       	mul	r24, r19
    12f4:	a0 0d       	add	r26, r0
    12f6:	61 1d       	adc	r22, r1
    12f8:	22 1f       	adc	r18, r18
    12fa:	74 9f       	mul	r23, r20
    12fc:	33 27       	eor	r19, r19
    12fe:	a0 0d       	add	r26, r0
    1300:	61 1d       	adc	r22, r1
    1302:	23 1f       	adc	r18, r19
    1304:	84 9f       	mul	r24, r20
    1306:	60 0d       	add	r22, r0
    1308:	21 1d       	adc	r18, r1
    130a:	82 2f       	mov	r24, r18
    130c:	76 2f       	mov	r23, r22
    130e:	6a 2f       	mov	r22, r26
    1310:	11 24       	eor	r1, r1
    1312:	9f 57       	subi	r25, 0x7F	; 127
    1314:	50 40       	sbci	r21, 0x00	; 0
    1316:	8a f0       	brmi	.+34     	; 0x133a <__mulsf3_pse+0x84>
    1318:	e1 f0       	breq	.+56     	; 0x1352 <__mulsf3_pse+0x9c>
    131a:	88 23       	and	r24, r24
    131c:	4a f0       	brmi	.+18     	; 0x1330 <__mulsf3_pse+0x7a>
    131e:	ee 0f       	add	r30, r30
    1320:	ff 1f       	adc	r31, r31
    1322:	bb 1f       	adc	r27, r27
    1324:	66 1f       	adc	r22, r22
    1326:	77 1f       	adc	r23, r23
    1328:	88 1f       	adc	r24, r24
    132a:	91 50       	subi	r25, 0x01	; 1
    132c:	50 40       	sbci	r21, 0x00	; 0
    132e:	a9 f7       	brne	.-22     	; 0x131a <__mulsf3_pse+0x64>
    1330:	9e 3f       	cpi	r25, 0xFE	; 254
    1332:	51 05       	cpc	r21, r1
    1334:	70 f0       	brcs	.+28     	; 0x1352 <__mulsf3_pse+0x9c>
    1336:	60 cf       	rjmp	.-320    	; 0x11f8 <__fp_inf>
    1338:	aa cf       	rjmp	.-172    	; 0x128e <__fp_szero>
    133a:	5f 3f       	cpi	r21, 0xFF	; 255
    133c:	ec f3       	brlt	.-6      	; 0x1338 <__mulsf3_pse+0x82>
    133e:	98 3e       	cpi	r25, 0xE8	; 232
    1340:	dc f3       	brlt	.-10     	; 0x1338 <__mulsf3_pse+0x82>
    1342:	86 95       	lsr	r24
    1344:	77 95       	ror	r23
    1346:	67 95       	ror	r22
    1348:	b7 95       	ror	r27
    134a:	f7 95       	ror	r31
    134c:	e7 95       	ror	r30
    134e:	9f 5f       	subi	r25, 0xFF	; 255
    1350:	c1 f7       	brne	.-16     	; 0x1342 <__mulsf3_pse+0x8c>
    1352:	fe 2b       	or	r31, r30
    1354:	88 0f       	add	r24, r24
    1356:	91 1d       	adc	r25, r1
    1358:	96 95       	lsr	r25
    135a:	87 95       	ror	r24
    135c:	97 f9       	bld	r25, 7
    135e:	08 95       	ret

00001360 <__udivmodsi4>:
    1360:	a1 e2       	ldi	r26, 0x21	; 33
    1362:	1a 2e       	mov	r1, r26
    1364:	aa 1b       	sub	r26, r26
    1366:	bb 1b       	sub	r27, r27
    1368:	fd 01       	movw	r30, r26
    136a:	0d c0       	rjmp	.+26     	; 0x1386 <__udivmodsi4_ep>

0000136c <__udivmodsi4_loop>:
    136c:	aa 1f       	adc	r26, r26
    136e:	bb 1f       	adc	r27, r27
    1370:	ee 1f       	adc	r30, r30
    1372:	ff 1f       	adc	r31, r31
    1374:	a2 17       	cp	r26, r18
    1376:	b3 07       	cpc	r27, r19
    1378:	e4 07       	cpc	r30, r20
    137a:	f5 07       	cpc	r31, r21
    137c:	20 f0       	brcs	.+8      	; 0x1386 <__udivmodsi4_ep>
    137e:	a2 1b       	sub	r26, r18
    1380:	b3 0b       	sbc	r27, r19
    1382:	e4 0b       	sbc	r30, r20
    1384:	f5 0b       	sbc	r31, r21

00001386 <__udivmodsi4_ep>:
    1386:	66 1f       	adc	r22, r22
    1388:	77 1f       	adc	r23, r23
    138a:	88 1f       	adc	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	1a 94       	dec	r1
    1390:	69 f7       	brne	.-38     	; 0x136c <__udivmodsi4_loop>
    1392:	60 95       	com	r22
    1394:	70 95       	com	r23
    1396:	80 95       	com	r24
    1398:	90 95       	com	r25
    139a:	9b 01       	movw	r18, r22
    139c:	ac 01       	movw	r20, r24
    139e:	bd 01       	movw	r22, r26
    13a0:	cf 01       	movw	r24, r30
    13a2:	08 95       	ret

000013a4 <__tablejump2__>:
    13a4:	ee 0f       	add	r30, r30
    13a6:	ff 1f       	adc	r31, r31
    13a8:	05 90       	lpm	r0, Z+
    13aa:	f4 91       	lpm	r31, Z
    13ac:	e0 2d       	mov	r30, r0
    13ae:	09 94       	ijmp

000013b0 <_exit>:
    13b0:	f8 94       	cli

000013b2 <__stop_program>:
    13b2:	ff cf       	rjmp	.-2      	; 0x13b2 <__stop_program>
