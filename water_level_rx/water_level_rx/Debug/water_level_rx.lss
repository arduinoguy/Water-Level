
water_level_rx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001414  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  00001414  000014a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000eb  00800108  00800108  00001550  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001580  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e8  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000832e  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a07  00000000  00000000  00009cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001682  00000000  00000000  0000b6d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c48  00000000  00000000  0000cd5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e69  00000000  00000000  0000d9a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004431  00000000  00000000  0000f80d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  00013c3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	42 c0       	rjmp	.+132    	; 0x86 <__ctors_end>
       2:	68 c4       	rjmp	.+2256   	; 0x8d4 <__vector_1>
       4:	94 c4       	rjmp	.+2344   	; 0x92e <__vector_2>
       6:	0b c4       	rjmp	.+2070   	; 0x81e <__vector_3>
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	62 c0       	rjmp	.+196    	; 0xd0 <__bad_interrupt>
       c:	bf c7       	rjmp	.+3966   	; 0xf8c <__vector_6>
       e:	60 c0       	rjmp	.+192    	; 0xd0 <__bad_interrupt>
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	ba c4       	rjmp	.+2420   	; 0x988 <__vector_9>
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	03 c2       	rjmp	.+1030   	; 0x41e <__vector_11>
      18:	3a c2       	rjmp	.+1140   	; 0x48e <__vector_12>
      1a:	5a c0       	rjmp	.+180    	; 0xd0 <__bad_interrupt>
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	58 c0       	rjmp	.+176    	; 0xd0 <__bad_interrupt>
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	56 c0       	rjmp	.+172    	; 0xd0 <__bad_interrupt>
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>

00000026 <__trampolines_end>:
      26:	02 00       	.word	0x0002	; ????

00000027 <digital_pin_to_timer_PGM>:
	...
      2f:	00 03 04 06 00 00 00 00 00 00 00 00                 ............

0000003b <digital_pin_to_bit_mask_PGM>:
      3b:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      4b:	04 08 10 20                                         ... 

0000004f <digital_pin_to_port_PGM>:
      4f:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      5f:	03 03 03 03                                         ....

00000063 <port_to_input_PGM>:
      63:	00 00 00 00 36 00 33 00 30 00                       ....6.3.0.

0000006d <port_to_output_PGM>:
      6d:	00 00 00 00 38 00 35 00 32 00                       ....8.5.2.

00000077 <port_to_mode_PGM>:
      77:	00 00 00 00 37 00 34 00 31 00 00                    ....7.4.1..

00000082 <__ctors_start>:
      82:	75 02       	muls	r23, r21
      84:	df 02       	muls	r29, r31

00000086 <__ctors_end>:
      86:	11 24       	eor	r1, r1
      88:	1f be       	out	0x3f, r1	; 63
      8a:	cf e5       	ldi	r28, 0x5F	; 95
      8c:	d4 e0       	ldi	r29, 0x04	; 4
      8e:	de bf       	out	0x3e, r29	; 62
      90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
      92:	11 e0       	ldi	r17, 0x01	; 1
      94:	a0 e6       	ldi	r26, 0x60	; 96
      96:	b0 e0       	ldi	r27, 0x00	; 0
      98:	e4 e1       	ldi	r30, 0x14	; 20
      9a:	f4 e1       	ldi	r31, 0x14	; 20
      9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
      9e:	05 90       	lpm	r0, Z+
      a0:	0d 92       	st	X+, r0
      a2:	a8 30       	cpi	r26, 0x08	; 8
      a4:	b1 07       	cpc	r27, r17
      a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
      a8:	21 e0       	ldi	r18, 0x01	; 1
      aa:	a8 e0       	ldi	r26, 0x08	; 8
      ac:	b1 e0       	ldi	r27, 0x01	; 1
      ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
      b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
      b2:	a3 3f       	cpi	r26, 0xF3	; 243
      b4:	b2 07       	cpc	r27, r18
      b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>

000000b8 <__do_global_ctors>:
      b8:	10 e0       	ldi	r17, 0x00	; 0
      ba:	c3 e4       	ldi	r28, 0x43	; 67
      bc:	d0 e0       	ldi	r29, 0x00	; 0
      be:	03 c0       	rjmp	.+6      	; 0xc6 <__do_global_ctors+0xe>
      c0:	21 97       	sbiw	r28, 0x01	; 1
      c2:	fe 01       	movw	r30, r28
      c4:	8d d9       	rcall	.-3302   	; 0xfffff3e0 <__eeprom_end+0xff7ef3e0>
      c6:	c1 34       	cpi	r28, 0x41	; 65
      c8:	d1 07       	cpc	r29, r17
      ca:	d1 f7       	brne	.-12     	; 0xc0 <__do_global_ctors+0x8>
      cc:	84 d2       	rcall	.+1288   	; 0x5d6 <main>
      ce:	a0 c9       	rjmp	.-3264   	; 0xfffff410 <__eeprom_end+0xff7ef410>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <setup>:
void loop();


void setup() 
{
	pinMode(MOTOR,1);
      d2:	61 e0       	ldi	r22, 0x01	; 1
      d4:	8b e0       	ldi	r24, 0x0B	; 11
      d6:	e0 d4       	rcall	.+2496   	; 0xa98 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
      d8:	26 e0       	ldi	r18, 0x06	; 6
      da:	40 e8       	ldi	r20, 0x80	; 128
      dc:	55 e2       	ldi	r21, 0x25	; 37
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	88 e0       	ldi	r24, 0x08	; 8
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	32 d1       	rcall	.+612    	; 0x34c <_ZN14HardwareSerial5beginEmh>
	Serial.begin(9600);
	Serial.println("Hi");
      e8:	66 eb       	ldi	r22, 0xB6	; 182
      ea:	70 e0       	ldi	r23, 0x00	; 0
      ec:	88 e0       	ldi	r24, 0x08	; 8
      ee:	91 e0       	ldi	r25, 0x01	; 1
      f0:	d3 d2       	rcall	.+1446   	; 0x698 <_ZN5Print7printlnEPKc>
	vw_set_rx_pin(12);
      f2:	8c e0       	ldi	r24, 0x0C	; 12
      f4:	99 d5       	rcall	.+2866   	; 0xc28 <vw_set_rx_pin>
	vw_setup(2000);
      f6:	80 ed       	ldi	r24, 0xD0	; 208
      f8:	97 e0       	ldi	r25, 0x07	; 7
      fa:	40 d6       	rcall	.+3200   	; 0xd7c <vw_setup>
	vw_rx_start();
      fc:	f0 d6       	rcall	.+3552   	; 0xede <vw_rx_start>
      fe:	08 95       	ret

00000100 <loop>:
 
}

void loop() {
     100:	cf 93       	push	r28
     102:	df 93       	push	r29
     104:	cd b7       	in	r28, 0x3d	; 61
     106:	de b7       	in	r29, 0x3e	; 62
     108:	6f 97       	sbiw	r28, 0x1f	; 31
     10a:	0f b6       	in	r0, 0x3f	; 63
     10c:	f8 94       	cli
     10e:	de bf       	out	0x3e, r29	; 62
     110:	0f be       	out	0x3f, r0	; 63
     112:	cd bf       	out	0x3d, r28	; 61
    uint8_t rec[VW_MAX_MESSAGE_LEN];
    uint8_t msglen=VW_MAX_MESSAGE_LEN;
     114:	8e e1       	ldi	r24, 0x1E	; 30
     116:	8f 8f       	std	Y+31, r24	; 0x1f
	
	vw_wait_rx();
     118:	ec d6       	rcall	.+3544   	; 0xef2 <vw_wait_rx>
	
	if(vw_get_message(rec,&msglen))
     11a:	be 01       	movw	r22, r28
     11c:	61 5e       	subi	r22, 0xE1	; 225
     11e:	7f 4f       	sbci	r23, 0xFF	; 255
     120:	ce 01       	movw	r24, r28
     122:	01 96       	adiw	r24, 0x01	; 1
     124:	13 d7       	rcall	.+3622   	; 0xf4c <vw_get_message>
     126:	88 23       	and	r24, r24
     128:	a9 f1       	breq	.+106    	; 0x194 <loop+0x94>
	{
	   
	   if(strcmp((char*)rec,ADDRESS)==0)
     12a:	69 eb       	ldi	r22, 0xB9	; 185
     12c:	70 e0       	ldi	r23, 0x00	; 0
     12e:	ce 01       	movw	r24, r28
     130:	01 96       	adiw	r24, 0x01	; 1
     132:	65 d9       	rcall	.-3382   	; 0xfffff3fe <__eeprom_end+0xff7ef3fe>
     134:	89 2b       	or	r24, r25
     136:	71 f5       	brne	.+92     	; 0x194 <loop+0x94>
	   {
		   Serial.println((char*)rec);
     138:	be 01       	movw	r22, r28
     13a:	6f 5f       	subi	r22, 0xFF	; 255
     13c:	7f 4f       	sbci	r23, 0xFF	; 255
     13e:	88 e0       	ldi	r24, 0x08	; 8
     140:	91 e0       	ldi	r25, 0x01	; 1
     142:	aa d2       	rcall	.+1364   	; 0x698 <_ZN5Print7printlnEPKc>
		   vw_wait_rx_max(5000);
     144:	68 e8       	ldi	r22, 0x88	; 136
     146:	73 e1       	ldi	r23, 0x13	; 19
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	d7 d6       	rcall	.+3502   	; 0xefc <vw_wait_rx_max>
		   if(vw_get_message(rec,&msglen))
     14e:	be 01       	movw	r22, r28
     150:	61 5e       	subi	r22, 0xE1	; 225
     152:	7f 4f       	sbci	r23, 0xFF	; 255
     154:	ce 01       	movw	r24, r28
     156:	01 96       	adiw	r24, 0x01	; 1
     158:	f9 d6       	rcall	.+3570   	; 0xf4c <vw_get_message>
     15a:	88 23       	and	r24, r24
     15c:	d9 f0       	breq	.+54     	; 0x194 <loop+0x94>
		   {
			   Serial.println((char*)rec);
     15e:	be 01       	movw	r22, r28
     160:	6f 5f       	subi	r22, 0xFF	; 255
     162:	7f 4f       	sbci	r23, 0xFF	; 255
     164:	88 e0       	ldi	r24, 0x08	; 8
     166:	91 e0       	ldi	r25, 0x01	; 1
     168:	97 d2       	rcall	.+1326   	; 0x698 <_ZN5Print7printlnEPKc>
			   
			   if(strcmp((char*)rec,ON)==0)
     16a:	61 ec       	ldi	r22, 0xC1	; 193
     16c:	70 e0       	ldi	r23, 0x00	; 0
     16e:	ce 01       	movw	r24, r28
     170:	01 96       	adiw	r24, 0x01	; 1
     172:	45 d9       	rcall	.-3446   	; 0xfffff3fe <__eeprom_end+0xff7ef3fe>
     174:	89 2b       	or	r24, r25
     176:	21 f4       	brne	.+8      	; 0x180 <loop+0x80>
			   digitalWrite(MOTOR,1);
     178:	61 e0       	ldi	r22, 0x01	; 1
     17a:	8b e0       	ldi	r24, 0x0B	; 11
     17c:	cc d4       	rcall	.+2456   	; 0xb16 <digitalWrite>
     17e:	0a c0       	rjmp	.+20     	; 0x194 <loop+0x94>
			   
			   else if(strcmp((char*)rec,OFF)==0)
     180:	69 ec       	ldi	r22, 0xC9	; 201
     182:	70 e0       	ldi	r23, 0x00	; 0
     184:	ce 01       	movw	r24, r28
     186:	01 96       	adiw	r24, 0x01	; 1
     188:	3a d9       	rcall	.-3468   	; 0xfffff3fe <__eeprom_end+0xff7ef3fe>
     18a:	89 2b       	or	r24, r25
     18c:	19 f4       	brne	.+6      	; 0x194 <loop+0x94>
			        digitalWrite(MOTOR,0);
     18e:	60 e0       	ldi	r22, 0x00	; 0
     190:	8b e0       	ldi	r24, 0x0B	; 11
     192:	c1 d4       	rcall	.+2434   	; 0xb16 <digitalWrite>
	   }
	   
	}
	
	
}
     194:	6f 96       	adiw	r28, 0x1f	; 31
     196:	0f b6       	in	r0, 0x3f	; 63
     198:	f8 94       	cli
     19a:	de bf       	out	0x3e, r29	; 62
     19c:	0f be       	out	0x3f, r0	; 63
     19e:	cd bf       	out	0x3d, r28	; 61
     1a0:	df 91       	pop	r29
     1a2:	cf 91       	pop	r28
     1a4:	08 95       	ret

000001a6 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     1a6:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     1a8:	91 8d       	ldd	r25, Z+25	; 0x19
     1aa:	22 8d       	ldd	r18, Z+26	; 0x1a
     1ac:	89 2f       	mov	r24, r25
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	80 5c       	subi	r24, 0xC0	; 192
     1b2:	9f 4f       	sbci	r25, 0xFF	; 255
     1b4:	82 1b       	sub	r24, r18
     1b6:	91 09       	sbc	r25, r1
}
     1b8:	8f 73       	andi	r24, 0x3F	; 63
     1ba:	99 27       	eor	r25, r25
     1bc:	08 95       	ret

000001be <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     1be:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     1c0:	91 8d       	ldd	r25, Z+25	; 0x19
     1c2:	82 8d       	ldd	r24, Z+26	; 0x1a
     1c4:	98 17       	cp	r25, r24
     1c6:	31 f0       	breq	.+12     	; 0x1d4 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     1c8:	82 8d       	ldd	r24, Z+26	; 0x1a
     1ca:	e8 0f       	add	r30, r24
     1cc:	f1 1d       	adc	r31, r1
     1ce:	85 8d       	ldd	r24, Z+29	; 0x1d
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     1d4:	8f ef       	ldi	r24, 0xFF	; 255
     1d6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     1d8:	08 95       	ret

000001da <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     1da:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     1dc:	91 8d       	ldd	r25, Z+25	; 0x19
     1de:	82 8d       	ldd	r24, Z+26	; 0x1a
     1e0:	98 17       	cp	r25, r24
     1e2:	61 f0       	breq	.+24     	; 0x1fc <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     1e4:	82 8d       	ldd	r24, Z+26	; 0x1a
     1e6:	df 01       	movw	r26, r30
     1e8:	a8 0f       	add	r26, r24
     1ea:	b1 1d       	adc	r27, r1
     1ec:	5d 96       	adiw	r26, 0x1d	; 29
     1ee:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     1f0:	92 8d       	ldd	r25, Z+26	; 0x1a
     1f2:	9f 5f       	subi	r25, 0xFF	; 255
     1f4:	9f 73       	andi	r25, 0x3F	; 63
     1f6:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     1fc:	8f ef       	ldi	r24, 0xFF	; 255
     1fe:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     200:	08 95       	ret

00000202 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     202:	8c e6       	ldi	r24, 0x6C	; 108
     204:	92 e0       	ldi	r25, 0x02	; 2
     206:	89 2b       	or	r24, r25
     208:	39 f0       	breq	.+14     	; 0x218 <_Z14serialEventRunv+0x16>
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	89 2b       	or	r24, r25
     210:	19 f0       	breq	.+6      	; 0x218 <_Z14serialEventRunv+0x16>
     212:	62 d1       	rcall	.+708    	; 0x4d8 <_Z17Serial0_availablev>
     214:	81 11       	cpse	r24, r1
     216:	f4 de       	rcall	.-536    	; 0x0 <__vectors>
     218:	08 95       	ret

0000021a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     21a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     21c:	84 8d       	ldd	r24, Z+28	; 0x1c
     21e:	df 01       	movw	r26, r30
     220:	a8 0f       	add	r26, r24
     222:	b1 1d       	adc	r27, r1
     224:	a3 5a       	subi	r26, 0xA3	; 163
     226:	bf 4f       	sbci	r27, 0xFF	; 255
     228:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     22a:	24 8d       	ldd	r18, Z+28	; 0x1c
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	2f 5f       	subi	r18, 0xFF	; 255
     230:	3f 4f       	sbci	r19, 0xFF	; 255
     232:	2f 73       	andi	r18, 0x3F	; 63
     234:	30 78       	andi	r19, 0x80	; 128
     236:	33 23       	and	r19, r19
     238:	34 f4       	brge	.+12     	; 0x246 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
     23a:	21 50       	subi	r18, 0x01	; 1
     23c:	31 09       	sbc	r19, r1
     23e:	20 6c       	ori	r18, 0xC0	; 192
     240:	3f 6f       	ori	r19, 0xFF	; 255
     242:	2f 5f       	subi	r18, 0xFF	; 255
     244:	3f 4f       	sbci	r19, 0xFF	; 255
     246:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
     248:	a6 89       	ldd	r26, Z+22	; 0x16
     24a:	b7 89       	ldd	r27, Z+23	; 0x17
     24c:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     24e:	a0 89       	ldd	r26, Z+16	; 0x10
     250:	b1 89       	ldd	r27, Z+17	; 0x11
     252:	8c 91       	ld	r24, X
     254:	80 64       	ori	r24, 0x40	; 64
     256:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     258:	93 8d       	ldd	r25, Z+27	; 0x1b
     25a:	84 8d       	ldd	r24, Z+28	; 0x1c
     25c:	98 13       	cpse	r25, r24
     25e:	06 c0       	rjmp	.+12     	; 0x26c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     260:	02 88       	ldd	r0, Z+18	; 0x12
     262:	f3 89       	ldd	r31, Z+19	; 0x13
     264:	e0 2d       	mov	r30, r0
     266:	80 81       	ld	r24, Z
     268:	8f 7d       	andi	r24, 0xDF	; 223
     26a:	80 83       	st	Z, r24
     26c:	08 95       	ret

0000026e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     274:	88 8d       	ldd	r24, Y+24	; 0x18
     276:	81 11       	cpse	r24, r1
     278:	0e c0       	rjmp	.+28     	; 0x296 <_ZN14HardwareSerial5flushEv+0x28>
     27a:	17 c0       	rjmp	.+46     	; 0x2aa <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	07 fc       	sbrc	r0, 7
     280:	0c c0       	rjmp	.+24     	; 0x29a <_ZN14HardwareSerial5flushEv+0x2c>
     282:	90 81       	ld	r25, Z
     284:	95 ff       	sbrs	r25, 5
     286:	09 c0       	rjmp	.+18     	; 0x29a <_ZN14HardwareSerial5flushEv+0x2c>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     288:	a8 89       	ldd	r26, Y+16	; 0x10
     28a:	b9 89       	ldd	r27, Y+17	; 0x11
     28c:	8c 91       	ld	r24, X
     28e:	85 ff       	sbrs	r24, 5
     290:	04 c0       	rjmp	.+8      	; 0x29a <_ZN14HardwareSerial5flushEv+0x2c>
	  _tx_udr_empty_irq();
     292:	ce 01       	movw	r24, r28
     294:	c2 df       	rcall	.-124    	; 0x21a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     296:	ea 89       	ldd	r30, Y+18	; 0x12
     298:	fb 89       	ldd	r31, Y+19	; 0x13
     29a:	90 81       	ld	r25, Z
     29c:	95 fd       	sbrc	r25, 5
     29e:	ee cf       	rjmp	.-36     	; 0x27c <_ZN14HardwareSerial5flushEv+0xe>
     2a0:	a8 89       	ldd	r26, Y+16	; 0x10
     2a2:	b9 89       	ldd	r27, Y+17	; 0x11
     2a4:	8c 91       	ld	r24, X
     2a6:	86 ff       	sbrs	r24, 6
     2a8:	e9 cf       	rjmp	.-46     	; 0x27c <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret

000002b0 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	fc 01       	movw	r30, r24
  _written = true;
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     2be:	93 8d       	ldd	r25, Z+27	; 0x1b
     2c0:	84 8d       	ldd	r24, Z+28	; 0x1c
     2c2:	98 13       	cpse	r25, r24
     2c4:	21 c0       	rjmp	.+66     	; 0x308 <_ZN14HardwareSerial5writeEh+0x58>
     2c6:	a0 89       	ldd	r26, Z+16	; 0x10
     2c8:	b1 89       	ldd	r27, Z+17	; 0x11
     2ca:	8c 91       	ld	r24, X
     2cc:	85 fd       	sbrc	r24, 5
     2ce:	2e c0       	rjmp	.+92     	; 0x32c <_ZN14HardwareSerial5writeEh+0x7c>
     2d0:	1b c0       	rjmp	.+54     	; 0x308 <_ZN14HardwareSerial5writeEh+0x58>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	07 fc       	sbrc	r0, 7
     2d6:	07 c0       	rjmp	.+14     	; 0x2e6 <_ZN14HardwareSerial5writeEh+0x36>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     2d8:	e8 89       	ldd	r30, Y+16	; 0x10
     2da:	f9 89       	ldd	r31, Y+17	; 0x11
     2dc:	80 81       	ld	r24, Z
     2de:	85 ff       	sbrs	r24, 5
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <_ZN14HardwareSerial5writeEh+0x36>
	_tx_udr_empty_irq();
     2e2:	ce 01       	movw	r24, r28
     2e4:	9a df       	rcall	.-204    	; 0x21a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     2e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2e8:	09 17       	cp	r16, r25
     2ea:	99 f3       	breq	.-26     	; 0x2d2 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     2ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2ee:	fe 01       	movw	r30, r28
     2f0:	e8 0f       	add	r30, r24
     2f2:	f1 1d       	adc	r31, r1
     2f4:	e3 5a       	subi	r30, 0xA3	; 163
     2f6:	ff 4f       	sbci	r31, 0xFF	; 255
     2f8:	10 83       	st	Z, r17
  _tx_buffer_head = i;
     2fa:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     2fc:	ea 89       	ldd	r30, Y+18	; 0x12
     2fe:	fb 89       	ldd	r31, Y+19	; 0x13
     300:	80 81       	ld	r24, Z
     302:	80 62       	ori	r24, 0x20	; 32
     304:	80 83       	st	Z, r24
  
  return 1;
     306:	1b c0       	rjmp	.+54     	; 0x33e <_ZN14HardwareSerial5writeEh+0x8e>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     308:	23 8d       	ldd	r18, Z+27	; 0x1b
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	2f 5f       	subi	r18, 0xFF	; 255
     30e:	3f 4f       	sbci	r19, 0xFF	; 255
     310:	2f 73       	andi	r18, 0x3F	; 63
     312:	30 78       	andi	r19, 0x80	; 128
     314:	33 23       	and	r19, r19
     316:	34 f4       	brge	.+12     	; 0x324 <_ZN14HardwareSerial5writeEh+0x74>
     318:	21 50       	subi	r18, 0x01	; 1
     31a:	31 09       	sbc	r19, r1
     31c:	20 6c       	ori	r18, 0xC0	; 192
     31e:	3f 6f       	ori	r19, 0xFF	; 255
     320:	2f 5f       	subi	r18, 0xFF	; 255
     322:	3f 4f       	sbci	r19, 0xFF	; 255
     324:	16 2f       	mov	r17, r22
     326:	ef 01       	movw	r28, r30
     328:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     32a:	dd cf       	rjmp	.-70     	; 0x2e6 <_ZN14HardwareSerial5writeEh+0x36>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     32c:	a6 89       	ldd	r26, Z+22	; 0x16
     32e:	b7 89       	ldd	r27, Z+23	; 0x17
     330:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
     332:	00 88       	ldd	r0, Z+16	; 0x10
     334:	f1 89       	ldd	r31, Z+17	; 0x11
     336:	e0 2d       	mov	r30, r0
     338:	80 81       	ld	r24, Z
     33a:	80 64       	ori	r24, 0x40	; 64
     33c:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	1f 91       	pop	r17
     348:	0f 91       	pop	r16
     34a:	08 95       	ret

0000034c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     34c:	8f 92       	push	r8
     34e:	9f 92       	push	r9
     350:	af 92       	push	r10
     352:	bf 92       	push	r11
     354:	ff 92       	push	r15
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	ec 01       	movw	r28, r24
     360:	4a 01       	movw	r8, r20
     362:	5b 01       	movw	r10, r22
     364:	f2 2e       	mov	r15, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     366:	e8 89       	ldd	r30, Y+16	; 0x10
     368:	f9 89       	ldd	r31, Y+17	; 0x11
     36a:	82 e0       	ldi	r24, 0x02	; 2
     36c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     36e:	41 15       	cp	r20, r1
     370:	51 4e       	sbci	r21, 0xE1	; 225
     372:	61 05       	cpc	r22, r1
     374:	71 05       	cpc	r23, r1
     376:	a9 f0       	breq	.+42     	; 0x3a2 <_ZN14HardwareSerial5beginEmh+0x56>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	79 e0       	ldi	r23, 0x09	; 9
     37c:	8d e3       	ldi	r24, 0x3D	; 61
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	a5 01       	movw	r20, r10
     382:	94 01       	movw	r18, r8
     384:	0b d8       	rcall	.-4074   	; 0xfffff39c <__eeprom_end+0xff7ef39c>
     386:	89 01       	movw	r16, r18
     388:	9a 01       	movw	r18, r20
     38a:	01 50       	subi	r16, 0x01	; 1
     38c:	11 09       	sbc	r17, r1
     38e:	21 09       	sbc	r18, r1
     390:	31 09       	sbc	r19, r1
     392:	36 95       	lsr	r19
     394:	27 95       	ror	r18
     396:	17 95       	ror	r17
     398:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     39a:	01 15       	cp	r16, r1
     39c:	80 e1       	ldi	r24, 0x10	; 16
     39e:	18 07       	cpc	r17, r24
     3a0:	a0 f0       	brcs	.+40     	; 0x3ca <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     3a2:	e8 89       	ldd	r30, Y+16	; 0x10
     3a4:	f9 89       	ldd	r31, Y+17	; 0x11
     3a6:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     3a8:	60 e8       	ldi	r22, 0x80	; 128
     3aa:	74 e8       	ldi	r23, 0x84	; 132
     3ac:	8e e1       	ldi	r24, 0x1E	; 30
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	a5 01       	movw	r20, r10
     3b2:	94 01       	movw	r18, r8
     3b4:	f3 d7       	rcall	.+4070   	; 0x139c <__udivmodsi4>
     3b6:	da 01       	movw	r26, r20
     3b8:	c9 01       	movw	r24, r18
     3ba:	01 97       	sbiw	r24, 0x01	; 1
     3bc:	a1 09       	sbc	r26, r1
     3be:	b1 09       	sbc	r27, r1
     3c0:	b6 95       	lsr	r27
     3c2:	a7 95       	ror	r26
     3c4:	97 95       	ror	r25
     3c6:	87 95       	ror	r24
     3c8:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     3ca:	ec 85       	ldd	r30, Y+12	; 0x0c
     3cc:	fd 85       	ldd	r31, Y+13	; 0x0d
     3ce:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
     3d0:	ee 85       	ldd	r30, Y+14	; 0x0e
     3d2:	ff 85       	ldd	r31, Y+15	; 0x0f
     3d4:	00 83       	st	Z, r16

  _written = false;
     3d6:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
     3d8:	8f 2d       	mov	r24, r15
     3da:	80 68       	ori	r24, 0x80	; 128
#endif
  *_ucsrc = config;
     3dc:	ec 89       	ldd	r30, Y+20	; 0x14
     3de:	fd 89       	ldd	r31, Y+21	; 0x15
     3e0:	80 83       	st	Z, r24
  
  sbi(*_ucsrb, RXEN0);
     3e2:	ea 89       	ldd	r30, Y+18	; 0x12
     3e4:	fb 89       	ldd	r31, Y+19	; 0x13
     3e6:	80 81       	ld	r24, Z
     3e8:	80 61       	ori	r24, 0x10	; 16
     3ea:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     3ec:	ea 89       	ldd	r30, Y+18	; 0x12
     3ee:	fb 89       	ldd	r31, Y+19	; 0x13
     3f0:	80 81       	ld	r24, Z
     3f2:	88 60       	ori	r24, 0x08	; 8
     3f4:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     3f6:	ea 89       	ldd	r30, Y+18	; 0x12
     3f8:	fb 89       	ldd	r31, Y+19	; 0x13
     3fa:	80 81       	ld	r24, Z
     3fc:	80 68       	ori	r24, 0x80	; 128
     3fe:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     400:	ea 89       	ldd	r30, Y+18	; 0x12
     402:	fb 89       	ldd	r31, Y+19	; 0x13
     404:	80 81       	ld	r24, Z
     406:	8f 7d       	andi	r24, 0xDF	; 223
     408:	80 83       	st	Z, r24
}
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	1f 91       	pop	r17
     410:	0f 91       	pop	r16
     412:	ff 90       	pop	r15
     414:	bf 90       	pop	r11
     416:	af 90       	pop	r10
     418:	9f 90       	pop	r9
     41a:	8f 90       	pop	r8
     41c:	08 95       	ret

0000041e <__vector_11>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     41e:	1f 92       	push	r1
     420:	0f 92       	push	r0
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	0f 92       	push	r0
     426:	11 24       	eor	r1, r1
     428:	2f 93       	push	r18
     42a:	8f 93       	push	r24
     42c:	9f 93       	push	r25
     42e:	af 93       	push	r26
     430:	bf 93       	push	r27
     432:	ef 93       	push	r30
     434:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     436:	e0 91 18 01 	lds	r30, 0x0118
     43a:	f0 91 19 01 	lds	r31, 0x0119
     43e:	80 81       	ld	r24, Z
     440:	82 fd       	sbrc	r24, 2
     442:	14 c0       	rjmp	.+40     	; 0x46c <__stack+0xd>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     444:	e8 e0       	ldi	r30, 0x08	; 8
     446:	f1 e0       	ldi	r31, 0x01	; 1
     448:	a6 89       	ldd	r26, Z+22	; 0x16
     44a:	b7 89       	ldd	r27, Z+23	; 0x17
     44c:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     44e:	81 8d       	ldd	r24, Z+25	; 0x19
     450:	8f 5f       	subi	r24, 0xFF	; 255
     452:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     454:	92 8d       	ldd	r25, Z+26	; 0x1a
     456:	89 17       	cp	r24, r25
     458:	71 f0       	breq	.+28     	; 0x476 <__stack+0x17>
      _rx_buffer[_rx_buffer_head] = c;
     45a:	df 01       	movw	r26, r30
     45c:	e1 8d       	ldd	r30, Z+25	; 0x19
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	e8 5f       	subi	r30, 0xF8	; 248
     462:	fe 4f       	sbci	r31, 0xFE	; 254
     464:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
     466:	59 96       	adiw	r26, 0x19	; 25
     468:	8c 93       	st	X, r24
     46a:	05 c0       	rjmp	.+10     	; 0x476 <__stack+0x17>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     46c:	e0 91 1e 01 	lds	r30, 0x011E
     470:	f0 91 1f 01 	lds	r31, 0x011F
     474:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     476:	ff 91       	pop	r31
     478:	ef 91       	pop	r30
     47a:	bf 91       	pop	r27
     47c:	af 91       	pop	r26
     47e:	9f 91       	pop	r25
     480:	8f 91       	pop	r24
     482:	2f 91       	pop	r18
     484:	0f 90       	pop	r0
     486:	0f be       	out	0x3f, r0	; 63
     488:	0f 90       	pop	r0
     48a:	1f 90       	pop	r1
     48c:	18 95       	reti

0000048e <__vector_12>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     48e:	1f 92       	push	r1
     490:	0f 92       	push	r0
     492:	0f b6       	in	r0, 0x3f	; 63
     494:	0f 92       	push	r0
     496:	11 24       	eor	r1, r1
     498:	2f 93       	push	r18
     49a:	3f 93       	push	r19
     49c:	4f 93       	push	r20
     49e:	5f 93       	push	r21
     4a0:	6f 93       	push	r22
     4a2:	7f 93       	push	r23
     4a4:	8f 93       	push	r24
     4a6:	9f 93       	push	r25
     4a8:	af 93       	push	r26
     4aa:	bf 93       	push	r27
     4ac:	ef 93       	push	r30
     4ae:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     4b0:	88 e0       	ldi	r24, 0x08	; 8
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	b2 de       	rcall	.-668    	; 0x21a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     4b6:	ff 91       	pop	r31
     4b8:	ef 91       	pop	r30
     4ba:	bf 91       	pop	r27
     4bc:	af 91       	pop	r26
     4be:	9f 91       	pop	r25
     4c0:	8f 91       	pop	r24
     4c2:	7f 91       	pop	r23
     4c4:	6f 91       	pop	r22
     4c6:	5f 91       	pop	r21
     4c8:	4f 91       	pop	r20
     4ca:	3f 91       	pop	r19
     4cc:	2f 91       	pop	r18
     4ce:	0f 90       	pop	r0
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	0f 90       	pop	r0
     4d4:	1f 90       	pop	r1
     4d6:	18 95       	reti

000004d8 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     4d8:	88 e0       	ldi	r24, 0x08	; 8
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	64 de       	rcall	.-824    	; 0x1a6 <_ZN14HardwareSerial9availableEv>
     4de:	21 e0       	ldi	r18, 0x01	; 1
     4e0:	89 2b       	or	r24, r25
     4e2:	09 f4       	brne	.+2      	; 0x4e6 <_Z17Serial0_availablev+0xe>
     4e4:	20 e0       	ldi	r18, 0x00	; 0
}
     4e6:	82 2f       	mov	r24, r18
     4e8:	08 95       	ret

000004ea <_GLOBAL__sub_I___vector_11>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     4ea:	e8 e0       	ldi	r30, 0x08	; 8
     4ec:	f1 e0       	ldi	r31, 0x01	; 1
     4ee:	13 82       	std	Z+3, r1	; 0x03
     4f0:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     4f2:	88 ee       	ldi	r24, 0xE8	; 232
     4f4:	93 e0       	ldi	r25, 0x03	; 3
     4f6:	a0 e0       	ldi	r26, 0x00	; 0
     4f8:	b0 e0       	ldi	r27, 0x00	; 0
     4fa:	84 83       	std	Z+4, r24	; 0x04
     4fc:	95 83       	std	Z+5, r25	; 0x05
     4fe:	a6 83       	std	Z+6, r26	; 0x06
     500:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     502:	85 ed       	ldi	r24, 0xD5	; 213
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	91 83       	std	Z+1, r25	; 0x01
     508:	80 83       	st	Z, r24
     50a:	80 e4       	ldi	r24, 0x40	; 64
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	95 87       	std	Z+13, r25	; 0x0d
     510:	84 87       	std	Z+12, r24	; 0x0c
     512:	29 e2       	ldi	r18, 0x29	; 41
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	37 87       	std	Z+15, r19	; 0x0f
     518:	26 87       	std	Z+14, r18	; 0x0e
     51a:	2b e2       	ldi	r18, 0x2B	; 43
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	31 8b       	std	Z+17, r19	; 0x11
     520:	20 8b       	std	Z+16, r18	; 0x10
     522:	2a e2       	ldi	r18, 0x2A	; 42
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	33 8b       	std	Z+19, r19	; 0x13
     528:	22 8b       	std	Z+18, r18	; 0x12
     52a:	95 8b       	std	Z+21, r25	; 0x15
     52c:	84 8b       	std	Z+20, r24	; 0x14
     52e:	8c e2       	ldi	r24, 0x2C	; 44
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	97 8b       	std	Z+23, r25	; 0x17
     534:	86 8b       	std	Z+22, r24	; 0x16
     536:	11 8e       	std	Z+25, r1	; 0x19
     538:	12 8e       	std	Z+26, r1	; 0x1a
     53a:	13 8e       	std	Z+27, r1	; 0x1b
     53c:	14 8e       	std	Z+28, r1	; 0x1c
     53e:	08 95       	ret

00000540 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
     540:	8f 92       	push	r8
     542:	9f 92       	push	r9
     544:	af 92       	push	r10
     546:	bf 92       	push	r11
     548:	cf 92       	push	r12
     54a:	df 92       	push	r13
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	0f 93       	push	r16
     552:	1f 93       	push	r17
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	5c 01       	movw	r10, r24
     55a:	7b 01       	movw	r14, r22
     55c:	4c 01       	movw	r8, r24
     55e:	82 e0       	ldi	r24, 0x02	; 2
     560:	88 0e       	add	r8, r24
     562:	91 1c       	adc	r9, r1
     564:	65 01       	movw	r12, r10
     566:	e5 e0       	ldi	r30, 0x05	; 5
     568:	ce 0e       	add	r12, r30
     56a:	d1 1c       	adc	r13, r1
    size_t n = 0;
     56c:	00 e0       	ldi	r16, 0x00	; 0
     56e:	10 e0       	ldi	r17, 0x00	; 0
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
     570:	f4 01       	movw	r30, r8
     572:	61 91       	ld	r22, Z+
     574:	4f 01       	movw	r8, r30
     576:	4a e0       	ldi	r20, 0x0A	; 10
     578:	50 e0       	ldi	r21, 0x00	; 0
     57a:	c7 01       	movw	r24, r14
     57c:	1d d1       	rcall	.+570    	; 0x7b8 <_ZN5Print5printEhi>
     57e:	ec 01       	movw	r28, r24
        n += p.print('.');
     580:	6e e2       	ldi	r22, 0x2E	; 46
     582:	c7 01       	movw	r24, r14
     584:	75 d0       	rcall	.+234    	; 0x670 <_ZN5Print5printEc>
     586:	8c 0f       	add	r24, r28
     588:	9d 1f       	adc	r25, r29
     58a:	08 0f       	add	r16, r24
     58c:	19 1f       	adc	r17, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
     58e:	8c 14       	cp	r8, r12
     590:	9d 04       	cpc	r9, r13
     592:	71 f7       	brne	.-36     	; 0x570 <_ZNK9IPAddress7printToER5Print+0x30>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
     594:	4a e0       	ldi	r20, 0x0A	; 10
     596:	50 e0       	ldi	r21, 0x00	; 0
     598:	f5 01       	movw	r30, r10
     59a:	65 81       	ldd	r22, Z+5	; 0x05
     59c:	c7 01       	movw	r24, r14
     59e:	0c d1       	rcall	.+536    	; 0x7b8 <_ZN5Print5printEhi>
    return n;
}
     5a0:	80 0f       	add	r24, r16
     5a2:	91 1f       	adc	r25, r17
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	ff 90       	pop	r15
     5ae:	ef 90       	pop	r14
     5b0:	df 90       	pop	r13
     5b2:	cf 90       	pop	r12
     5b4:	bf 90       	pop	r11
     5b6:	af 90       	pop	r10
     5b8:	9f 90       	pop	r9
     5ba:	8f 90       	pop	r8
     5bc:	08 95       	ret

000005be <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     5be:	e5 ea       	ldi	r30, 0xA5	; 165
     5c0:	f1 e0       	ldi	r31, 0x01	; 1
     5c2:	85 ee       	ldi	r24, 0xE5	; 229
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	91 83       	std	Z+1, r25	; 0x01
     5c8:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
     5ca:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
     5cc:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
     5ce:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
     5d0:	15 82       	std	Z+5, r1	; 0x05
     5d2:	08 95       	ret

000005d4 <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     5d4:	08 95       	ret

000005d6 <main>:

int main(void)
{
	init();
     5d6:	2e d2       	rcall	.+1116   	; 0xa34 <init>

	initVariant();
     5d8:	fd df       	rcall	.-6      	; 0x5d4 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     5da:	7b dd       	rcall	.-1290   	; 0xd2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     5dc:	c1 e0       	ldi	r28, 0x01	; 1
     5de:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
     5e0:	8f dd       	rcall	.-1250   	; 0x100 <loop>
		if (serialEventRun) serialEventRun();
     5e2:	20 97       	sbiw	r28, 0x00	; 0
     5e4:	e9 f3       	breq	.-6      	; 0x5e0 <main+0xa>
     5e6:	0d de       	rcall	.-998    	; 0x202 <_Z14serialEventRunv>
     5e8:	fb cf       	rjmp	.-10     	; 0x5e0 <main+0xa>

000005ea <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     5ea:	cf 92       	push	r12
     5ec:	df 92       	push	r13
     5ee:	ef 92       	push	r14
     5f0:	ff 92       	push	r15
     5f2:	0f 93       	push	r16
     5f4:	1f 93       	push	r17
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
  size_t n = 0;
  while (size--) {
     5fa:	41 15       	cp	r20, r1
     5fc:	51 05       	cpc	r21, r1
     5fe:	b1 f0       	breq	.+44     	; 0x62c <_ZN5Print5writeEPKhj+0x42>
     600:	8c 01       	movw	r16, r24
     602:	e6 2e       	mov	r14, r22
     604:	f7 2e       	mov	r15, r23
     606:	ea 01       	movw	r28, r20
     608:	c1 2c       	mov	r12, r1
     60a:	d1 2c       	mov	r13, r1
    n += write(*buffer++);
     60c:	d7 01       	movw	r26, r14
     60e:	6d 91       	ld	r22, X+
     610:	7d 01       	movw	r14, r26
     612:	d8 01       	movw	r26, r16
     614:	ed 91       	ld	r30, X+
     616:	fc 91       	ld	r31, X
     618:	01 90       	ld	r0, Z+
     61a:	f0 81       	ld	r31, Z
     61c:	e0 2d       	mov	r30, r0
     61e:	c8 01       	movw	r24, r16
     620:	09 95       	icall
     622:	c8 0e       	add	r12, r24
     624:	d9 1e       	adc	r13, r25
     626:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     628:	89 f7       	brne	.-30     	; 0x60c <_ZN5Print5writeEPKhj+0x22>
     62a:	02 c0       	rjmp	.+4      	; 0x630 <_ZN5Print5writeEPKhj+0x46>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
     62c:	c1 2c       	mov	r12, r1
     62e:	d1 2c       	mov	r13, r1
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
     630:	c6 01       	movw	r24, r12
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	ff 90       	pop	r15
     63c:	ef 90       	pop	r14
     63e:	df 90       	pop	r13
     640:	cf 90       	pop	r12
     642:	08 95       	ret

00000644 <_ZN5Print5printEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     644:	61 15       	cp	r22, r1
     646:	71 05       	cpc	r23, r1
     648:	81 f0       	breq	.+32     	; 0x66a <_ZN5Print5printEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
     64a:	fb 01       	movw	r30, r22
     64c:	01 90       	ld	r0, Z+
     64e:	00 20       	and	r0, r0
     650:	e9 f7       	brne	.-6      	; 0x64c <_ZN5Print5printEPKc+0x8>
     652:	31 97       	sbiw	r30, 0x01	; 1
     654:	af 01       	movw	r20, r30
     656:	46 1b       	sub	r20, r22
     658:	57 0b       	sbc	r21, r23
     65a:	dc 01       	movw	r26, r24
     65c:	ed 91       	ld	r30, X+
     65e:	fc 91       	ld	r31, X
     660:	02 80       	ldd	r0, Z+2	; 0x02
     662:	f3 81       	ldd	r31, Z+3	; 0x03
     664:	e0 2d       	mov	r30, r0
     666:	09 95       	icall
     668:	08 95       	ret
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	90 e0       	ldi	r25, 0x00	; 0
}

size_t Print::print(const char str[])
{
  return write(str);
}
     66e:	08 95       	ret

00000670 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
     670:	dc 01       	movw	r26, r24
     672:	ed 91       	ld	r30, X+
     674:	fc 91       	ld	r31, X
     676:	01 90       	ld	r0, Z+
     678:	f0 81       	ld	r31, Z
     67a:	e0 2d       	mov	r30, r0
     67c:	09 95       	icall
}
     67e:	08 95       	ret

00000680 <_ZN5Print7printlnEv>:
      return write((const uint8_t *)str, strlen(str));
     680:	dc 01       	movw	r26, r24
     682:	ed 91       	ld	r30, X+
     684:	fc 91       	ld	r31, X
     686:	02 80       	ldd	r0, Z+2	; 0x02
     688:	f3 81       	ldd	r31, Z+3	; 0x03
     68a:	e0 2d       	mov	r30, r0
     68c:	42 e0       	ldi	r20, 0x02	; 2
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	67 ee       	ldi	r22, 0xE7	; 231
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	09 95       	icall
}

size_t Print::println(void)
{
  return write("\r\n");
}
     696:	08 95       	ret

00000698 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     698:	0f 93       	push	r16
     69a:	1f 93       	push	r17
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	ec 01       	movw	r28, r24
  size_t n = print(c);
     6a2:	d0 df       	rcall	.-96     	; 0x644 <_ZN5Print5printEPKc>
     6a4:	8c 01       	movw	r16, r24
  n += println();
     6a6:	ce 01       	movw	r24, r28
     6a8:	eb df       	rcall	.-42     	; 0x680 <_ZN5Print7printlnEv>
  return n;
}
     6aa:	80 0f       	add	r24, r16
     6ac:	91 1f       	adc	r25, r17
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	0f 91       	pop	r16
     6b6:	08 95       	ret

000006b8 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     6b8:	4f 92       	push	r4
     6ba:	5f 92       	push	r5
     6bc:	6f 92       	push	r6
     6be:	7f 92       	push	r7
     6c0:	9f 92       	push	r9
     6c2:	af 92       	push	r10
     6c4:	bf 92       	push	r11
     6c6:	cf 92       	push	r12
     6c8:	df 92       	push	r13
     6ca:	ef 92       	push	r14
     6cc:	ff 92       	push	r15
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	a1 97       	sbiw	r28, 0x21	; 33
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	cd bf       	out	0x3d, r28	; 61
     6e6:	5c 01       	movw	r10, r24
     6e8:	6a 01       	movw	r12, r20
     6ea:	7b 01       	movw	r14, r22
     6ec:	92 2e       	mov	r9, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     6ee:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	82 17       	cp	r24, r18
     6f4:	20 f0       	brcs	.+8      	; 0x6fe <_ZN5Print11printNumberEmh+0x46>
     6f6:	0f 2e       	mov	r0, r31
     6f8:	fa e0       	ldi	r31, 0x0A	; 10
     6fa:	9f 2e       	mov	r9, r31
     6fc:	f0 2d       	mov	r31, r0
     6fe:	8e 01       	movw	r16, r28
     700:	0f 5d       	subi	r16, 0xDF	; 223
     702:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
     704:	49 2c       	mov	r4, r9
     706:	51 2c       	mov	r5, r1
     708:	61 2c       	mov	r6, r1
     70a:	71 2c       	mov	r7, r1
     70c:	c7 01       	movw	r24, r14
     70e:	b6 01       	movw	r22, r12
     710:	a3 01       	movw	r20, r6
     712:	92 01       	movw	r18, r4
     714:	43 d6       	rcall	.+3206   	; 0x139c <__udivmodsi4>
    char c = m - base * n;
     716:	8c 2d       	mov	r24, r12
     718:	92 9e       	mul	r9, r18
     71a:	80 19       	sub	r24, r0
     71c:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     71e:	01 50       	subi	r16, 0x01	; 1
     720:	11 09       	sbc	r17, r1
     722:	8a 30       	cpi	r24, 0x0A	; 10
     724:	10 f4       	brcc	.+4      	; 0x72a <_ZN5Print11printNumberEmh+0x72>
     726:	80 5d       	subi	r24, 0xD0	; 208
     728:	01 c0       	rjmp	.+2      	; 0x72c <_ZN5Print11printNumberEmh+0x74>
     72a:	89 5c       	subi	r24, 0xC9	; 201
     72c:	d8 01       	movw	r26, r16
     72e:	8c 93       	st	X, r24
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
     730:	c2 2e       	mov	r12, r18
     732:	d3 2e       	mov	r13, r19
     734:	e4 2e       	mov	r14, r20
     736:	f5 2e       	mov	r15, r21
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     738:	c1 14       	cp	r12, r1
     73a:	d1 04       	cpc	r13, r1
     73c:	e1 04       	cpc	r14, r1
     73e:	f1 04       	cpc	r15, r1
     740:	29 f7       	brne	.-54     	; 0x70c <_ZN5Print11printNumberEmh+0x54>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     742:	01 15       	cp	r16, r1
     744:	11 05       	cpc	r17, r1
     746:	91 f0       	breq	.+36     	; 0x76c <_ZN5Print11printNumberEmh+0xb4>
      return write((const uint8_t *)str, strlen(str));
     748:	f8 01       	movw	r30, r16
     74a:	01 90       	ld	r0, Z+
     74c:	00 20       	and	r0, r0
     74e:	e9 f7       	brne	.-6      	; 0x74a <_ZN5Print11printNumberEmh+0x92>
     750:	31 97       	sbiw	r30, 0x01	; 1
     752:	af 01       	movw	r20, r30
     754:	40 1b       	sub	r20, r16
     756:	51 0b       	sbc	r21, r17
     758:	d5 01       	movw	r26, r10
     75a:	ed 91       	ld	r30, X+
     75c:	fc 91       	ld	r31, X
     75e:	02 80       	ldd	r0, Z+2	; 0x02
     760:	f3 81       	ldd	r31, Z+3	; 0x03
     762:	e0 2d       	mov	r30, r0
     764:	b8 01       	movw	r22, r16
     766:	c5 01       	movw	r24, r10
     768:	09 95       	icall
     76a:	02 c0       	rjmp	.+4      	; 0x770 <_ZN5Print11printNumberEmh+0xb8>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
     770:	a1 96       	adiw	r28, 0x21	; 33
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	f8 94       	cli
     776:	de bf       	out	0x3e, r29	; 62
     778:	0f be       	out	0x3f, r0	; 63
     77a:	cd bf       	out	0x3d, r28	; 61
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	ff 90       	pop	r15
     786:	ef 90       	pop	r14
     788:	df 90       	pop	r13
     78a:	cf 90       	pop	r12
     78c:	bf 90       	pop	r11
     78e:	af 90       	pop	r10
     790:	9f 90       	pop	r9
     792:	7f 90       	pop	r7
     794:	6f 90       	pop	r6
     796:	5f 90       	pop	r5
     798:	4f 90       	pop	r4
     79a:	08 95       	ret

0000079c <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     79c:	21 15       	cp	r18, r1
     79e:	31 05       	cpc	r19, r1
     7a0:	49 f4       	brne	.+18     	; 0x7b4 <_ZN5Print5printEmi+0x18>
     7a2:	dc 01       	movw	r26, r24
     7a4:	ed 91       	ld	r30, X+
     7a6:	fc 91       	ld	r31, X
     7a8:	01 90       	ld	r0, Z+
     7aa:	f0 81       	ld	r31, Z
     7ac:	e0 2d       	mov	r30, r0
     7ae:	64 2f       	mov	r22, r20
     7b0:	09 95       	icall
     7b2:	08 95       	ret
  else return printNumber(n, base);
     7b4:	81 df       	rcall	.-254    	; 0x6b8 <_ZN5Print11printNumberEmh>
}
     7b6:	08 95       	ret

000007b8 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     7b8:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     7ba:	46 2f       	mov	r20, r22
     7bc:	50 e0       	ldi	r21, 0x00	; 0
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	ec df       	rcall	.-40     	; 0x79c <_ZN5Print5printEmi>
}
     7c4:	08 95       	ret

000007c6 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
     7c6:	81 30       	cpi	r24, 0x01	; 1
     7c8:	31 f0       	breq	.+12     	; 0x7d6 <_Z12disableTimerh+0x10>
     7ca:	18 f0       	brcs	.+6      	; 0x7d2 <_Z12disableTimerh+0xc>
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	39 f0       	breq	.+14     	; 0x7de <_Z12disableTimerh+0x18>
     7d0:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
     7d2:	19 be       	out	0x39, r1	; 57
      #endif
      break;
     7d4:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     7d6:	89 b7       	in	r24, 0x39	; 57
     7d8:	8f 7e       	andi	r24, 0xEF	; 239
     7da:	89 bf       	out	0x39, r24	; 57
      break;
     7dc:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     7de:	89 b7       	in	r24, 0x39	; 57
     7e0:	8f 77       	andi	r24, 0x7F	; 127
     7e2:	89 bf       	out	0x39, r24	; 57
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     7e4:	80 e4       	ldi	r24, 0x40	; 64
     7e6:	85 bd       	out	0x25, r24	; 37
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
     7e8:	85 b5       	in	r24, 0x25	; 37
     7ea:	88 7f       	andi	r24, 0xF8	; 248
     7ec:	84 60       	ori	r24, 0x04	; 4
     7ee:	85 bd       	out	0x25, r24	; 37
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     7f0:	13 bc       	out	0x23, r1	; 35
     7f2:	08 95       	ret

000007f4 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
     7f4:	cf 93       	push	r28
     7f6:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     7f8:	80 91 60 00 	lds	r24, 0x0060
     7fc:	8c 13       	cpse	r24, r28
     7fe:	08 c0       	rjmp	.+16     	; 0x810 <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     800:	e6 e2       	ldi	r30, 0x26	; 38
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	e4 91       	lpm	r30, Z
     806:	8e 2f       	mov	r24, r30
      tone_pins[i] = 255;
     808:	9f ef       	ldi	r25, 0xFF	; 255
     80a:	90 93 60 00 	sts	0x0060, r25
     80e:	01 c0       	rjmp	.+2      	; 0x812 <_Z6noToneh+0x1e>
     810:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
     812:	d9 df       	rcall	.-78     	; 0x7c6 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	8c 2f       	mov	r24, r28
     818:	7e d1       	rcall	.+764    	; 0xb16 <digitalWrite>
}
     81a:	cf 91       	pop	r28
     81c:	08 95       	ret

0000081e <__vector_3>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
     81e:	1f 92       	push	r1
     820:	0f 92       	push	r0
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	0f 92       	push	r0
     826:	11 24       	eor	r1, r1
     828:	2f 93       	push	r18
     82a:	3f 93       	push	r19
     82c:	4f 93       	push	r20
     82e:	5f 93       	push	r21
     830:	6f 93       	push	r22
     832:	7f 93       	push	r23
     834:	8f 93       	push	r24
     836:	9f 93       	push	r25
     838:	af 93       	push	r26
     83a:	bf 93       	push	r27
     83c:	ef 93       	push	r30
     83e:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
     840:	80 91 ae 01 	lds	r24, 0x01AE
     844:	90 91 af 01 	lds	r25, 0x01AF
     848:	a0 91 b0 01 	lds	r26, 0x01B0
     84c:	b0 91 b1 01 	lds	r27, 0x01B1
     850:	89 2b       	or	r24, r25
     852:	8a 2b       	or	r24, r26
     854:	8b 2b       	or	r24, r27
     856:	51 f1       	breq	.+84     	; 0x8ac <__vector_3+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
     858:	80 91 ab 01 	lds	r24, 0x01AB
     85c:	e0 91 ac 01 	lds	r30, 0x01AC
     860:	f0 91 ad 01 	lds	r31, 0x01AD
     864:	90 81       	ld	r25, Z
     866:	89 27       	eor	r24, r25
     868:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
     86a:	80 91 ae 01 	lds	r24, 0x01AE
     86e:	90 91 af 01 	lds	r25, 0x01AF
     872:	a0 91 b0 01 	lds	r26, 0x01B0
     876:	b0 91 b1 01 	lds	r27, 0x01B1
     87a:	18 16       	cp	r1, r24
     87c:	19 06       	cpc	r1, r25
     87e:	1a 06       	cpc	r1, r26
     880:	1b 06       	cpc	r1, r27
     882:	bc f4       	brge	.+46     	; 0x8b2 <__vector_3+0x94>
      timer2_toggle_count--;
     884:	80 91 ae 01 	lds	r24, 0x01AE
     888:	90 91 af 01 	lds	r25, 0x01AF
     88c:	a0 91 b0 01 	lds	r26, 0x01B0
     890:	b0 91 b1 01 	lds	r27, 0x01B1
     894:	01 97       	sbiw	r24, 0x01	; 1
     896:	a1 09       	sbc	r26, r1
     898:	b1 09       	sbc	r27, r1
     89a:	80 93 ae 01 	sts	0x01AE, r24
     89e:	90 93 af 01 	sts	0x01AF, r25
     8a2:	a0 93 b0 01 	sts	0x01B0, r26
     8a6:	b0 93 b1 01 	sts	0x01B1, r27
     8aa:	03 c0       	rjmp	.+6      	; 0x8b2 <__vector_3+0x94>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
     8ac:	80 91 60 00 	lds	r24, 0x0060
     8b0:	a1 df       	rcall	.-190    	; 0x7f4 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
     8b2:	ff 91       	pop	r31
     8b4:	ef 91       	pop	r30
     8b6:	bf 91       	pop	r27
     8b8:	af 91       	pop	r26
     8ba:	9f 91       	pop	r25
     8bc:	8f 91       	pop	r24
     8be:	7f 91       	pop	r23
     8c0:	6f 91       	pop	r22
     8c2:	5f 91       	pop	r21
     8c4:	4f 91       	pop	r20
     8c6:	3f 91       	pop	r19
     8c8:	2f 91       	pop	r18
     8ca:	0f 90       	pop	r0
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	0f 90       	pop	r0
     8d0:	1f 90       	pop	r1
     8d2:	18 95       	reti

000008d4 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
     8d4:	1f 92       	push	r1
     8d6:	0f 92       	push	r0
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	0f 92       	push	r0
     8dc:	11 24       	eor	r1, r1
     8de:	2f 93       	push	r18
     8e0:	3f 93       	push	r19
     8e2:	4f 93       	push	r20
     8e4:	5f 93       	push	r21
     8e6:	6f 93       	push	r22
     8e8:	7f 93       	push	r23
     8ea:	8f 93       	push	r24
     8ec:	9f 93       	push	r25
     8ee:	af 93       	push	r26
     8f0:	bf 93       	push	r27
     8f2:	ef 93       	push	r30
     8f4:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
     8f6:	80 91 b2 01 	lds	r24, 0x01B2
     8fa:	90 91 b3 01 	lds	r25, 0x01B3
     8fe:	89 2b       	or	r24, r25
     900:	29 f0       	breq	.+10     	; 0x90c <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
     902:	e0 91 b2 01 	lds	r30, 0x01B2
     906:	f0 91 b3 01 	lds	r31, 0x01B3
     90a:	09 95       	icall
}
     90c:	ff 91       	pop	r31
     90e:	ef 91       	pop	r30
     910:	bf 91       	pop	r27
     912:	af 91       	pop	r26
     914:	9f 91       	pop	r25
     916:	8f 91       	pop	r24
     918:	7f 91       	pop	r23
     91a:	6f 91       	pop	r22
     91c:	5f 91       	pop	r21
     91e:	4f 91       	pop	r20
     920:	3f 91       	pop	r19
     922:	2f 91       	pop	r18
     924:	0f 90       	pop	r0
     926:	0f be       	out	0x3f, r0	; 63
     928:	0f 90       	pop	r0
     92a:	1f 90       	pop	r1
     92c:	18 95       	reti

0000092e <__vector_2>:

ISR(INT1_vect) {
     92e:	1f 92       	push	r1
     930:	0f 92       	push	r0
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	0f 92       	push	r0
     936:	11 24       	eor	r1, r1
     938:	2f 93       	push	r18
     93a:	3f 93       	push	r19
     93c:	4f 93       	push	r20
     93e:	5f 93       	push	r21
     940:	6f 93       	push	r22
     942:	7f 93       	push	r23
     944:	8f 93       	push	r24
     946:	9f 93       	push	r25
     948:	af 93       	push	r26
     94a:	bf 93       	push	r27
     94c:	ef 93       	push	r30
     94e:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
     950:	80 91 b4 01 	lds	r24, 0x01B4
     954:	90 91 b5 01 	lds	r25, 0x01B5
     958:	89 2b       	or	r24, r25
     95a:	29 f0       	breq	.+10     	; 0x966 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
     95c:	e0 91 b4 01 	lds	r30, 0x01B4
     960:	f0 91 b5 01 	lds	r31, 0x01B5
     964:	09 95       	icall
}
     966:	ff 91       	pop	r31
     968:	ef 91       	pop	r30
     96a:	bf 91       	pop	r27
     96c:	af 91       	pop	r26
     96e:	9f 91       	pop	r25
     970:	8f 91       	pop	r24
     972:	7f 91       	pop	r23
     974:	6f 91       	pop	r22
     976:	5f 91       	pop	r21
     978:	4f 91       	pop	r20
     97a:	3f 91       	pop	r19
     97c:	2f 91       	pop	r18
     97e:	0f 90       	pop	r0
     980:	0f be       	out	0x3f, r0	; 63
     982:	0f 90       	pop	r0
     984:	1f 90       	pop	r1
     986:	18 95       	reti

00000988 <__vector_9>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)|| defined(__AVR_ATtiny13__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     988:	1f 92       	push	r1
     98a:	0f 92       	push	r0
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	0f 92       	push	r0
     990:	11 24       	eor	r1, r1
     992:	2f 93       	push	r18
     994:	3f 93       	push	r19
     996:	8f 93       	push	r24
     998:	9f 93       	push	r25
     99a:	af 93       	push	r26
     99c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     99e:	80 91 b7 01 	lds	r24, 0x01B7
     9a2:	90 91 b8 01 	lds	r25, 0x01B8
     9a6:	a0 91 b9 01 	lds	r26, 0x01B9
     9aa:	b0 91 ba 01 	lds	r27, 0x01BA
	unsigned char f = timer0_fract;
     9ae:	30 91 b6 01 	lds	r19, 0x01B6

	m += MILLIS_INC;
	f += FRACT_INC;
     9b2:	23 e0       	ldi	r18, 0x03	; 3
     9b4:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
     9b6:	2d 37       	cpi	r18, 0x7D	; 125
     9b8:	20 f4       	brcc	.+8      	; 0x9c2 <__vector_9+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	a1 1d       	adc	r26, r1
     9be:	b1 1d       	adc	r27, r1
     9c0:	05 c0       	rjmp	.+10     	; 0x9cc <__vector_9+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     9c2:	26 e8       	ldi	r18, 0x86	; 134
     9c4:	23 0f       	add	r18, r19
		m += 1;
     9c6:	02 96       	adiw	r24, 0x02	; 2
     9c8:	a1 1d       	adc	r26, r1
     9ca:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     9cc:	20 93 b6 01 	sts	0x01B6, r18
	timer0_millis = m;
     9d0:	80 93 b7 01 	sts	0x01B7, r24
     9d4:	90 93 b8 01 	sts	0x01B8, r25
     9d8:	a0 93 b9 01 	sts	0x01B9, r26
     9dc:	b0 93 ba 01 	sts	0x01BA, r27
	timer0_overflow_count++;
     9e0:	80 91 bb 01 	lds	r24, 0x01BB
     9e4:	90 91 bc 01 	lds	r25, 0x01BC
     9e8:	a0 91 bd 01 	lds	r26, 0x01BD
     9ec:	b0 91 be 01 	lds	r27, 0x01BE
     9f0:	01 96       	adiw	r24, 0x01	; 1
     9f2:	a1 1d       	adc	r26, r1
     9f4:	b1 1d       	adc	r27, r1
     9f6:	80 93 bb 01 	sts	0x01BB, r24
     9fa:	90 93 bc 01 	sts	0x01BC, r25
     9fe:	a0 93 bd 01 	sts	0x01BD, r26
     a02:	b0 93 be 01 	sts	0x01BE, r27
}
     a06:	bf 91       	pop	r27
     a08:	af 91       	pop	r26
     a0a:	9f 91       	pop	r25
     a0c:	8f 91       	pop	r24
     a0e:	3f 91       	pop	r19
     a10:	2f 91       	pop	r18
     a12:	0f 90       	pop	r0
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	0f 90       	pop	r0
     a18:	1f 90       	pop	r1
     a1a:	18 95       	reti

00000a1c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     a1c:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     a1e:	f8 94       	cli
	m = timer0_millis;
     a20:	60 91 b7 01 	lds	r22, 0x01B7
     a24:	70 91 b8 01 	lds	r23, 0x01B8
     a28:	80 91 b9 01 	lds	r24, 0x01B9
     a2c:	90 91 ba 01 	lds	r25, 0x01BA
	SREG = oldSREG;
     a30:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     a32:	08 95       	ret

00000a34 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     a34:	78 94       	sei
#if defined(__AVR_ATmega128__)
	// CPU specific: different values for the ATmega128
	sbi(TCCR0, CS02);
#elif defined(TCCR0) && defined(CS01) && defined(CS00)
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
     a36:	83 b7       	in	r24, 0x33	; 51
     a38:	82 60       	ori	r24, 0x02	; 2
     a3a:	83 bf       	out	0x33, r24	; 51
	sbi(TCCR0, CS00);
     a3c:	83 b7       	in	r24, 0x33	; 51
     a3e:	81 60       	ori	r24, 0x01	; 1
     a40:	83 bf       	out	0x33, r24	; 51
	#error Timer 0 prescale factor 64 not set correctly
#endif

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
     a42:	89 b7       	in	r24, 0x39	; 57
     a44:	81 60       	ori	r24, 0x01	; 1
     a46:	89 bf       	out	0x39, r24	; 57
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     a48:	1e bc       	out	0x2e, r1	; 46

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     a4a:	8e b5       	in	r24, 0x2e	; 46
     a4c:	82 60       	ori	r24, 0x02	; 2
     a4e:	8e bd       	out	0x2e, r24	; 46
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     a50:	8e b5       	in	r24, 0x2e	; 46
     a52:	81 60       	ori	r24, 0x01	; 1
     a54:	8e bd       	out	0x2e, r24	; 46
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     a56:	8f b5       	in	r24, 0x2f	; 47
     a58:	81 60       	ori	r24, 0x01	; 1
     a5a:	8f bd       	out	0x2f, r24	; 47
	#warning this needs to be finished
#endif

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
     a5c:	85 b5       	in	r24, 0x25	; 37
     a5e:	84 60       	ori	r24, 0x04	; 4
     a60:	85 bd       	out	0x25, r24	; 37
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
     a62:	85 b5       	in	r24, 0x25	; 37
     a64:	80 64       	ori	r24, 0x40	; 64
     a66:	85 bd       	out	0x25, r24	; 37
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     a68:	32 9a       	sbi	0x06, 2	; 6
		sbi(ADCSRA, ADPS1);
     a6a:	31 9a       	sbi	0x06, 1	; 6
		sbi(ADCSRA, ADPS0);
     a6c:	30 9a       	sbi	0x06, 0	; 6
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     a6e:	37 9a       	sbi	0x06, 7	; 6

	// the bootloader connects pins 0 and 1 to the USART; disconnect them
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
     a70:	1a b8       	out	0x0a, r1	; 10
     a72:	08 95       	ret

00000a74 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     a74:	84 30       	cpi	r24, 0x04	; 4
     a76:	41 f0       	breq	.+16     	; 0xa88 <turnOffPWM+0x14>
     a78:	86 30       	cpi	r24, 0x06	; 6
     a7a:	51 f0       	breq	.+20     	; 0xa90 <turnOffPWM+0x1c>
     a7c:	83 30       	cpi	r24, 0x03	; 3
     a7e:	59 f4       	brne	.+22     	; 0xa96 <turnOffPWM+0x22>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     a80:	8f b5       	in	r24, 0x2f	; 47
     a82:	8f 77       	andi	r24, 0x7F	; 127
     a84:	8f bd       	out	0x2f, r24	; 47
     a86:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     a88:	8f b5       	in	r24, 0x2f	; 47
     a8a:	8f 7d       	andi	r24, 0xDF	; 223
     a8c:	8f bd       	out	0x2f, r24	; 47
     a8e:	08 95       	ret
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
		#endif
		
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
     a90:	85 b5       	in	r24, 0x25	; 37
     a92:	8f 7d       	andi	r24, 0xDF	; 223
     a94:	85 bd       	out	0x25, r24	; 37
     a96:	08 95       	ret

00000a98 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	fc 01       	movw	r30, r24
     aa0:	e5 5c       	subi	r30, 0xC5	; 197
     aa2:	ff 4f       	sbci	r31, 0xFF	; 255
     aa4:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     aa6:	fc 01       	movw	r30, r24
     aa8:	e1 5b       	subi	r30, 0xB1	; 177
     aaa:	ff 4f       	sbci	r31, 0xFF	; 255
     aac:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     aae:	88 23       	and	r24, r24
     ab0:	79 f1       	breq	.+94     	; 0xb10 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	88 0f       	add	r24, r24
     ab6:	99 1f       	adc	r25, r25
     ab8:	fc 01       	movw	r30, r24
     aba:	e9 58       	subi	r30, 0x89	; 137
     abc:	ff 4f       	sbci	r31, 0xFF	; 255
     abe:	a5 91       	lpm	r26, Z+
     ac0:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     ac2:	fc 01       	movw	r30, r24
     ac4:	e3 59       	subi	r30, 0x93	; 147
     ac6:	ff 4f       	sbci	r31, 0xFF	; 255
     ac8:	c5 91       	lpm	r28, Z+
     aca:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     acc:	61 11       	cpse	r22, r1
     ace:	0c c0       	rjmp	.+24     	; 0xae8 <pinMode+0x50>
		uint8_t oldSREG = SREG;
     ad0:	9f b7       	in	r25, 0x3f	; 63
                cli();
     ad2:	f8 94       	cli
		*reg &= ~bit;
     ad4:	8c 91       	ld	r24, X
     ad6:	e2 2f       	mov	r30, r18
     ad8:	e0 95       	com	r30
     ada:	8e 23       	and	r24, r30
     adc:	8c 93       	st	X, r24
		*out &= ~bit;
     ade:	28 81       	ld	r18, Y
     ae0:	e2 23       	and	r30, r18
     ae2:	e8 83       	st	Y, r30
		SREG = oldSREG;
     ae4:	9f bf       	out	0x3f, r25	; 63
     ae6:	14 c0       	rjmp	.+40     	; 0xb10 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
     ae8:	62 30       	cpi	r22, 0x02	; 2
     aea:	61 f4       	brne	.+24     	; 0xb04 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
     aec:	9f b7       	in	r25, 0x3f	; 63
                cli();
     aee:	f8 94       	cli
		*reg &= ~bit;
     af0:	3c 91       	ld	r19, X
     af2:	82 2f       	mov	r24, r18
     af4:	80 95       	com	r24
     af6:	83 23       	and	r24, r19
     af8:	8c 93       	st	X, r24
		*out |= bit;
     afa:	e8 81       	ld	r30, Y
     afc:	e2 2b       	or	r30, r18
     afe:	e8 83       	st	Y, r30
		SREG = oldSREG;
     b00:	9f bf       	out	0x3f, r25	; 63
     b02:	06 c0       	rjmp	.+12     	; 0xb10 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
     b04:	8f b7       	in	r24, 0x3f	; 63
                cli();
     b06:	f8 94       	cli
		*reg |= bit;
     b08:	ec 91       	ld	r30, X
     b0a:	e2 2b       	or	r30, r18
     b0c:	ec 93       	st	X, r30
		SREG = oldSREG;
     b0e:	8f bf       	out	0x3f, r24	; 63
	}
}
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	08 95       	ret

00000b16 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	f9 01       	movw	r30, r18
     b22:	e9 5d       	subi	r30, 0xD9	; 217
     b24:	ff 4f       	sbci	r31, 0xFF	; 255
     b26:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     b28:	f9 01       	movw	r30, r18
     b2a:	e5 5c       	subi	r30, 0xC5	; 197
     b2c:	ff 4f       	sbci	r31, 0xFF	; 255
     b2e:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     b30:	f9 01       	movw	r30, r18
     b32:	e1 5b       	subi	r30, 0xB1	; 177
     b34:	ff 4f       	sbci	r31, 0xFF	; 255
     b36:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     b38:	cc 23       	and	r28, r28
     b3a:	c9 f0       	breq	.+50     	; 0xb6e <digitalWrite+0x58>
     b3c:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     b3e:	81 11       	cpse	r24, r1
     b40:	99 df       	rcall	.-206    	; 0xa74 <turnOffPWM>

	out = portOutputRegister(port);
     b42:	ec 2f       	mov	r30, r28
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	ee 0f       	add	r30, r30
     b48:	ff 1f       	adc	r31, r31
     b4a:	e3 59       	subi	r30, 0x93	; 147
     b4c:	ff 4f       	sbci	r31, 0xFF	; 255
     b4e:	a5 91       	lpm	r26, Z+
     b50:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     b52:	8f b7       	in	r24, 0x3f	; 63
	cli();
     b54:	f8 94       	cli

	if (val == LOW) {
     b56:	d1 11       	cpse	r29, r1
     b58:	06 c0       	rjmp	.+12     	; 0xb66 <digitalWrite+0x50>
		*out &= ~bit;
     b5a:	9c 91       	ld	r25, X
     b5c:	e1 2f       	mov	r30, r17
     b5e:	e0 95       	com	r30
     b60:	e9 23       	and	r30, r25
     b62:	ec 93       	st	X, r30
     b64:	03 c0       	rjmp	.+6      	; 0xb6c <digitalWrite+0x56>
	} else {
		*out |= bit;
     b66:	ec 91       	ld	r30, X
     b68:	e1 2b       	or	r30, r17
     b6a:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
     b6c:	8f bf       	out	0x3f, r24	; 63
}
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	1f 91       	pop	r17
     b74:	08 95       	ret

00000b76 <digitalRead>:

int digitalRead(uint8_t pin)
{
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	f9 01       	movw	r30, r18
     b80:	e9 5d       	subi	r30, 0xD9	; 217
     b82:	ff 4f       	sbci	r31, 0xFF	; 255
     b84:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     b86:	f9 01       	movw	r30, r18
     b88:	e5 5c       	subi	r30, 0xC5	; 197
     b8a:	ff 4f       	sbci	r31, 0xFF	; 255
     b8c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     b8e:	f9 01       	movw	r30, r18
     b90:	e1 5b       	subi	r30, 0xB1	; 177
     b92:	ff 4f       	sbci	r31, 0xFF	; 255
     b94:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
     b96:	cc 23       	and	r28, r28
     b98:	89 f0       	breq	.+34     	; 0xbbc <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     b9a:	81 11       	cpse	r24, r1
     b9c:	6b df       	rcall	.-298    	; 0xa74 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
     b9e:	ec 2f       	mov	r30, r28
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	ee 0f       	add	r30, r30
     ba4:	ff 1f       	adc	r31, r31
     ba6:	ed 59       	subi	r30, 0x9D	; 157
     ba8:	ff 4f       	sbci	r31, 0xFF	; 255
     baa:	a5 91       	lpm	r26, Z+
     bac:	b4 91       	lpm	r27, Z
     bae:	ec 91       	ld	r30, X
     bb0:	ed 23       	and	r30, r29
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	21 f4       	brne	.+8      	; 0xbc0 <digitalRead+0x4a>
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <digitalRead+0x4a>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	08 95       	ret

00000bc6 <vw_crc>:
// This should only be ever called at user level, not interrupt level
uint16_t vw_crc(uint8_t *ptr, uint8_t count)
{
    uint16_t crc = 0xffff;

    while (count-- > 0) 
     bc6:	2f ef       	ldi	r18, 0xFF	; 255
     bc8:	26 0f       	add	r18, r22
     bca:	66 23       	and	r22, r22
     bcc:	c9 f0       	breq	.+50     	; 0xc00 <vw_crc+0x3a>
     bce:	e8 2f       	mov	r30, r24
     bd0:	f9 2f       	mov	r31, r25
     bd2:	8f ef       	ldi	r24, 0xFF	; 255
     bd4:	9f ef       	ldi	r25, 0xFF	; 255
	crc = _crc_ccitt_update(crc, *ptr++);
     bd6:	31 91       	ld	r19, Z+
        "eor    %A0,__tmp_reg__"

        : "=d" (__ret)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
     bd8:	83 27       	eor	r24, r19
     bda:	08 2e       	mov	r0, r24
     bdc:	82 95       	swap	r24
     bde:	80 7f       	andi	r24, 0xF0	; 240
     be0:	80 25       	eor	r24, r0
     be2:	09 2e       	mov	r0, r25
     be4:	98 2f       	mov	r25, r24
     be6:	82 95       	swap	r24
     be8:	8f 70       	andi	r24, 0x0F	; 15
     bea:	08 26       	eor	r0, r24
     bec:	86 95       	lsr	r24
     bee:	98 27       	eor	r25, r24
     bf0:	89 27       	eor	r24, r25
     bf2:	88 0f       	add	r24, r24
     bf4:	88 0f       	add	r24, r24
     bf6:	88 0f       	add	r24, r24
     bf8:	80 25       	eor	r24, r0
// This should only be ever called at user level, not interrupt level
uint16_t vw_crc(uint8_t *ptr, uint8_t count)
{
    uint16_t crc = 0xffff;

    while (count-- > 0) 
     bfa:	21 50       	subi	r18, 0x01	; 1
     bfc:	60 f7       	brcc	.-40     	; 0xbd6 <vw_crc+0x10>
     bfe:	08 95       	ret

// Compute CRC over count bytes.
// This should only be ever called at user level, not interrupt level
uint16_t vw_crc(uint8_t *ptr, uint8_t count)
{
    uint16_t crc = 0xffff;
     c00:	8f ef       	ldi	r24, 0xFF	; 255
     c02:	9f ef       	ldi	r25, 0xFF	; 255

    while (count-- > 0) 
	crc = _crc_ccitt_update(crc, *ptr++);
    return crc;
}
     c04:	08 95       	ret

00000c06 <vw_symbol_6to4>:
{
    uint8_t i;
    
    // Linear search :-( Could have a 64 byte reverse lookup table?
    for (i = 0; i < 16; i++)
	if (symbol == symbols[i]) return i;
     c06:	8d 30       	cpi	r24, 0x0D	; 13
     c08:	39 f0       	breq	.+14     	; 0xc18 <vw_symbol_6to4+0x12>
     c0a:	e9 ef       	ldi	r30, 0xF9	; 249
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
uint8_t vw_symbol_6to4(uint8_t symbol)
{
    uint8_t i;
    
    // Linear search :-( Could have a 64 byte reverse lookup table?
    for (i = 0; i < 16; i++)
     c0e:	91 e0       	ldi	r25, 0x01	; 1
	if (symbol == symbols[i]) return i;
     c10:	21 91       	ld	r18, Z+
     c12:	28 13       	cpse	r18, r24
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <vw_symbol_6to4+0x18>
     c16:	01 c0       	rjmp	.+2      	; 0xc1a <vw_symbol_6to4+0x14>
uint8_t vw_symbol_6to4(uint8_t symbol)
{
    uint8_t i;
    
    // Linear search :-( Could have a 64 byte reverse lookup table?
    for (i = 0; i < 16; i++)
     c18:	90 e0       	ldi	r25, 0x00	; 0
	if (symbol == symbols[i]) return i;
     c1a:	89 2f       	mov	r24, r25
     c1c:	08 95       	ret
uint8_t vw_symbol_6to4(uint8_t symbol)
{
    uint8_t i;
    
    // Linear search :-( Could have a 64 byte reverse lookup table?
    for (i = 0; i < 16; i++)
     c1e:	9f 5f       	subi	r25, 0xFF	; 255
     c20:	90 31       	cpi	r25, 0x10	; 16
     c22:	b1 f7       	brne	.-20     	; 0xc10 <vw_symbol_6to4+0xa>
	if (symbol == symbols[i]) return i;
    return 0; // Not found
     c24:	80 e0       	ldi	r24, 0x00	; 0
}
     c26:	08 95       	ret

00000c28 <vw_set_rx_pin>:
}

// Set the pin number for input receiver data
void vw_set_rx_pin(uint8_t pin)
{
    vw_rx_pin = pin;
     c28:	80 93 62 00 	sts	0x0062, r24
     c2c:	08 95       	ret

00000c2e <vw_pll>:
// Called 8 times per bit period
// Phase locked loop tries to synchronise with the transmitter so that bit 
// transitions occur at about the time vw_rx_pll_ramp is 0;
// Then the average is computed over each bit period to deduce the bit value
void vw_pll()
{
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
    // Integrate each sample
    if (vw_rx_sample)
     c34:	80 91 ea 01 	lds	r24, 0x01EA
     c38:	88 23       	and	r24, r24
     c3a:	29 f0       	breq	.+10     	; 0xc46 <vw_pll+0x18>
	vw_rx_integrator++;
     c3c:	90 91 e7 01 	lds	r25, 0x01E7
     c40:	9f 5f       	subi	r25, 0xFF	; 255
     c42:	90 93 e7 01 	sts	0x01E7, r25

    if (vw_rx_sample != vw_rx_last_sample)
     c46:	90 91 e9 01 	lds	r25, 0x01E9
     c4a:	89 17       	cp	r24, r25
     c4c:	69 f0       	breq	.+26     	; 0xc68 <vw_pll+0x3a>
    {
	// Transition, advance if ramp > 80, retard if < 80
	vw_rx_pll_ramp += ((vw_rx_pll_ramp < VW_RAMP_TRANSITION) 
     c4e:	90 91 e8 01 	lds	r25, 0x01E8
			   ? VW_RAMP_INC_RETARD 
			   : VW_RAMP_INC_ADVANCE);
     c52:	90 35       	cpi	r25, 0x50	; 80
     c54:	10 f0       	brcs	.+4      	; 0xc5a <vw_pll+0x2c>
     c56:	2d e1       	ldi	r18, 0x1D	; 29
     c58:	01 c0       	rjmp	.+2      	; 0xc5c <vw_pll+0x2e>
     c5a:	2b e0       	ldi	r18, 0x0B	; 11
     c5c:	92 0f       	add	r25, r18
     c5e:	90 93 e8 01 	sts	0x01E8, r25
	vw_rx_last_sample = vw_rx_sample;
     c62:	80 93 e9 01 	sts	0x01E9, r24
     c66:	05 c0       	rjmp	.+10     	; 0xc72 <vw_pll+0x44>
    }
    else
    {
	// No transition
	// Advance ramp by standard 20 (== 160/8 samples)
	vw_rx_pll_ramp += VW_RAMP_INC;
     c68:	80 91 e8 01 	lds	r24, 0x01E8
     c6c:	8c 5e       	subi	r24, 0xEC	; 236
     c6e:	80 93 e8 01 	sts	0x01E8, r24
    }
    if (vw_rx_pll_ramp >= VW_RX_RAMP_LEN)
     c72:	80 91 e8 01 	lds	r24, 0x01E8
     c76:	80 3a       	cpi	r24, 0xA0	; 160
     c78:	08 f4       	brcc	.+2      	; 0xc7c <vw_pll+0x4e>
     c7a:	7c c0       	rjmp	.+248    	; 0xd74 <vw_pll+0x146>
    {
	// Add this to the 12th bit of vw_rx_bits, LSB first
	// The last 12 bits are kept
	vw_rx_bits >>= 1;
     c7c:	20 91 e2 01 	lds	r18, 0x01E2
     c80:	30 91 e3 01 	lds	r19, 0x01E3
     c84:	36 95       	lsr	r19
     c86:	27 95       	ror	r18
     c88:	30 93 e3 01 	sts	0x01E3, r19
     c8c:	20 93 e2 01 	sts	0x01E2, r18

	// Check the integrator to see how many samples in this cycle were high.
	// If < 5 out of 8, then its declared a 0 bit, else a 1;
	if (vw_rx_integrator >= 5)
     c90:	90 91 e7 01 	lds	r25, 0x01E7
     c94:	95 30       	cpi	r25, 0x05	; 5
     c96:	28 f0       	brcs	.+10     	; 0xca2 <vw_pll+0x74>
	    vw_rx_bits |= 0x800;
     c98:	38 60       	ori	r19, 0x08	; 8
     c9a:	30 93 e3 01 	sts	0x01E3, r19
     c9e:	20 93 e2 01 	sts	0x01E2, r18

	vw_rx_pll_ramp -= VW_RX_RAMP_LEN;
     ca2:	80 5a       	subi	r24, 0xA0	; 160
     ca4:	80 93 e8 01 	sts	0x01E8, r24
	vw_rx_integrator = 0; // Clear the integral for the next cycle
     ca8:	10 92 e7 01 	sts	0x01E7, r1

	if (vw_rx_active)
     cac:	80 91 e6 01 	lds	r24, 0x01E6
     cb0:	88 23       	and	r24, r24
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <vw_pll+0x88>
     cb4:	4f c0       	rjmp	.+158    	; 0xd54 <vw_pll+0x126>
	{
	    // We have the start symbol and now we are collecting message bits,
	    // 6 per symbol, each which has to be decoded to 4 bits
	    if (++vw_rx_bit_count >= 12)
     cb6:	80 91 e1 01 	lds	r24, 0x01E1
     cba:	8f 5f       	subi	r24, 0xFF	; 255
     cbc:	80 93 e1 01 	sts	0x01E1, r24
     cc0:	8c 30       	cpi	r24, 0x0C	; 12
     cc2:	08 f4       	brcc	.+2      	; 0xcc6 <vw_pll+0x98>
     cc4:	57 c0       	rjmp	.+174    	; 0xd74 <vw_pll+0x146>
	    {
		// Have 12 bits of encoded message == 1 byte encoded
		// Decode as 2 lots of 6 bits into 2 lots of 4 bits
		// The 6 lsbits are the high nybble
		uint8_t this_byte = 
		    (vw_symbol_6to4(vw_rx_bits & 0x3f)) << 4 
     cc6:	00 91 e2 01 	lds	r16, 0x01E2
     cca:	10 91 e3 01 	lds	r17, 0x01E3
     cce:	80 2f       	mov	r24, r16
     cd0:	8f 73       	andi	r24, 0x3F	; 63
     cd2:	99 df       	rcall	.-206    	; 0xc06 <vw_symbol_6to4>
     cd4:	c8 2f       	mov	r28, r24
		    | vw_symbol_6to4(vw_rx_bits >> 6);
     cd6:	c8 01       	movw	r24, r16
     cd8:	00 24       	eor	r0, r0
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	00 1c       	adc	r0, r0
     ce0:	88 0f       	add	r24, r24
     ce2:	99 1f       	adc	r25, r25
     ce4:	00 1c       	adc	r0, r0
     ce6:	89 2f       	mov	r24, r25
     ce8:	90 2d       	mov	r25, r0
     cea:	8d df       	rcall	.-230    	; 0xc06 <vw_symbol_6to4>
	    {
		// Have 12 bits of encoded message == 1 byte encoded
		// Decode as 2 lots of 6 bits into 2 lots of 4 bits
		// The 6 lsbits are the high nybble
		uint8_t this_byte = 
		    (vw_symbol_6to4(vw_rx_bits & 0x3f)) << 4 
     cec:	90 e1       	ldi	r25, 0x10	; 16
     cee:	c9 9f       	mul	r28, r25
     cf0:	90 01       	movw	r18, r0
     cf2:	11 24       	eor	r1, r1
		    | vw_symbol_6to4(vw_rx_bits >> 6);
     cf4:	82 2b       	or	r24, r18

		// The first decoded byte is the byte count of the following message
		// the count includes the byte count and the 2 trailing FCS bytes
		// REVISIT: may also include the ACK flag at 0x40
		if (vw_rx_len == 0)
     cf6:	90 91 c1 01 	lds	r25, 0x01C1
     cfa:	91 11       	cpse	r25, r1
     cfc:	0e c0       	rjmp	.+28     	; 0xd1a <vw_pll+0xec>
		{
		    // The first byte is the byte count
		    // Check it for sensibility. It cant be less than 4, since it
		    // includes the bytes count itself and the 2 byte FCS
		    vw_rx_count = this_byte;
     cfe:	80 93 c2 01 	sts	0x01C2, r24
		    if (vw_rx_count < 4 || vw_rx_count > VW_MAX_MESSAGE_LEN)
     d02:	9c ef       	ldi	r25, 0xFC	; 252
     d04:	98 0f       	add	r25, r24
     d06:	9b 31       	cpi	r25, 0x1B	; 27
     d08:	40 f0       	brcs	.+16     	; 0xd1a <vw_pll+0xec>
		    {
			// Stupid message length, drop the whole thing
			vw_rx_active = false;
     d0a:	10 92 e6 01 	sts	0x01E6, r1
			vw_rx_bad++;
     d0e:	80 91 c0 01 	lds	r24, 0x01C0
     d12:	8f 5f       	subi	r24, 0xFF	; 255
     d14:	80 93 c0 01 	sts	0x01C0, r24
                        return;
     d18:	2d c0       	rjmp	.+90     	; 0xd74 <vw_pll+0x146>
		    }
		}
		vw_rx_buf[vw_rx_len++] = this_byte;
     d1a:	e0 91 c1 01 	lds	r30, 0x01C1
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	9e 0f       	add	r25, r30
     d22:	90 93 c1 01 	sts	0x01C1, r25
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	ed 53       	subi	r30, 0x3D	; 61
     d2a:	fe 4f       	sbci	r31, 0xFE	; 254
     d2c:	80 83       	st	Z, r24

		if (vw_rx_len >= vw_rx_count)
     d2e:	90 91 c1 01 	lds	r25, 0x01C1
     d32:	80 91 c2 01 	lds	r24, 0x01C2
     d36:	98 17       	cp	r25, r24
     d38:	50 f0       	brcs	.+20     	; 0xd4e <vw_pll+0x120>
		{
		    // Got all the bytes now
		    vw_rx_active = false;
     d3a:	10 92 e6 01 	sts	0x01E6, r1
		    vw_rx_good++;
     d3e:	80 91 bf 01 	lds	r24, 0x01BF
     d42:	8f 5f       	subi	r24, 0xFF	; 255
     d44:	80 93 bf 01 	sts	0x01BF, r24
		    vw_rx_done = true; // Better come get it before the next one starts
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	80 93 e5 01 	sts	0x01E5, r24
		}
		vw_rx_bit_count = 0;
     d4e:	10 92 e1 01 	sts	0x01E1, r1
     d52:	10 c0       	rjmp	.+32     	; 0xd74 <vw_pll+0x146>
	    }
	}
	// Not in a message, see if we have a start symbol
	else if (vw_rx_bits == 0xb38)
     d54:	80 91 e2 01 	lds	r24, 0x01E2
     d58:	90 91 e3 01 	lds	r25, 0x01E3
     d5c:	88 33       	cpi	r24, 0x38	; 56
     d5e:	9b 40       	sbci	r25, 0x0B	; 11
     d60:	49 f4       	brne	.+18     	; 0xd74 <vw_pll+0x146>
	{
	    // Have start symbol, start collecting message
	    vw_rx_active = true;
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	80 93 e6 01 	sts	0x01E6, r24
	    vw_rx_bit_count = 0;
     d68:	10 92 e1 01 	sts	0x01E1, r1
	    vw_rx_len = 0;
     d6c:	10 92 c1 01 	sts	0x01C1, r1
	    vw_rx_done = false; // Too bad if you missed the last message
     d70:	10 92 e5 01 	sts	0x01E5, r1
	}
    }
}
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	08 95       	ret

00000d7c <vw_setup>:
	digitalWrite(vw_ptt_pin, vw_ptt_inverted);
}	

#elif defined (ARDUINO) // Arduino specific
void vw_setup(uint16_t speed)
{
     d7c:	4f 92       	push	r4
     d7e:	5f 92       	push	r5
     d80:	6f 92       	push	r6
     d82:	7f 92       	push	r7
     d84:	8f 92       	push	r8
     d86:	9f 92       	push	r9
     d88:	af 92       	push	r10
     d8a:	bf 92       	push	r11
     d8c:	ef 92       	push	r14
     d8e:	ff 92       	push	r15
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
     d9a:	2e 97       	sbiw	r28, 0x0e	; 14
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
// and sets nticks to compare-match value if lower than max_ticks
// returns 0 & nticks = 0 on fault
static uint8_t _timer_calc(uint16_t speed, uint16_t max_ticks, uint16_t *nticks)
{
    // Clock divider (prescaler) values - 0/3333: error flag
    uint16_t prescalers[] = {0, 1, 8, 64, 256, 1024, 3333};
     da6:	2e e0       	ldi	r18, 0x0E	; 14
     da8:	e8 ea       	ldi	r30, 0xA8	; 168
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	de 01       	movw	r26, r28
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	01 90       	ld	r0, Z+
     db2:	0d 92       	st	X+, r0
     db4:	2a 95       	dec	r18
     db6:	e1 f7       	brne	.-8      	; 0xdb0 <vw_setup+0x34>
    uint8_t prescaler=0; // index into array & return bit value
    unsigned long ulticks; // calculate by ntick overflow

    // Div-by-zero protection
    if (speed == 0)
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	09 f4       	brne	.+2      	; 0xdbe <vw_setup+0x42>
     dbc:	70 c0       	rjmp	.+224    	; 0xe9e <vw_setup+0x122>
    for (prescaler=1; prescaler < 7; prescaler += 1)
    {
        // Amount of time per CPU clock tick (in seconds)
        float clock_time = (1.0 / (float(F_CPU) / float(prescalers[prescaler])));
        // Fraction of second needed to xmit one bit
        float bit_time = ((1.0 / float(speed)) / 8.0);
     dbe:	bc 01       	movw	r22, r24
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	fa d1       	rcall	.+1012   	; 0x11ba <__floatunsisf>
     dc6:	9b 01       	movw	r18, r22
     dc8:	ac 01       	movw	r20, r24
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	80 e8       	ldi	r24, 0x80	; 128
     dd0:	9f e3       	ldi	r25, 0x3F	; 63
     dd2:	5a d1       	rcall	.+692    	; 0x1088 <__divsf3>
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 e0       	ldi	r20, 0x00	; 0
     dda:	5e e3       	ldi	r21, 0x3E	; 62
     ddc:	7c d2       	rcall	.+1272   	; 0x12d6 <__mulsf3>
     dde:	4b 01       	movw	r8, r22
     de0:	5c 01       	movw	r10, r24
     de2:	7e 01       	movw	r14, r28
     de4:	23 e0       	ldi	r18, 0x03	; 3
     de6:	e2 0e       	add	r14, r18
     de8:	f1 1c       	adc	r15, r1
     dea:	11 e0       	ldi	r17, 0x01	; 1

    // test increasing prescaler (divisor), decreasing ulticks until no overflow
    for (prescaler=1; prescaler < 7; prescaler += 1)
    {
        // Amount of time per CPU clock tick (in seconds)
        float clock_time = (1.0 / (float(F_CPU) / float(prescalers[prescaler])));
     dec:	f7 01       	movw	r30, r14
     dee:	81 91       	ld	r24, Z+
     df0:	91 91       	ld	r25, Z+
     df2:	7f 01       	movw	r14, r30
     df4:	bc 01       	movw	r22, r24
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	df d1       	rcall	.+958    	; 0x11ba <__floatunsisf>
     dfc:	9b 01       	movw	r18, r22
     dfe:	ac 01       	movw	r20, r24
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	74 e2       	ldi	r23, 0x24	; 36
     e04:	84 e7       	ldi	r24, 0x74	; 116
     e06:	9b e4       	ldi	r25, 0x4B	; 75
     e08:	3f d1       	rcall	.+638    	; 0x1088 <__divsf3>
     e0a:	9b 01       	movw	r18, r22
     e0c:	ac 01       	movw	r20, r24
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	80 e8       	ldi	r24, 0x80	; 128
     e14:	9f e3       	ldi	r25, 0x3F	; 63
     e16:	38 d1       	rcall	.+624    	; 0x1088 <__divsf3>
     e18:	9b 01       	movw	r18, r22
     e1a:	ac 01       	movw	r20, r24
        // Fraction of second needed to xmit one bit
        float bit_time = ((1.0 / float(speed)) / 8.0);
        // number of prescaled ticks needed to handle bit time @ speed
        ulticks = long(bit_time / clock_time);
     e1c:	c5 01       	movw	r24, r10
     e1e:	b4 01       	movw	r22, r8
     e20:	33 d1       	rcall	.+614    	; 0x1088 <__divsf3>
     e22:	9a d1       	rcall	.+820    	; 0x1158 <__fixsfsi>
        // Test if ulticks fits in nticks bitwidth (with 1-tick safety margin)
        if ((ulticks > 1) && (ulticks < max_ticks))
     e24:	2b 01       	movw	r4, r22
     e26:	3c 01       	movw	r6, r24
     e28:	f2 e0       	ldi	r31, 0x02	; 2
     e2a:	4f 1a       	sub	r4, r31
     e2c:	51 08       	sbc	r5, r1
     e2e:	61 08       	sbc	r6, r1
     e30:	71 08       	sbc	r7, r1
     e32:	2d ef       	ldi	r18, 0xFD	; 253
     e34:	42 16       	cp	r4, r18
     e36:	2f ef       	ldi	r18, 0xFF	; 255
     e38:	52 06       	cpc	r5, r18
     e3a:	61 04       	cpc	r6, r1
     e3c:	71 04       	cpc	r7, r1
     e3e:	68 f1       	brcs	.+90     	; 0xe9a <vw_setup+0x11e>
        *nticks = 0;
        return 0;
    }

    // test increasing prescaler (divisor), decreasing ulticks until no overflow
    for (prescaler=1; prescaler < 7; prescaler += 1)
     e40:	1f 5f       	subi	r17, 0xFF	; 255
     e42:	17 30       	cpi	r17, 0x07	; 7
     e44:	99 f6       	brne	.-90     	; 0xdec <vw_setup+0x70>
        }
        // Won't fit, check with next prescaler value
    }

    // Check for error
    if ((prescaler == 6) || (ulticks < 2) || (ulticks > max_ticks))
     e46:	62 30       	cpi	r22, 0x02	; 2
     e48:	71 05       	cpc	r23, r1
     e4a:	81 05       	cpc	r24, r1
     e4c:	91 05       	cpc	r25, r1
     e4e:	38 f1       	brcs	.+78     	; 0xe9e <vw_setup+0x122>
     e50:	61 15       	cp	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	e1 e0       	ldi	r30, 0x01	; 1
     e56:	8e 07       	cpc	r24, r30
     e58:	91 05       	cpc	r25, r1
     e5a:	08 f5       	brcc	.+66     	; 0xe9e <vw_setup+0x122>

#else // ARDUINO
    // This is the path for most Arduinos
    // figure out prescaler value and counter match value
    prescaler = _timer_calc(speed, (uint16_t)-1, &nticks);
    if (!prescaler)
     e5c:	11 23       	and	r17, r17
     e5e:	f9 f0       	breq	.+62     	; 0xe9e <vw_setup+0x122>
    {
        return; // fault
    }

    TCCR1A = 0; // Output Compare pins disconnected
     e60:	1f bc       	out	0x2f, r1	; 47
    TCCR1B = _BV(WGM12); // Turn on CTC mode
     e62:	28 e0       	ldi	r18, 0x08	; 8
     e64:	2e bd       	out	0x2e, r18	; 46

    // convert prescaler index to TCCRnB prescaler bits CS10, CS11, CS12
    TCCR1B |= prescaler;
     e66:	2e b5       	in	r18, 0x2e	; 46
     e68:	12 2b       	or	r17, r18
     e6a:	1e bd       	out	0x2e, r17	; 46

    // Caution: special procedures for setting 16 bit regs
    // is handled by the compiler
    OCR1A = nticks;
     e6c:	7b bd       	out	0x2b, r23	; 43
     e6e:	6a bd       	out	0x2a, r22	; 42
#ifdef TIMSK1
    // atmega168
    TIMSK1 |= _BV(OCIE1A);
#else
    // others
    TIMSK |= _BV(OCIE1A);
     e70:	89 b7       	in	r24, 0x39	; 57
     e72:	80 61       	ori	r24, 0x10	; 16
     e74:	89 bf       	out	0x39, r24	; 57
#endif // TIMSK1

#endif // __AVR_ATtiny85__

    // Set up digital IO pins
    pinMode(vw_tx_pin, OUTPUT);
     e76:	61 e0       	ldi	r22, 0x01	; 1
     e78:	80 91 61 00 	lds	r24, 0x0061
     e7c:	0d de       	rcall	.-998    	; 0xa98 <pinMode>
    pinMode(vw_rx_pin, INPUT);
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	80 91 62 00 	lds	r24, 0x0062
     e84:	09 de       	rcall	.-1006   	; 0xa98 <pinMode>
    pinMode(vw_ptt_pin, OUTPUT);
     e86:	61 e0       	ldi	r22, 0x01	; 1
     e88:	80 91 63 00 	lds	r24, 0x0063
     e8c:	05 de       	rcall	.-1014   	; 0xa98 <pinMode>
    digitalWrite(vw_ptt_pin, vw_ptt_inverted);
     e8e:	60 91 eb 01 	lds	r22, 0x01EB
     e92:	80 91 63 00 	lds	r24, 0x0063
     e96:	3f de       	rcall	.-898    	; 0xb16 <digitalWrite>
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <vw_setup+0x122>
        }
        // Won't fit, check with next prescaler value
    }

    // Check for error
    if ((prescaler == 6) || (ulticks < 2) || (ulticks > max_ticks))
     e9a:	16 30       	cpi	r17, 0x06	; 6
     e9c:	c9 f6       	brne	.-78     	; 0xe50 <vw_setup+0xd4>
    // Set up digital IO pins
    pinMode(vw_tx_pin, OUTPUT);
    pinMode(vw_rx_pin, INPUT);
    pinMode(vw_ptt_pin, OUTPUT);
    digitalWrite(vw_ptt_pin, vw_ptt_inverted);
}
     e9e:	2e 96       	adiw	r28, 0x0e	; 14
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	1f 91       	pop	r17
     eb0:	ff 90       	pop	r15
     eb2:	ef 90       	pop	r14
     eb4:	bf 90       	pop	r11
     eb6:	af 90       	pop	r10
     eb8:	9f 90       	pop	r9
     eba:	8f 90       	pop	r8
     ebc:	7f 90       	pop	r7
     ebe:	6f 90       	pop	r6
     ec0:	5f 90       	pop	r5
     ec2:	4f 90       	pop	r4
     ec4:	08 95       	ret

00000ec6 <vw_tx_stop>:

// Stop the transmitter, call when all bits are sent
void vw_tx_stop()
{
    // Disable the transmitter hardware
    digitalWrite(vw_ptt_pin, false ^ vw_ptt_inverted);
     ec6:	60 91 eb 01 	lds	r22, 0x01EB
     eca:	80 91 63 00 	lds	r24, 0x0063
     ece:	23 de       	rcall	.-954    	; 0xb16 <digitalWrite>
    digitalWrite(vw_tx_pin, false);
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	80 91 61 00 	lds	r24, 0x0061
     ed6:	1f de       	rcall	.-962    	; 0xb16 <digitalWrite>

    // No more ticks for the transmitter
    vw_tx_enabled = false;
     ed8:	10 92 ee 01 	sts	0x01EE, r1
     edc:	08 95       	ret

00000ede <vw_rx_start>:

// Enable the receiver. When a message becomes available, vw_rx_done flag
// is set, and vw_wait_rx() will return.
void vw_rx_start()
{
    if (!vw_rx_enabled)
     ede:	80 91 e4 01 	lds	r24, 0x01E4
     ee2:	81 11       	cpse	r24, r1
     ee4:	05 c0       	rjmp	.+10     	; 0xef0 <vw_rx_start+0x12>
    {
	vw_rx_enabled = true;
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	80 93 e4 01 	sts	0x01E4, r24
	vw_rx_active = false; // Never restart a partial message
     eec:	10 92 e6 01 	sts	0x01E6, r1
     ef0:	08 95       	ret

00000ef2 <vw_wait_rx>:
// Wait for the receiver to get a message
// Busy-wait loop until the ISR says a message is available
// can then call vw_get_message()
void vw_wait_rx()
{
    while (!vw_rx_done)
     ef2:	80 91 e5 01 	lds	r24, 0x01E5
     ef6:	88 23       	and	r24, r24
     ef8:	e1 f3       	breq	.-8      	; 0xef2 <vw_wait_rx>
	;
}
     efa:	08 95       	ret

00000efc <vw_wait_rx_max>:

// Wait at most max milliseconds for the receiver to receive a message
// Return the truth of whether there is a message
uint8_t vw_wait_rx_max(unsigned long milliseconds)
{
     efc:	8f 92       	push	r8
     efe:	9f 92       	push	r9
     f00:	af 92       	push	r10
     f02:	bf 92       	push	r11
     f04:	cf 92       	push	r12
     f06:	df 92       	push	r13
     f08:	ef 92       	push	r14
     f0a:	ff 92       	push	r15
     f0c:	4b 01       	movw	r8, r22
     f0e:	5c 01       	movw	r10, r24
    unsigned long start = millis();
     f10:	85 dd       	rcall	.-1270   	; 0xa1c <millis>
     f12:	6b 01       	movw	r12, r22
     f14:	7c 01       	movw	r14, r24

    while (!vw_rx_done && ((millis() - start) < milliseconds))
     f16:	80 91 e5 01 	lds	r24, 0x01E5
     f1a:	81 11       	cpse	r24, r1
     f1c:	0c c0       	rjmp	.+24     	; 0xf36 <vw_wait_rx_max+0x3a>
     f1e:	7e dd       	rcall	.-1284   	; 0xa1c <millis>
     f20:	dc 01       	movw	r26, r24
     f22:	cb 01       	movw	r24, r22
     f24:	8c 19       	sub	r24, r12
     f26:	9d 09       	sbc	r25, r13
     f28:	ae 09       	sbc	r26, r14
     f2a:	bf 09       	sbc	r27, r15
     f2c:	88 15       	cp	r24, r8
     f2e:	99 05       	cpc	r25, r9
     f30:	aa 05       	cpc	r26, r10
     f32:	bb 05       	cpc	r27, r11
     f34:	80 f3       	brcs	.-32     	; 0xf16 <vw_wait_rx_max+0x1a>
	;
    return vw_rx_done;
     f36:	80 91 e5 01 	lds	r24, 0x01E5
}
     f3a:	ff 90       	pop	r15
     f3c:	ef 90       	pop	r14
     f3e:	df 90       	pop	r13
     f40:	cf 90       	pop	r12
     f42:	bf 90       	pop	r11
     f44:	af 90       	pop	r10
     f46:	9f 90       	pop	r9
     f48:	8f 90       	pop	r8
     f4a:	08 95       	ret

00000f4c <vw_get_message>:
uint8_t vw_get_message(uint8_t* buf, uint8_t* len)
{
    uint8_t rxlen;
    
    // Message available?
    if (!vw_rx_done)
     f4c:	20 91 e5 01 	lds	r18, 0x01E5
     f50:	22 23       	and	r18, r18
     f52:	d1 f0       	breq	.+52     	; 0xf88 <vw_get_message+0x3c>
	return false;
    
    // Wait until vw_rx_done is set before reading vw_rx_len
    // then remove bytecount and FCS
    rxlen = vw_rx_len - 3;
     f54:	20 91 c1 01 	lds	r18, 0x01C1
     f58:	23 50       	subi	r18, 0x03	; 3
    
    // Copy message (good or bad)
    if (*len > rxlen)
     f5a:	fb 01       	movw	r30, r22
     f5c:	30 81       	ld	r19, Z
     f5e:	23 17       	cp	r18, r19
     f60:	08 f4       	brcc	.+2      	; 0xf64 <vw_get_message+0x18>
	*len = rxlen;
     f62:	20 83       	st	Z, r18
     f64:	fb 01       	movw	r30, r22
    memcpy(buf, vw_rx_buf + 1, *len);
     f66:	40 81       	ld	r20, Z
     f68:	50 e0       	ldi	r21, 0x00	; 0
     f6a:	64 ec       	ldi	r22, 0xC4	; 196
     f6c:	71 e0       	ldi	r23, 0x01	; 1
     f6e:	3e d2       	rcall	.+1148   	; 0x13ec <memcpy>
    
    vw_rx_done = false; // OK, got that message thanks
     f70:	10 92 e5 01 	sts	0x01E5, r1
    
    // Check the FCS, return goodness
    return (vw_crc(vw_rx_buf, vw_rx_len) == 0xf0b8); // FCS OK?
     f74:	60 91 c1 01 	lds	r22, 0x01C1
     f78:	83 ec       	ldi	r24, 0xC3	; 195
     f7a:	91 e0       	ldi	r25, 0x01	; 1
     f7c:	24 de       	rcall	.-952    	; 0xbc6 <vw_crc>
     f7e:	21 e0       	ldi	r18, 0x01	; 1
     f80:	88 3b       	cpi	r24, 0xB8	; 184
     f82:	90 4f       	sbci	r25, 0xF0	; 240
     f84:	09 f0       	breq	.+2      	; 0xf88 <vw_get_message+0x3c>
     f86:	20 e0       	ldi	r18, 0x00	; 0
}
     f88:	82 2f       	mov	r24, r18
     f8a:	08 95       	ret

00000f8c <__vector_6>:
#else // Assume Arduino Uno (328p or similar)

SIGNAL(TIMER1_COMPA_vect)
#endif // __AVR_ATtiny85__

{
     f8c:	1f 92       	push	r1
     f8e:	0f 92       	push	r0
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	0f 92       	push	r0
     f94:	11 24       	eor	r1, r1
     f96:	2f 93       	push	r18
     f98:	3f 93       	push	r19
     f9a:	4f 93       	push	r20
     f9c:	5f 93       	push	r21
     f9e:	6f 93       	push	r22
     fa0:	7f 93       	push	r23
     fa2:	8f 93       	push	r24
     fa4:	9f 93       	push	r25
     fa6:	af 93       	push	r26
     fa8:	bf 93       	push	r27
     faa:	ef 93       	push	r30
     fac:	ff 93       	push	r31
    if (vw_rx_enabled && !vw_tx_enabled)
     fae:	80 91 e4 01 	lds	r24, 0x01E4
     fb2:	88 23       	and	r24, r24
     fb4:	29 f0       	breq	.+10     	; 0xfc0 <__vector_6+0x34>
     fb6:	80 91 ee 01 	lds	r24, 0x01EE
     fba:	88 23       	and	r24, r24
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <__vector_6+0x34>
     fbe:	4c c0       	rjmp	.+152    	; 0x1058 <__vector_6+0xcc>
	vw_rx_sample = digitalRead(vw_rx_pin);
    
    // Do transmitter stuff first to reduce transmitter bit jitter due 
    // to variable receiver processing
    if (vw_tx_enabled && vw_tx_sample++ == 0)
     fc0:	80 91 ee 01 	lds	r24, 0x01EE
     fc4:	88 23       	and	r24, r24
     fc6:	c9 f1       	breq	.+114    	; 0x103a <__vector_6+0xae>
     fc8:	80 91 ef 01 	lds	r24, 0x01EF
     fcc:	91 e0       	ldi	r25, 0x01	; 1
     fce:	98 0f       	add	r25, r24
     fd0:	90 93 ef 01 	sts	0x01EF, r25
     fd4:	81 11       	cpse	r24, r1
     fd6:	31 c0       	rjmp	.+98     	; 0x103a <__vector_6+0xae>
    {
	// Send next bit
	// Symbols are sent LSB first
	// Finished sending the whole message? (after waiting one bit period 
	// since the last bit)
	if (vw_tx_index >= vw_tx_len)
     fd8:	e0 91 f1 01 	lds	r30, 0x01F1
     fdc:	80 91 f2 01 	lds	r24, 0x01F2
     fe0:	e8 17       	cp	r30, r24
     fe2:	58 f0       	brcs	.+22     	; 0xffa <__vector_6+0x6e>
	{
	    vw_tx_stop();
     fe4:	70 df       	rcall	.-288    	; 0xec6 <vw_tx_stop>
	    vw_tx_msg_count++;
     fe6:	80 91 ec 01 	lds	r24, 0x01EC
     fea:	90 91 ed 01 	lds	r25, 0x01ED
     fee:	01 96       	adiw	r24, 0x01	; 1
     ff0:	90 93 ed 01 	sts	0x01ED, r25
     ff4:	80 93 ec 01 	sts	0x01EC, r24
     ff8:	20 c0       	rjmp	.+64     	; 0x103a <__vector_6+0xae>
	}
	else
	{
	    digitalWrite(vw_tx_pin, vw_tx_buf[vw_tx_index] & (1 << vw_tx_bit++));
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	ec 59       	subi	r30, 0x9C	; 156
     ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    1000:	90 81       	ld	r25, Z
    1002:	80 91 f0 01 	lds	r24, 0x01F0
    1006:	21 e0       	ldi	r18, 0x01	; 1
    1008:	28 0f       	add	r18, r24
    100a:	20 93 f0 01 	sts	0x01F0, r18
    100e:	61 e0       	ldi	r22, 0x01	; 1
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <__vector_6+0x8c>
    1014:	66 0f       	add	r22, r22
    1016:	77 1f       	adc	r23, r23
    1018:	8a 95       	dec	r24
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <__vector_6+0x88>
    101c:	69 23       	and	r22, r25
    101e:	80 91 61 00 	lds	r24, 0x0061
    1022:	79 dd       	rcall	.-1294   	; 0xb16 <digitalWrite>
	    if (vw_tx_bit >= 6)
    1024:	80 91 f0 01 	lds	r24, 0x01F0
    1028:	86 30       	cpi	r24, 0x06	; 6
    102a:	38 f0       	brcs	.+14     	; 0x103a <__vector_6+0xae>
	    {
		vw_tx_bit = 0;
    102c:	10 92 f0 01 	sts	0x01F0, r1
		vw_tx_index++;
    1030:	80 91 f1 01 	lds	r24, 0x01F1
    1034:	8f 5f       	subi	r24, 0xFF	; 255
    1036:	80 93 f1 01 	sts	0x01F1, r24
	    }
	}
    }
    if (vw_tx_sample > 7)
    103a:	80 91 ef 01 	lds	r24, 0x01EF
    103e:	88 30       	cpi	r24, 0x08	; 8
    1040:	10 f0       	brcs	.+4      	; 0x1046 <__vector_6+0xba>
	vw_tx_sample = 0;
    1042:	10 92 ef 01 	sts	0x01EF, r1
    
    if (vw_rx_enabled && !vw_tx_enabled)
    1046:	80 91 e4 01 	lds	r24, 0x01E4
    104a:	88 23       	and	r24, r24
    104c:	61 f0       	breq	.+24     	; 0x1066 <__vector_6+0xda>
    104e:	80 91 ee 01 	lds	r24, 0x01EE
    1052:	88 23       	and	r24, r24
    1054:	39 f0       	breq	.+14     	; 0x1064 <__vector_6+0xd8>
    1056:	07 c0       	rjmp	.+14     	; 0x1066 <__vector_6+0xda>
SIGNAL(TIMER1_COMPA_vect)
#endif // __AVR_ATtiny85__

{
    if (vw_rx_enabled && !vw_tx_enabled)
	vw_rx_sample = digitalRead(vw_rx_pin);
    1058:	80 91 62 00 	lds	r24, 0x0062
    105c:	8c dd       	rcall	.-1256   	; 0xb76 <digitalRead>
    105e:	80 93 ea 01 	sts	0x01EA, r24
    1062:	ae cf       	rjmp	.-164    	; 0xfc0 <__vector_6+0x34>
    }
    if (vw_tx_sample > 7)
	vw_tx_sample = 0;
    
    if (vw_rx_enabled && !vw_tx_enabled)
	vw_pll();
    1064:	e4 dd       	rcall	.-1080   	; 0xc2e <vw_pll>
}
    1066:	ff 91       	pop	r31
    1068:	ef 91       	pop	r30
    106a:	bf 91       	pop	r27
    106c:	af 91       	pop	r26
    106e:	9f 91       	pop	r25
    1070:	8f 91       	pop	r24
    1072:	7f 91       	pop	r23
    1074:	6f 91       	pop	r22
    1076:	5f 91       	pop	r21
    1078:	4f 91       	pop	r20
    107a:	3f 91       	pop	r19
    107c:	2f 91       	pop	r18
    107e:	0f 90       	pop	r0
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	0f 90       	pop	r0
    1084:	1f 90       	pop	r1
    1086:	18 95       	reti

00001088 <__divsf3>:
    1088:	0c d0       	rcall	.+24     	; 0x10a2 <__divsf3x>
    108a:	eb c0       	rjmp	.+470    	; 0x1262 <__fp_round>
    108c:	e3 d0       	rcall	.+454    	; 0x1254 <__fp_pscB>
    108e:	40 f0       	brcs	.+16     	; 0x10a0 <__divsf3+0x18>
    1090:	da d0       	rcall	.+436    	; 0x1246 <__fp_pscA>
    1092:	30 f0       	brcs	.+12     	; 0x10a0 <__divsf3+0x18>
    1094:	21 f4       	brne	.+8      	; 0x109e <__divsf3+0x16>
    1096:	5f 3f       	cpi	r21, 0xFF	; 255
    1098:	19 f0       	breq	.+6      	; 0x10a0 <__divsf3+0x18>
    109a:	cc c0       	rjmp	.+408    	; 0x1234 <__fp_inf>
    109c:	51 11       	cpse	r21, r1
    109e:	15 c1       	rjmp	.+554    	; 0x12ca <__fp_szero>
    10a0:	cf c0       	rjmp	.+414    	; 0x1240 <__fp_nan>

000010a2 <__divsf3x>:
    10a2:	f0 d0       	rcall	.+480    	; 0x1284 <__fp_split3>
    10a4:	98 f3       	brcs	.-26     	; 0x108c <__divsf3+0x4>

000010a6 <__divsf3_pse>:
    10a6:	99 23       	and	r25, r25
    10a8:	c9 f3       	breq	.-14     	; 0x109c <__divsf3+0x14>
    10aa:	55 23       	and	r21, r21
    10ac:	b1 f3       	breq	.-20     	; 0x109a <__divsf3+0x12>
    10ae:	95 1b       	sub	r25, r21
    10b0:	55 0b       	sbc	r21, r21
    10b2:	bb 27       	eor	r27, r27
    10b4:	aa 27       	eor	r26, r26
    10b6:	62 17       	cp	r22, r18
    10b8:	73 07       	cpc	r23, r19
    10ba:	84 07       	cpc	r24, r20
    10bc:	38 f0       	brcs	.+14     	; 0x10cc <__divsf3_pse+0x26>
    10be:	9f 5f       	subi	r25, 0xFF	; 255
    10c0:	5f 4f       	sbci	r21, 0xFF	; 255
    10c2:	22 0f       	add	r18, r18
    10c4:	33 1f       	adc	r19, r19
    10c6:	44 1f       	adc	r20, r20
    10c8:	aa 1f       	adc	r26, r26
    10ca:	a9 f3       	breq	.-22     	; 0x10b6 <__divsf3_pse+0x10>
    10cc:	33 d0       	rcall	.+102    	; 0x1134 <__divsf3_pse+0x8e>
    10ce:	0e 2e       	mov	r0, r30
    10d0:	3a f0       	brmi	.+14     	; 0x10e0 <__divsf3_pse+0x3a>
    10d2:	e0 e8       	ldi	r30, 0x80	; 128
    10d4:	30 d0       	rcall	.+96     	; 0x1136 <__divsf3_pse+0x90>
    10d6:	91 50       	subi	r25, 0x01	; 1
    10d8:	50 40       	sbci	r21, 0x00	; 0
    10da:	e6 95       	lsr	r30
    10dc:	00 1c       	adc	r0, r0
    10de:	ca f7       	brpl	.-14     	; 0x10d2 <__divsf3_pse+0x2c>
    10e0:	29 d0       	rcall	.+82     	; 0x1134 <__divsf3_pse+0x8e>
    10e2:	fe 2f       	mov	r31, r30
    10e4:	27 d0       	rcall	.+78     	; 0x1134 <__divsf3_pse+0x8e>
    10e6:	66 0f       	add	r22, r22
    10e8:	77 1f       	adc	r23, r23
    10ea:	88 1f       	adc	r24, r24
    10ec:	bb 1f       	adc	r27, r27
    10ee:	26 17       	cp	r18, r22
    10f0:	37 07       	cpc	r19, r23
    10f2:	48 07       	cpc	r20, r24
    10f4:	ab 07       	cpc	r26, r27
    10f6:	b0 e8       	ldi	r27, 0x80	; 128
    10f8:	09 f0       	breq	.+2      	; 0x10fc <__divsf3_pse+0x56>
    10fa:	bb 0b       	sbc	r27, r27
    10fc:	80 2d       	mov	r24, r0
    10fe:	bf 01       	movw	r22, r30
    1100:	ff 27       	eor	r31, r31
    1102:	93 58       	subi	r25, 0x83	; 131
    1104:	5f 4f       	sbci	r21, 0xFF	; 255
    1106:	2a f0       	brmi	.+10     	; 0x1112 <__divsf3_pse+0x6c>
    1108:	9e 3f       	cpi	r25, 0xFE	; 254
    110a:	51 05       	cpc	r21, r1
    110c:	68 f0       	brcs	.+26     	; 0x1128 <__divsf3_pse+0x82>
    110e:	92 c0       	rjmp	.+292    	; 0x1234 <__fp_inf>
    1110:	dc c0       	rjmp	.+440    	; 0x12ca <__fp_szero>
    1112:	5f 3f       	cpi	r21, 0xFF	; 255
    1114:	ec f3       	brlt	.-6      	; 0x1110 <__divsf3_pse+0x6a>
    1116:	98 3e       	cpi	r25, 0xE8	; 232
    1118:	dc f3       	brlt	.-10     	; 0x1110 <__divsf3_pse+0x6a>
    111a:	86 95       	lsr	r24
    111c:	77 95       	ror	r23
    111e:	67 95       	ror	r22
    1120:	b7 95       	ror	r27
    1122:	f7 95       	ror	r31
    1124:	9f 5f       	subi	r25, 0xFF	; 255
    1126:	c9 f7       	brne	.-14     	; 0x111a <__divsf3_pse+0x74>
    1128:	88 0f       	add	r24, r24
    112a:	91 1d       	adc	r25, r1
    112c:	96 95       	lsr	r25
    112e:	87 95       	ror	r24
    1130:	97 f9       	bld	r25, 7
    1132:	08 95       	ret
    1134:	e1 e0       	ldi	r30, 0x01	; 1
    1136:	66 0f       	add	r22, r22
    1138:	77 1f       	adc	r23, r23
    113a:	88 1f       	adc	r24, r24
    113c:	bb 1f       	adc	r27, r27
    113e:	62 17       	cp	r22, r18
    1140:	73 07       	cpc	r23, r19
    1142:	84 07       	cpc	r24, r20
    1144:	ba 07       	cpc	r27, r26
    1146:	20 f0       	brcs	.+8      	; 0x1150 <__divsf3_pse+0xaa>
    1148:	62 1b       	sub	r22, r18
    114a:	73 0b       	sbc	r23, r19
    114c:	84 0b       	sbc	r24, r20
    114e:	ba 0b       	sbc	r27, r26
    1150:	ee 1f       	adc	r30, r30
    1152:	88 f7       	brcc	.-30     	; 0x1136 <__divsf3_pse+0x90>
    1154:	e0 95       	com	r30
    1156:	08 95       	ret

00001158 <__fixsfsi>:
    1158:	04 d0       	rcall	.+8      	; 0x1162 <__fixunssfsi>
    115a:	68 94       	set
    115c:	b1 11       	cpse	r27, r1
    115e:	b5 c0       	rjmp	.+362    	; 0x12ca <__fp_szero>
    1160:	08 95       	ret

00001162 <__fixunssfsi>:
    1162:	98 d0       	rcall	.+304    	; 0x1294 <__fp_splitA>
    1164:	88 f0       	brcs	.+34     	; 0x1188 <__fixunssfsi+0x26>
    1166:	9f 57       	subi	r25, 0x7F	; 127
    1168:	90 f0       	brcs	.+36     	; 0x118e <__fixunssfsi+0x2c>
    116a:	b9 2f       	mov	r27, r25
    116c:	99 27       	eor	r25, r25
    116e:	b7 51       	subi	r27, 0x17	; 23
    1170:	a0 f0       	brcs	.+40     	; 0x119a <__fixunssfsi+0x38>
    1172:	d1 f0       	breq	.+52     	; 0x11a8 <__fixunssfsi+0x46>
    1174:	66 0f       	add	r22, r22
    1176:	77 1f       	adc	r23, r23
    1178:	88 1f       	adc	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	1a f0       	brmi	.+6      	; 0x1184 <__fixunssfsi+0x22>
    117e:	ba 95       	dec	r27
    1180:	c9 f7       	brne	.-14     	; 0x1174 <__fixunssfsi+0x12>
    1182:	12 c0       	rjmp	.+36     	; 0x11a8 <__fixunssfsi+0x46>
    1184:	b1 30       	cpi	r27, 0x01	; 1
    1186:	81 f0       	breq	.+32     	; 0x11a8 <__fixunssfsi+0x46>
    1188:	9f d0       	rcall	.+318    	; 0x12c8 <__fp_zero>
    118a:	b1 e0       	ldi	r27, 0x01	; 1
    118c:	08 95       	ret
    118e:	9c c0       	rjmp	.+312    	; 0x12c8 <__fp_zero>
    1190:	67 2f       	mov	r22, r23
    1192:	78 2f       	mov	r23, r24
    1194:	88 27       	eor	r24, r24
    1196:	b8 5f       	subi	r27, 0xF8	; 248
    1198:	39 f0       	breq	.+14     	; 0x11a8 <__fixunssfsi+0x46>
    119a:	b9 3f       	cpi	r27, 0xF9	; 249
    119c:	cc f3       	brlt	.-14     	; 0x1190 <__fixunssfsi+0x2e>
    119e:	86 95       	lsr	r24
    11a0:	77 95       	ror	r23
    11a2:	67 95       	ror	r22
    11a4:	b3 95       	inc	r27
    11a6:	d9 f7       	brne	.-10     	; 0x119e <__fixunssfsi+0x3c>
    11a8:	3e f4       	brtc	.+14     	; 0x11b8 <__fixunssfsi+0x56>
    11aa:	90 95       	com	r25
    11ac:	80 95       	com	r24
    11ae:	70 95       	com	r23
    11b0:	61 95       	neg	r22
    11b2:	7f 4f       	sbci	r23, 0xFF	; 255
    11b4:	8f 4f       	sbci	r24, 0xFF	; 255
    11b6:	9f 4f       	sbci	r25, 0xFF	; 255
    11b8:	08 95       	ret

000011ba <__floatunsisf>:
    11ba:	e8 94       	clt
    11bc:	09 c0       	rjmp	.+18     	; 0x11d0 <__floatsisf+0x12>

000011be <__floatsisf>:
    11be:	97 fb       	bst	r25, 7
    11c0:	3e f4       	brtc	.+14     	; 0x11d0 <__floatsisf+0x12>
    11c2:	90 95       	com	r25
    11c4:	80 95       	com	r24
    11c6:	70 95       	com	r23
    11c8:	61 95       	neg	r22
    11ca:	7f 4f       	sbci	r23, 0xFF	; 255
    11cc:	8f 4f       	sbci	r24, 0xFF	; 255
    11ce:	9f 4f       	sbci	r25, 0xFF	; 255
    11d0:	99 23       	and	r25, r25
    11d2:	a9 f0       	breq	.+42     	; 0x11fe <__floatsisf+0x40>
    11d4:	f9 2f       	mov	r31, r25
    11d6:	96 e9       	ldi	r25, 0x96	; 150
    11d8:	bb 27       	eor	r27, r27
    11da:	93 95       	inc	r25
    11dc:	f6 95       	lsr	r31
    11de:	87 95       	ror	r24
    11e0:	77 95       	ror	r23
    11e2:	67 95       	ror	r22
    11e4:	b7 95       	ror	r27
    11e6:	f1 11       	cpse	r31, r1
    11e8:	f8 cf       	rjmp	.-16     	; 0x11da <__floatsisf+0x1c>
    11ea:	fa f4       	brpl	.+62     	; 0x122a <__floatsisf+0x6c>
    11ec:	bb 0f       	add	r27, r27
    11ee:	11 f4       	brne	.+4      	; 0x11f4 <__floatsisf+0x36>
    11f0:	60 ff       	sbrs	r22, 0
    11f2:	1b c0       	rjmp	.+54     	; 0x122a <__floatsisf+0x6c>
    11f4:	6f 5f       	subi	r22, 0xFF	; 255
    11f6:	7f 4f       	sbci	r23, 0xFF	; 255
    11f8:	8f 4f       	sbci	r24, 0xFF	; 255
    11fa:	9f 4f       	sbci	r25, 0xFF	; 255
    11fc:	16 c0       	rjmp	.+44     	; 0x122a <__floatsisf+0x6c>
    11fe:	88 23       	and	r24, r24
    1200:	11 f0       	breq	.+4      	; 0x1206 <__floatsisf+0x48>
    1202:	96 e9       	ldi	r25, 0x96	; 150
    1204:	11 c0       	rjmp	.+34     	; 0x1228 <__floatsisf+0x6a>
    1206:	77 23       	and	r23, r23
    1208:	21 f0       	breq	.+8      	; 0x1212 <__floatsisf+0x54>
    120a:	9e e8       	ldi	r25, 0x8E	; 142
    120c:	87 2f       	mov	r24, r23
    120e:	76 2f       	mov	r23, r22
    1210:	05 c0       	rjmp	.+10     	; 0x121c <__floatsisf+0x5e>
    1212:	66 23       	and	r22, r22
    1214:	71 f0       	breq	.+28     	; 0x1232 <__floatsisf+0x74>
    1216:	96 e8       	ldi	r25, 0x86	; 134
    1218:	86 2f       	mov	r24, r22
    121a:	70 e0       	ldi	r23, 0x00	; 0
    121c:	60 e0       	ldi	r22, 0x00	; 0
    121e:	2a f0       	brmi	.+10     	; 0x122a <__floatsisf+0x6c>
    1220:	9a 95       	dec	r25
    1222:	66 0f       	add	r22, r22
    1224:	77 1f       	adc	r23, r23
    1226:	88 1f       	adc	r24, r24
    1228:	da f7       	brpl	.-10     	; 0x1220 <__floatsisf+0x62>
    122a:	88 0f       	add	r24, r24
    122c:	96 95       	lsr	r25
    122e:	87 95       	ror	r24
    1230:	97 f9       	bld	r25, 7
    1232:	08 95       	ret

00001234 <__fp_inf>:
    1234:	97 f9       	bld	r25, 7
    1236:	9f 67       	ori	r25, 0x7F	; 127
    1238:	80 e8       	ldi	r24, 0x80	; 128
    123a:	70 e0       	ldi	r23, 0x00	; 0
    123c:	60 e0       	ldi	r22, 0x00	; 0
    123e:	08 95       	ret

00001240 <__fp_nan>:
    1240:	9f ef       	ldi	r25, 0xFF	; 255
    1242:	80 ec       	ldi	r24, 0xC0	; 192
    1244:	08 95       	ret

00001246 <__fp_pscA>:
    1246:	00 24       	eor	r0, r0
    1248:	0a 94       	dec	r0
    124a:	16 16       	cp	r1, r22
    124c:	17 06       	cpc	r1, r23
    124e:	18 06       	cpc	r1, r24
    1250:	09 06       	cpc	r0, r25
    1252:	08 95       	ret

00001254 <__fp_pscB>:
    1254:	00 24       	eor	r0, r0
    1256:	0a 94       	dec	r0
    1258:	12 16       	cp	r1, r18
    125a:	13 06       	cpc	r1, r19
    125c:	14 06       	cpc	r1, r20
    125e:	05 06       	cpc	r0, r21
    1260:	08 95       	ret

00001262 <__fp_round>:
    1262:	09 2e       	mov	r0, r25
    1264:	03 94       	inc	r0
    1266:	00 0c       	add	r0, r0
    1268:	11 f4       	brne	.+4      	; 0x126e <__fp_round+0xc>
    126a:	88 23       	and	r24, r24
    126c:	52 f0       	brmi	.+20     	; 0x1282 <__fp_round+0x20>
    126e:	bb 0f       	add	r27, r27
    1270:	40 f4       	brcc	.+16     	; 0x1282 <__fp_round+0x20>
    1272:	bf 2b       	or	r27, r31
    1274:	11 f4       	brne	.+4      	; 0x127a <__fp_round+0x18>
    1276:	60 ff       	sbrs	r22, 0
    1278:	04 c0       	rjmp	.+8      	; 0x1282 <__fp_round+0x20>
    127a:	6f 5f       	subi	r22, 0xFF	; 255
    127c:	7f 4f       	sbci	r23, 0xFF	; 255
    127e:	8f 4f       	sbci	r24, 0xFF	; 255
    1280:	9f 4f       	sbci	r25, 0xFF	; 255
    1282:	08 95       	ret

00001284 <__fp_split3>:
    1284:	57 fd       	sbrc	r21, 7
    1286:	90 58       	subi	r25, 0x80	; 128
    1288:	44 0f       	add	r20, r20
    128a:	55 1f       	adc	r21, r21
    128c:	59 f0       	breq	.+22     	; 0x12a4 <__fp_splitA+0x10>
    128e:	5f 3f       	cpi	r21, 0xFF	; 255
    1290:	71 f0       	breq	.+28     	; 0x12ae <__fp_splitA+0x1a>
    1292:	47 95       	ror	r20

00001294 <__fp_splitA>:
    1294:	88 0f       	add	r24, r24
    1296:	97 fb       	bst	r25, 7
    1298:	99 1f       	adc	r25, r25
    129a:	61 f0       	breq	.+24     	; 0x12b4 <__fp_splitA+0x20>
    129c:	9f 3f       	cpi	r25, 0xFF	; 255
    129e:	79 f0       	breq	.+30     	; 0x12be <__fp_splitA+0x2a>
    12a0:	87 95       	ror	r24
    12a2:	08 95       	ret
    12a4:	12 16       	cp	r1, r18
    12a6:	13 06       	cpc	r1, r19
    12a8:	14 06       	cpc	r1, r20
    12aa:	55 1f       	adc	r21, r21
    12ac:	f2 cf       	rjmp	.-28     	; 0x1292 <__fp_split3+0xe>
    12ae:	46 95       	lsr	r20
    12b0:	f1 df       	rcall	.-30     	; 0x1294 <__fp_splitA>
    12b2:	08 c0       	rjmp	.+16     	; 0x12c4 <__fp_splitA+0x30>
    12b4:	16 16       	cp	r1, r22
    12b6:	17 06       	cpc	r1, r23
    12b8:	18 06       	cpc	r1, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	f1 cf       	rjmp	.-30     	; 0x12a0 <__fp_splitA+0xc>
    12be:	86 95       	lsr	r24
    12c0:	71 05       	cpc	r23, r1
    12c2:	61 05       	cpc	r22, r1
    12c4:	08 94       	sec
    12c6:	08 95       	ret

000012c8 <__fp_zero>:
    12c8:	e8 94       	clt

000012ca <__fp_szero>:
    12ca:	bb 27       	eor	r27, r27
    12cc:	66 27       	eor	r22, r22
    12ce:	77 27       	eor	r23, r23
    12d0:	cb 01       	movw	r24, r22
    12d2:	97 f9       	bld	r25, 7
    12d4:	08 95       	ret

000012d6 <__mulsf3>:
    12d6:	0b d0       	rcall	.+22     	; 0x12ee <__mulsf3x>
    12d8:	c4 cf       	rjmp	.-120    	; 0x1262 <__fp_round>
    12da:	b5 df       	rcall	.-150    	; 0x1246 <__fp_pscA>
    12dc:	28 f0       	brcs	.+10     	; 0x12e8 <__mulsf3+0x12>
    12de:	ba df       	rcall	.-140    	; 0x1254 <__fp_pscB>
    12e0:	18 f0       	brcs	.+6      	; 0x12e8 <__mulsf3+0x12>
    12e2:	95 23       	and	r25, r21
    12e4:	09 f0       	breq	.+2      	; 0x12e8 <__mulsf3+0x12>
    12e6:	a6 cf       	rjmp	.-180    	; 0x1234 <__fp_inf>
    12e8:	ab cf       	rjmp	.-170    	; 0x1240 <__fp_nan>
    12ea:	11 24       	eor	r1, r1
    12ec:	ee cf       	rjmp	.-36     	; 0x12ca <__fp_szero>

000012ee <__mulsf3x>:
    12ee:	ca df       	rcall	.-108    	; 0x1284 <__fp_split3>
    12f0:	a0 f3       	brcs	.-24     	; 0x12da <__mulsf3+0x4>

000012f2 <__mulsf3_pse>:
    12f2:	95 9f       	mul	r25, r21
    12f4:	d1 f3       	breq	.-12     	; 0x12ea <__mulsf3+0x14>
    12f6:	95 0f       	add	r25, r21
    12f8:	50 e0       	ldi	r21, 0x00	; 0
    12fa:	55 1f       	adc	r21, r21
    12fc:	62 9f       	mul	r22, r18
    12fe:	f0 01       	movw	r30, r0
    1300:	72 9f       	mul	r23, r18
    1302:	bb 27       	eor	r27, r27
    1304:	f0 0d       	add	r31, r0
    1306:	b1 1d       	adc	r27, r1
    1308:	63 9f       	mul	r22, r19
    130a:	aa 27       	eor	r26, r26
    130c:	f0 0d       	add	r31, r0
    130e:	b1 1d       	adc	r27, r1
    1310:	aa 1f       	adc	r26, r26
    1312:	64 9f       	mul	r22, r20
    1314:	66 27       	eor	r22, r22
    1316:	b0 0d       	add	r27, r0
    1318:	a1 1d       	adc	r26, r1
    131a:	66 1f       	adc	r22, r22
    131c:	82 9f       	mul	r24, r18
    131e:	22 27       	eor	r18, r18
    1320:	b0 0d       	add	r27, r0
    1322:	a1 1d       	adc	r26, r1
    1324:	62 1f       	adc	r22, r18
    1326:	73 9f       	mul	r23, r19
    1328:	b0 0d       	add	r27, r0
    132a:	a1 1d       	adc	r26, r1
    132c:	62 1f       	adc	r22, r18
    132e:	83 9f       	mul	r24, r19
    1330:	a0 0d       	add	r26, r0
    1332:	61 1d       	adc	r22, r1
    1334:	22 1f       	adc	r18, r18
    1336:	74 9f       	mul	r23, r20
    1338:	33 27       	eor	r19, r19
    133a:	a0 0d       	add	r26, r0
    133c:	61 1d       	adc	r22, r1
    133e:	23 1f       	adc	r18, r19
    1340:	84 9f       	mul	r24, r20
    1342:	60 0d       	add	r22, r0
    1344:	21 1d       	adc	r18, r1
    1346:	82 2f       	mov	r24, r18
    1348:	76 2f       	mov	r23, r22
    134a:	6a 2f       	mov	r22, r26
    134c:	11 24       	eor	r1, r1
    134e:	9f 57       	subi	r25, 0x7F	; 127
    1350:	50 40       	sbci	r21, 0x00	; 0
    1352:	8a f0       	brmi	.+34     	; 0x1376 <__mulsf3_pse+0x84>
    1354:	e1 f0       	breq	.+56     	; 0x138e <__mulsf3_pse+0x9c>
    1356:	88 23       	and	r24, r24
    1358:	4a f0       	brmi	.+18     	; 0x136c <__mulsf3_pse+0x7a>
    135a:	ee 0f       	add	r30, r30
    135c:	ff 1f       	adc	r31, r31
    135e:	bb 1f       	adc	r27, r27
    1360:	66 1f       	adc	r22, r22
    1362:	77 1f       	adc	r23, r23
    1364:	88 1f       	adc	r24, r24
    1366:	91 50       	subi	r25, 0x01	; 1
    1368:	50 40       	sbci	r21, 0x00	; 0
    136a:	a9 f7       	brne	.-22     	; 0x1356 <__mulsf3_pse+0x64>
    136c:	9e 3f       	cpi	r25, 0xFE	; 254
    136e:	51 05       	cpc	r21, r1
    1370:	70 f0       	brcs	.+28     	; 0x138e <__mulsf3_pse+0x9c>
    1372:	60 cf       	rjmp	.-320    	; 0x1234 <__fp_inf>
    1374:	aa cf       	rjmp	.-172    	; 0x12ca <__fp_szero>
    1376:	5f 3f       	cpi	r21, 0xFF	; 255
    1378:	ec f3       	brlt	.-6      	; 0x1374 <__mulsf3_pse+0x82>
    137a:	98 3e       	cpi	r25, 0xE8	; 232
    137c:	dc f3       	brlt	.-10     	; 0x1374 <__mulsf3_pse+0x82>
    137e:	86 95       	lsr	r24
    1380:	77 95       	ror	r23
    1382:	67 95       	ror	r22
    1384:	b7 95       	ror	r27
    1386:	f7 95       	ror	r31
    1388:	e7 95       	ror	r30
    138a:	9f 5f       	subi	r25, 0xFF	; 255
    138c:	c1 f7       	brne	.-16     	; 0x137e <__mulsf3_pse+0x8c>
    138e:	fe 2b       	or	r31, r30
    1390:	88 0f       	add	r24, r24
    1392:	91 1d       	adc	r25, r1
    1394:	96 95       	lsr	r25
    1396:	87 95       	ror	r24
    1398:	97 f9       	bld	r25, 7
    139a:	08 95       	ret

0000139c <__udivmodsi4>:
    139c:	a1 e2       	ldi	r26, 0x21	; 33
    139e:	1a 2e       	mov	r1, r26
    13a0:	aa 1b       	sub	r26, r26
    13a2:	bb 1b       	sub	r27, r27
    13a4:	fd 01       	movw	r30, r26
    13a6:	0d c0       	rjmp	.+26     	; 0x13c2 <__udivmodsi4_ep>

000013a8 <__udivmodsi4_loop>:
    13a8:	aa 1f       	adc	r26, r26
    13aa:	bb 1f       	adc	r27, r27
    13ac:	ee 1f       	adc	r30, r30
    13ae:	ff 1f       	adc	r31, r31
    13b0:	a2 17       	cp	r26, r18
    13b2:	b3 07       	cpc	r27, r19
    13b4:	e4 07       	cpc	r30, r20
    13b6:	f5 07       	cpc	r31, r21
    13b8:	20 f0       	brcs	.+8      	; 0x13c2 <__udivmodsi4_ep>
    13ba:	a2 1b       	sub	r26, r18
    13bc:	b3 0b       	sbc	r27, r19
    13be:	e4 0b       	sbc	r30, r20
    13c0:	f5 0b       	sbc	r31, r21

000013c2 <__udivmodsi4_ep>:
    13c2:	66 1f       	adc	r22, r22
    13c4:	77 1f       	adc	r23, r23
    13c6:	88 1f       	adc	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	1a 94       	dec	r1
    13cc:	69 f7       	brne	.-38     	; 0x13a8 <__udivmodsi4_loop>
    13ce:	60 95       	com	r22
    13d0:	70 95       	com	r23
    13d2:	80 95       	com	r24
    13d4:	90 95       	com	r25
    13d6:	9b 01       	movw	r18, r22
    13d8:	ac 01       	movw	r20, r24
    13da:	bd 01       	movw	r22, r26
    13dc:	cf 01       	movw	r24, r30
    13de:	08 95       	ret

000013e0 <__tablejump2__>:
    13e0:	ee 0f       	add	r30, r30
    13e2:	ff 1f       	adc	r31, r31
    13e4:	05 90       	lpm	r0, Z+
    13e6:	f4 91       	lpm	r31, Z
    13e8:	e0 2d       	mov	r30, r0
    13ea:	09 94       	ijmp

000013ec <memcpy>:
    13ec:	fb 01       	movw	r30, r22
    13ee:	dc 01       	movw	r26, r24
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <memcpy+0xa>
    13f2:	01 90       	ld	r0, Z+
    13f4:	0d 92       	st	X+, r0
    13f6:	41 50       	subi	r20, 0x01	; 1
    13f8:	50 40       	sbci	r21, 0x00	; 0
    13fa:	d8 f7       	brcc	.-10     	; 0x13f2 <memcpy+0x6>
    13fc:	08 95       	ret

000013fe <strcmp>:
    13fe:	fb 01       	movw	r30, r22
    1400:	dc 01       	movw	r26, r24
    1402:	8d 91       	ld	r24, X+
    1404:	01 90       	ld	r0, Z+
    1406:	80 19       	sub	r24, r0
    1408:	01 10       	cpse	r0, r1
    140a:	d9 f3       	breq	.-10     	; 0x1402 <strcmp+0x4>
    140c:	99 0b       	sbc	r25, r25
    140e:	08 95       	ret

00001410 <_exit>:
    1410:	f8 94       	cli

00001412 <__stop_program>:
    1412:	ff cf       	rjmp	.-2      	; 0x1412 <__stop_program>
